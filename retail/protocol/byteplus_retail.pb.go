// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.17.3
// source: byteplus_retail.proto

package protocol

import (
	protocol "github.com/byteplus-sdk/sdk-go/common/protocol"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// The user proto.
type User struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required.
	// The unique user identifier.
	// The consistency is required (for the same user) among different
	// UserEvents, PredictRequest, or any other places.
	// Device ID or member ID is often used as user_id here.
	//
	// Note: If you want to encrypt the id and used the hashed value here,
	// please do the consistent encryption for all its appearances,
	// including UserEvents and Predict Requests.
	//
	// Note: If your users often switch between login/logout status
	// (In web or mobile application), you might get inconsistent IDs
	// (member v.s. visitor) for the same user.
	// To avoid this, we suggested that you can use consistent ID like device ID.
	// Sample values are "1234567", "359938082141597",
	// "665DEA957EBFB34D41B1F1D80E4B5F89"
	// Please refer to
	// [this](../docs/effective-and-efficient-data-synchronization#stable-user-identifier) for more details.
	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// Optional.
	// The gender of the given user.
	// The accepted values are: "male", "female", and "other".
	Gender string `protobuf:"bytes,2,opt,name=gender,proto3" json:"gender,omitempty"`
	// Optional.
	// The age of the given user.
	// It can be the an (estimate) single value, or a range.
	// e.g. "23", "18-25", "0-15", "50-100", etc
	Age string `protobuf:"bytes,3,opt,name=age,proto3" json:"age,omitempty"`
	// Optional.
	// The tags for the given user.
	// Please send as many tags as possible here, even it might be a bit
	// inaccurate or has low coverage.
	// Some sample values are "new users", "high buying power", etc.
	// Please refer to
	// [this](../docs/effective-and-efficient-data-synchronization#requirements-for-free-format-string-fields) for more details.
	/// 该字段是取值无关的 link guide 2.5.2 取值无关
	Tags []string `protobuf:"bytes,4,rep,name=tags,proto3" json:"tags,omitempty"`
	// Optional.
	// The channel where the given user is acquired.
	// Some sample values are "AppStore", "GoogleAds", "FacebookAds", etc.
	// Please refer to
	// [this](../docs/effective-and-efficient-data-synchronization#requirements-for-free-format-string-fields) for more details.
	/// 该字段是取值无关的 link guide 2.5.2 取值无关
	ActivationChannel string `protobuf:"bytes,5,opt,name=activation_channel,json=activationChannel,proto3" json:"activation_channel,omitempty"`
	// Optional.
	// The level of the membership.
	// Some sample values are "silver", "elite", "4", "5", etc.
	// Please refer to
	// [this](../docs/effective-and-efficient-data-synchronization#requirements-for-free-format-string-fields) for more details.
	/// 该字段是取值无关的 link guide 2.5.2 取值无关
	MembershipLevel string `protobuf:"bytes,6,opt,name=membership_level,json=membershipLevel,proto3" json:"membership_level,omitempty"`
	// Optional.
	// The timestamp when the given user activated or registered.
	RegistrationTimestamp int64 `protobuf:"varint,7,opt,name=registration_timestamp,json=registrationTimestamp,proto3" json:"registration_timestamp,omitempty"`
	// Optional.
	// The user location info.
	// If the user has multiple locations, please make sure you update it with the
	// most recent one.
	// Please refer to
	// [this](../docs/ways-to-improve-recommendation-performance#data-recency) for more details.
	Location *User_Location `protobuf:"bytes,8,opt,name=location,proto3" json:"location,omitempty"`
	// Optional.
	// This is a catch-all field to pass all the additional information.
	// Please provide as much information as possible.
	Extra map[string]string `protobuf:"bytes,100,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *User) Reset() {
	*x = User{}
	if protoimpl.UnsafeEnabled {
		mi := &file_byteplus_retail_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *User) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*User) ProtoMessage() {}

func (x *User) ProtoReflect() protoreflect.Message {
	mi := &file_byteplus_retail_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use User.ProtoReflect.Descriptor instead.
func (*User) Descriptor() ([]byte, []int) {
	return file_byteplus_retail_proto_rawDescGZIP(), []int{0}
}

func (x *User) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *User) GetGender() string {
	if x != nil {
		return x.Gender
	}
	return ""
}

func (x *User) GetAge() string {
	if x != nil {
		return x.Age
	}
	return ""
}

func (x *User) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *User) GetActivationChannel() string {
	if x != nil {
		return x.ActivationChannel
	}
	return ""
}

func (x *User) GetMembershipLevel() string {
	if x != nil {
		return x.MembershipLevel
	}
	return ""
}

func (x *User) GetRegistrationTimestamp() int64 {
	if x != nil {
		return x.RegistrationTimestamp
	}
	return 0
}

func (x *User) GetLocation() *User_Location {
	if x != nil {
		return x.Location
	}
	return nil
}

func (x *User) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

// Request proto for WriteUsers method.
type WriteUsersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required.
	// A list of users to write.
	// The max # of users allowed is 2000, otherwise a standard 400 error is
	// returned.
	Users []*User `protobuf:"bytes,1,rep,name=users,proto3" json:"users,omitempty"`
	// Optional.
	// This is a catch-all field to pass all the additional information.
	// Please provide as much information as possible.
	Extra map[string]string `protobuf:"bytes,100,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *WriteUsersRequest) Reset() {
	*x = WriteUsersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_byteplus_retail_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WriteUsersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WriteUsersRequest) ProtoMessage() {}

func (x *WriteUsersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_byteplus_retail_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WriteUsersRequest.ProtoReflect.Descriptor instead.
func (*WriteUsersRequest) Descriptor() ([]byte, []int) {
	return file_byteplus_retail_proto_rawDescGZIP(), []int{1}
}

func (x *WriteUsersRequest) GetUsers() []*User {
	if x != nil {
		return x.Users
	}
	return nil
}

func (x *WriteUsersRequest) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

// The error proto for a single user.
type UserError struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Output only.
	// The detailed error message.
	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	// Output only.
	// This is the exact same user proto that was passed in the request.
	User *User `protobuf:"bytes,2,opt,name=user,proto3" json:"user,omitempty"`
}

func (x *UserError) Reset() {
	*x = UserError{}
	if protoimpl.UnsafeEnabled {
		mi := &file_byteplus_retail_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserError) ProtoMessage() {}

func (x *UserError) ProtoReflect() protoreflect.Message {
	mi := &file_byteplus_retail_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserError.ProtoReflect.Descriptor instead.
func (*UserError) Descriptor() ([]byte, []int) {
	return file_byteplus_retail_proto_rawDescGZIP(), []int{2}
}

func (x *UserError) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *UserError) GetUser() *User {
	if x != nil {
		return x.User
	}
	return nil
}

// The response proto for WriteUsers call.
type WriteUsersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Output only.
	// When `status.code` is 0, all payload are successfully written.
	// If `status.code` is 1001, `errors` is populated.
	// Other non-zero values indicate all payload failed.
	Status *protocol.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	// Output only.
	// This field is populated when `status.code` is 1001.
	// When populated, this field contains the errors.
	Errors []*UserError `protobuf:"bytes,2,rep,name=errors,proto3" json:"errors,omitempty"`
}

func (x *WriteUsersResponse) Reset() {
	*x = WriteUsersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_byteplus_retail_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WriteUsersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WriteUsersResponse) ProtoMessage() {}

func (x *WriteUsersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_byteplus_retail_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WriteUsersResponse.ProtoReflect.Descriptor instead.
func (*WriteUsersResponse) Descriptor() ([]byte, []int) {
	return file_byteplus_retail_proto_rawDescGZIP(), []int{3}
}

func (x *WriteUsersResponse) GetStatus() *protocol.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *WriteUsersResponse) GetErrors() []*UserError {
	if x != nil {
		return x.Errors
	}
	return nil
}

// The inline source for the input config for ImportUsers method.
type UsersInlineSource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional.
	// A list of users to import. The max # of items supported is 2k.
	Users []*User `protobuf:"bytes,1,rep,name=users,proto3" json:"users,omitempty"`
}

func (x *UsersInlineSource) Reset() {
	*x = UsersInlineSource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_byteplus_retail_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UsersInlineSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UsersInlineSource) ProtoMessage() {}

func (x *UsersInlineSource) ProtoReflect() protoreflect.Message {
	mi := &file_byteplus_retail_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UsersInlineSource.ProtoReflect.Descriptor instead.
func (*UsersInlineSource) Descriptor() ([]byte, []int) {
	return file_byteplus_retail_proto_rawDescGZIP(), []int{4}
}

func (x *UsersInlineSource) GetUsers() []*User {
	if x != nil {
		return x.Users
	}
	return nil
}

// The input config for the source data.
type UsersInputConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required.
	// The source of the input.
	//
	// Types that are assignable to Source:
	//	*UsersInputConfig_UsersInlineSource
	Source isUsersInputConfig_Source `protobuf_oneof:"source"`
}

func (x *UsersInputConfig) Reset() {
	*x = UsersInputConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_byteplus_retail_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UsersInputConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UsersInputConfig) ProtoMessage() {}

func (x *UsersInputConfig) ProtoReflect() protoreflect.Message {
	mi := &file_byteplus_retail_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UsersInputConfig.ProtoReflect.Descriptor instead.
func (*UsersInputConfig) Descriptor() ([]byte, []int) {
	return file_byteplus_retail_proto_rawDescGZIP(), []int{5}
}

func (m *UsersInputConfig) GetSource() isUsersInputConfig_Source {
	if m != nil {
		return m.Source
	}
	return nil
}

func (x *UsersInputConfig) GetUsersInlineSource() *UsersInlineSource {
	if x, ok := x.GetSource().(*UsersInputConfig_UsersInlineSource); ok {
		return x.UsersInlineSource
	}
	return nil
}

type isUsersInputConfig_Source interface {
	isUsersInputConfig_Source()
}

type UsersInputConfig_UsersInlineSource struct {
	// The Inline source for the input content for users.
	UsersInlineSource *UsersInlineSource `protobuf:"bytes,1,opt,name=users_inline_source,json=usersInlineSource,proto3,oneof"`
}

func (*UsersInputConfig_UsersInlineSource) isUsersInputConfig_Source() {}

// The config proto for the date.
type DateConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required.
	// This should be the same as all dates from `XXXInputConfig`
	// Any violation will result in a standard 400 error.
	// The value of date should to be formatted like this:
	// " yyyy-mm-dd ", for example, "2021-06-10"
	Date string `protobuf:"bytes,2,opt,name=date,proto3" json:"date,omitempty"`
	// Optional.
	// If true, this means the transmission of the data on `date` is 100% done.
	// If not called or delayed, an email alert is fired.
	// Note: This has a significant impact on the performance, so please make sure
	// you call this correctly (timely and accurately).
	// Once a `date` is finalized, any new data with this `date` will be rejected.
	// There, please make sure `is_end` is sent when all the data of the `date`
	// is done transmitting. You could do this by sending the last request as an
	// empty request with only `is_end` being true after all the previous requests
	// done transmitting.
	IsEnd bool `protobuf:"varint,3,opt,name=is_end,json=isEnd,proto3" json:"is_end,omitempty"`
}

func (x *DateConfig) Reset() {
	*x = DateConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_byteplus_retail_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DateConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DateConfig) ProtoMessage() {}

func (x *DateConfig) ProtoReflect() protoreflect.Message {
	mi := &file_byteplus_retail_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DateConfig.ProtoReflect.Descriptor instead.
func (*DateConfig) Descriptor() ([]byte, []int) {
	return file_byteplus_retail_proto_rawDescGZIP(), []int{6}
}

func (x *DateConfig) GetDate() string {
	if x != nil {
		return x.Date
	}
	return ""
}

func (x *DateConfig) GetIsEnd() bool {
	if x != nil {
		return x.IsEnd
	}
	return false
}

// Configuration of destination for Import related errors.
type ImportErrorsConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required.
	// Errors destination. Currently only default to inline.
	//
	// Types that are assignable to Destination:
	//	*ImportErrorsConfig_EmptyDestination
	Destination isImportErrorsConfig_Destination `protobuf_oneof:"destination"`
}

func (x *ImportErrorsConfig) Reset() {
	*x = ImportErrorsConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_byteplus_retail_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImportErrorsConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImportErrorsConfig) ProtoMessage() {}

func (x *ImportErrorsConfig) ProtoReflect() protoreflect.Message {
	mi := &file_byteplus_retail_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImportErrorsConfig.ProtoReflect.Descriptor instead.
func (*ImportErrorsConfig) Descriptor() ([]byte, []int) {
	return file_byteplus_retail_proto_rawDescGZIP(), []int{7}
}

func (m *ImportErrorsConfig) GetDestination() isImportErrorsConfig_Destination {
	if m != nil {
		return m.Destination
	}
	return nil
}

func (x *ImportErrorsConfig) GetEmptyDestination() string {
	if x, ok := x.GetDestination().(*ImportErrorsConfig_EmptyDestination); ok {
		return x.EmptyDestination
	}
	return ""
}

type isImportErrorsConfig_Destination interface {
	isImportErrorsConfig_Destination()
}

type ImportErrorsConfig_EmptyDestination struct {
	// This is just a placeholder.
	EmptyDestination string `protobuf:"bytes,1,opt,name=empty_destination,json=emptyDestination,proto3,oneof"`
}

func (*ImportErrorsConfig_EmptyDestination) isImportErrorsConfig_Destination() {}

// Request proto for the ImportUsers request.
type ImportUsersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required.
	// The desired input config of the data.
	InputConfig *UsersInputConfig `protobuf:"bytes,1,opt,name=input_config,json=inputConfig,proto3" json:"input_config,omitempty"`
	// Required.
	// The desired date config of the data.
	DateConfig *DateConfig `protobuf:"bytes,2,opt,name=date_config,json=dateConfig,proto3" json:"date_config,omitempty"`
	// Optional.
	// The desired location of errors incurred during the Import.
	ErrorsConfig *ImportErrorsConfig `protobuf:"bytes,3,opt,name=errors_config,json=errorsConfig,proto3" json:"errors_config,omitempty"`
	// Optional.
	// This is a catch-all field to pass all the additional information.
	// Please provide as much information as possible.
	Extra map[string]string `protobuf:"bytes,100,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ImportUsersRequest) Reset() {
	*x = ImportUsersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_byteplus_retail_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImportUsersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImportUsersRequest) ProtoMessage() {}

func (x *ImportUsersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_byteplus_retail_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImportUsersRequest.ProtoReflect.Descriptor instead.
func (*ImportUsersRequest) Descriptor() ([]byte, []int) {
	return file_byteplus_retail_proto_rawDescGZIP(), []int{8}
}

func (x *ImportUsersRequest) GetInputConfig() *UsersInputConfig {
	if x != nil {
		return x.InputConfig
	}
	return nil
}

func (x *ImportUsersRequest) GetDateConfig() *DateConfig {
	if x != nil {
		return x.DateConfig
	}
	return nil
}

func (x *ImportUsersRequest) GetErrorsConfig() *ImportErrorsConfig {
	if x != nil {
		return x.ErrorsConfig
	}
	return nil
}

func (x *ImportUsersRequest) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

// The response proto for ImportUsers call.
type ImportUsersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Output only.
	// The status of the import call.
	// When `status.code` is 0, all payload are successfully imported.
	// If `status.code` is 1001, `error_samples` is populated.
	// Other non-zero values indicate all payload failed.
	Status *protocol.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	// Output only.
	// This field is populated when `status.code` is 1001.
	// When populated, this field contains the error samples.
	ErrorSamples []*UserError `protobuf:"bytes,2,rep,name=error_samples,json=errorSamples,proto3" json:"error_samples,omitempty"`
}

func (x *ImportUsersResponse) Reset() {
	*x = ImportUsersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_byteplus_retail_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImportUsersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImportUsersResponse) ProtoMessage() {}

func (x *ImportUsersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_byteplus_retail_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImportUsersResponse.ProtoReflect.Descriptor instead.
func (*ImportUsersResponse) Descriptor() ([]byte, []int) {
	return file_byteplus_retail_proto_rawDescGZIP(), []int{9}
}

func (x *ImportUsersResponse) GetStatus() *protocol.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *ImportUsersResponse) GetErrorSamples() []*UserError {
	if x != nil {
		return x.ErrorSamples
	}
	return nil
}

// The product proto.
type Product struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required.
	// The unique identifier for the product.
	// [link to best practices on deciding product ids](./ways-to-improve-recommendation-performance)
	ProductId string `protobuf:"bytes,1,opt,name=product_id,json=productId,proto3" json:"product_id,omitempty"`
	// Required.
	// The categorical information of the product.
	// Missing this will significantly hurt the performance.
	// For example, if a product has "Shoes -> Men's Shoes -> Basketball Shoes"
	// This should be:
	// [
	//   {"category_depth":1,
	//    "category_nodes": [{"id_or_name":"Shoes"}] },
	//   {"category_depth":2,
	//    "category_nodes": [{"id_or_name":"Men's Shoes"}] },
	//   {"category_depth":3,
	//    "category_nodes": [{"id_or_name":"Basketball Shoes"}] },
	// ]
	// If a product belongs to 2 different categories,
	// "Shoes -> Men's shoes" and "Sports -> Basketball"
	// then
	//
	// [
	//   {"category_depth":1,
	//    "category_nodes": [{"id_or_name":"Shoes"},
	//                       {"id_or_name":"Sports"}] },
	//   {"category_depth":2,
	//    "category_nodes": [{"id_or_name":"Men's shoes"},
	//                       {"id_or_name":"Basketball"}] },
	// ]
	Categories []*Product_Category `protobuf:"bytes,2,rep,name=categories,proto3" json:"categories,omitempty"`
	// Required.
	// Missing this will significantly hurt the performance.
	// The order should be asending on depth.
	// For example, if a product belongs to "Adidas -> Yeezy",
	// this field should be:
	// [
	//   {"brand_depth": 1, "id_or_name":"Adidas"},
	//   {"brand_depth": 2, "id_or_name":"Yeezy"},
	// ]
	Brands []*Product_Brand `protobuf:"bytes,3,rep,name=brands,proto3" json:"brands,omitempty"`
	// Required.
	// The product price info.
	// Please make sure the accuracy and recency.
	// Please refer to
	// [this](../docs/ways-to-improve-recommendation-performance#data-recency) for more details.
	Price *Product_Price `protobuf:"bytes,4,opt,name=price,proto3" json:"price,omitempty"`
	// Required.
	// True if the product is recommendable (result in `Predict` call).
	// Note: Any change of this takes up to 1 hour to take effect.
	// Note: Even if a product isn't recommendable, please still send this to us.
	// This is because that users might interact with such products historically,
	// therefore it provides reasonably strong signals.
	IsRecommendable bool `protobuf:"varint,5,opt,name=is_recommendable,json=isRecommendable,proto3" json:"is_recommendable,omitempty"`
	// Required.
	// The product title.
	Title string `protobuf:"bytes,6,opt,name=title,proto3" json:"title,omitempty"`
	// Optional.
	// The product quality score.
	// Note: this is different than user ratings.
	// It is normally computed as a composite score considering many factors,
	// including sales, customer feedback, information completeness, etc.
	// This score should be normalized to [1.0, 5.0]
	QualityScore float64 `protobuf:"fixed64,7,opt,name=quality_score,json=qualityScore,proto3" json:"quality_score,omitempty"`
	// Please refer to
	// [this](../docs/effective-and-efficient-data-synchronization#requirements-for-free-format-string-fields) for more details.
	/// 该字段是取值无关的 link guide 2.5.2 取值无关
	Tags []string `protobuf:"bytes,8,rep,name=tags,proto3" json:"tags,omitempty"`
	// Optional.
	// The display information of the product.
	Display *Product_Display `protobuf:"bytes,9,opt,name=display,proto3" json:"display,omitempty"`
	// Optional.
	// The product specs.
	ProductSpec *Product_ProductSpec `protobuf:"bytes,10,opt,name=product_spec,json=productSpec,proto3" json:"product_spec,omitempty"`
	// Optional.
	// The seller proto.
	Seller *Product_Seller `protobuf:"bytes,11,opt,name=seller,proto3" json:"seller,omitempty"`
	// Optional.
	// This is a catch-all field to pass all the additional information.
	// Please provide as much information as possible.
	Extra map[string]string `protobuf:"bytes,100,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Product) Reset() {
	*x = Product{}
	if protoimpl.UnsafeEnabled {
		mi := &file_byteplus_retail_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Product) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Product) ProtoMessage() {}

func (x *Product) ProtoReflect() protoreflect.Message {
	mi := &file_byteplus_retail_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Product.ProtoReflect.Descriptor instead.
func (*Product) Descriptor() ([]byte, []int) {
	return file_byteplus_retail_proto_rawDescGZIP(), []int{10}
}

func (x *Product) GetProductId() string {
	if x != nil {
		return x.ProductId
	}
	return ""
}

func (x *Product) GetCategories() []*Product_Category {
	if x != nil {
		return x.Categories
	}
	return nil
}

func (x *Product) GetBrands() []*Product_Brand {
	if x != nil {
		return x.Brands
	}
	return nil
}

func (x *Product) GetPrice() *Product_Price {
	if x != nil {
		return x.Price
	}
	return nil
}

func (x *Product) GetIsRecommendable() bool {
	if x != nil {
		return x.IsRecommendable
	}
	return false
}

func (x *Product) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Product) GetQualityScore() float64 {
	if x != nil {
		return x.QualityScore
	}
	return 0
}

func (x *Product) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *Product) GetDisplay() *Product_Display {
	if x != nil {
		return x.Display
	}
	return nil
}

func (x *Product) GetProductSpec() *Product_ProductSpec {
	if x != nil {
		return x.ProductSpec
	}
	return nil
}

func (x *Product) GetSeller() *Product_Seller {
	if x != nil {
		return x.Seller
	}
	return nil
}

func (x *Product) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

// Request proto for WriteProduct method.
type WriteProductsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required.
	// A list of product to write. The max is 2000 items.
	Products []*Product `protobuf:"bytes,1,rep,name=products,proto3" json:"products,omitempty"`
	// Optional.
	// This is a catch-all field to pass all the additional information.
	// Please provide as much information as possible.
	Extra map[string]string `protobuf:"bytes,100,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *WriteProductsRequest) Reset() {
	*x = WriteProductsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_byteplus_retail_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WriteProductsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WriteProductsRequest) ProtoMessage() {}

func (x *WriteProductsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_byteplus_retail_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WriteProductsRequest.ProtoReflect.Descriptor instead.
func (*WriteProductsRequest) Descriptor() ([]byte, []int) {
	return file_byteplus_retail_proto_rawDescGZIP(), []int{11}
}

func (x *WriteProductsRequest) GetProducts() []*Product {
	if x != nil {
		return x.Products
	}
	return nil
}

func (x *WriteProductsRequest) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

// The product error.
type ProductError struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Output only.
	// The detailed error message.
	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	// Output only.
	// The product that failed.
	Product *Product `protobuf:"bytes,2,opt,name=product,proto3" json:"product,omitempty"`
}

func (x *ProductError) Reset() {
	*x = ProductError{}
	if protoimpl.UnsafeEnabled {
		mi := &file_byteplus_retail_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProductError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductError) ProtoMessage() {}

func (x *ProductError) ProtoReflect() protoreflect.Message {
	mi := &file_byteplus_retail_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductError.ProtoReflect.Descriptor instead.
func (*ProductError) Descriptor() ([]byte, []int) {
	return file_byteplus_retail_proto_rawDescGZIP(), []int{12}
}

func (x *ProductError) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ProductError) GetProduct() *Product {
	if x != nil {
		return x.Product
	}
	return nil
}

// The response for the WriteProduct call.
type WriteProductsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Output only.
	// When `status.code` is 0, all payload are successfully written.
	// If `status.code` is 1001, `errors` is populated.
	// Other non-zero values indicate all payload failed.
	Status *protocol.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	// Output only.
	// This field is populated when `status.code` is 1001.
	// When populated, this field contains the errors.
	Errors []*ProductError `protobuf:"bytes,2,rep,name=errors,proto3" json:"errors,omitempty"`
}

func (x *WriteProductsResponse) Reset() {
	*x = WriteProductsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_byteplus_retail_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WriteProductsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WriteProductsResponse) ProtoMessage() {}

func (x *WriteProductsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_byteplus_retail_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WriteProductsResponse.ProtoReflect.Descriptor instead.
func (*WriteProductsResponse) Descriptor() ([]byte, []int) {
	return file_byteplus_retail_proto_rawDescGZIP(), []int{13}
}

func (x *WriteProductsResponse) GetStatus() *protocol.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *WriteProductsResponse) GetErrors() []*ProductError {
	if x != nil {
		return x.Errors
	}
	return nil
}

// The inline source for the input config for ImportProducts method.
type ProductsInlineSource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional.
	// A list of products to import.
	// The max # of items allowed is 2k.
	Products []*Product `protobuf:"bytes,1,rep,name=products,proto3" json:"products,omitempty"`
}

func (x *ProductsInlineSource) Reset() {
	*x = ProductsInlineSource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_byteplus_retail_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProductsInlineSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductsInlineSource) ProtoMessage() {}

func (x *ProductsInlineSource) ProtoReflect() protoreflect.Message {
	mi := &file_byteplus_retail_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductsInlineSource.ProtoReflect.Descriptor instead.
func (*ProductsInlineSource) Descriptor() ([]byte, []int) {
	return file_byteplus_retail_proto_rawDescGZIP(), []int{14}
}

func (x *ProductsInlineSource) GetProducts() []*Product {
	if x != nil {
		return x.Products
	}
	return nil
}

// The input config source.
type ProductsInputConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required.
	// The source of the input.
	//
	// Types that are assignable to Source:
	//	*ProductsInputConfig_ProductsInlineSource
	Source isProductsInputConfig_Source `protobuf_oneof:"source"`
}

func (x *ProductsInputConfig) Reset() {
	*x = ProductsInputConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_byteplus_retail_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProductsInputConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductsInputConfig) ProtoMessage() {}

func (x *ProductsInputConfig) ProtoReflect() protoreflect.Message {
	mi := &file_byteplus_retail_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductsInputConfig.ProtoReflect.Descriptor instead.
func (*ProductsInputConfig) Descriptor() ([]byte, []int) {
	return file_byteplus_retail_proto_rawDescGZIP(), []int{15}
}

func (m *ProductsInputConfig) GetSource() isProductsInputConfig_Source {
	if m != nil {
		return m.Source
	}
	return nil
}

func (x *ProductsInputConfig) GetProductsInlineSource() *ProductsInlineSource {
	if x, ok := x.GetSource().(*ProductsInputConfig_ProductsInlineSource); ok {
		return x.ProductsInlineSource
	}
	return nil
}

type isProductsInputConfig_Source interface {
	isProductsInputConfig_Source()
}

type ProductsInputConfig_ProductsInlineSource struct {
	// The Inline source for the input content for products.
	ProductsInlineSource *ProductsInlineSource `protobuf:"bytes,1,opt,name=products_inline_source,json=productsInlineSource,proto3,oneof"`
}

func (*ProductsInputConfig_ProductsInlineSource) isProductsInputConfig_Source() {}

// Request proto for the ImportProducts request.
type ImportProductsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required.
	// The desired input config of the data.
	InputConfig *ProductsInputConfig `protobuf:"bytes,1,opt,name=input_config,json=inputConfig,proto3" json:"input_config,omitempty"`
	// Required.
	// The desired date config of the data.
	DateConfig *DateConfig `protobuf:"bytes,2,opt,name=date_config,json=dateConfig,proto3" json:"date_config,omitempty"`
	// Optional.
	// The desired config of errors incurred during the Import.
	ErrorsConfig *ImportErrorsConfig `protobuf:"bytes,3,opt,name=errors_config,json=errorsConfig,proto3" json:"errors_config,omitempty"`
	// Optional.
	// This is a catch-all field to pass all the additional information.
	// Please provide as much information as possible.
	Extra map[string]string `protobuf:"bytes,100,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ImportProductsRequest) Reset() {
	*x = ImportProductsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_byteplus_retail_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImportProductsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImportProductsRequest) ProtoMessage() {}

func (x *ImportProductsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_byteplus_retail_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImportProductsRequest.ProtoReflect.Descriptor instead.
func (*ImportProductsRequest) Descriptor() ([]byte, []int) {
	return file_byteplus_retail_proto_rawDescGZIP(), []int{16}
}

func (x *ImportProductsRequest) GetInputConfig() *ProductsInputConfig {
	if x != nil {
		return x.InputConfig
	}
	return nil
}

func (x *ImportProductsRequest) GetDateConfig() *DateConfig {
	if x != nil {
		return x.DateConfig
	}
	return nil
}

func (x *ImportProductsRequest) GetErrorsConfig() *ImportErrorsConfig {
	if x != nil {
		return x.ErrorsConfig
	}
	return nil
}

func (x *ImportProductsRequest) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

// The response proto for ImportProducts call.
type ImportProductsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Output only.
	// The status of the import call.
	// When `status.code` is 0, all payload are successfully imported.
	// If `status.code` is 1001, `error_samples` is populated.
	// Other non-zero values indicate all payload failed.
	Status *protocol.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	// Output only.
	// This field is populated when `status.code` is 1001.
	// When populated, this field contains the error samples.
	ErrorSamples []*ProductError `protobuf:"bytes,2,rep,name=error_samples,json=errorSamples,proto3" json:"error_samples,omitempty"`
}

func (x *ImportProductsResponse) Reset() {
	*x = ImportProductsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_byteplus_retail_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImportProductsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImportProductsResponse) ProtoMessage() {}

func (x *ImportProductsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_byteplus_retail_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImportProductsResponse.ProtoReflect.Descriptor instead.
func (*ImportProductsResponse) Descriptor() ([]byte, []int) {
	return file_byteplus_retail_proto_rawDescGZIP(), []int{17}
}

func (x *ImportProductsResponse) GetStatus() *protocol.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *ImportProductsResponse) GetErrorSamples() []*ProductError {
	if x != nil {
		return x.ErrorSamples
	}
	return nil
}

// The proto that represents an user event.
type UserEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required.
	// The unique user identifier.
	// Please refer to `User.user_id` for the details.
	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// Required.
	// The user event type.
	// The acceptable values are:
	// "impression", "click", "add-to-cart", "remove-from-cart",
	// "add-to-favorites", "remove-from-favorites", "purchase", "search",
	// "stay-detail-page"
	//
	// Here are the definitions:
	//
	// impression: The product is shown to the user.
	//             It can be server-side impression or (prefered) client-side.
	//             Note: product_id must be non-empty.
	//
	// click     : The user clicked into the product details page.
	//             Note: product_id must be non-empty.
	//
	// add-to-cart : The user added the product in the shopping cart.
	//             Note: product_id must be non-empty.
	//
	// remove-from-cart : The user removed the product from the shopping cart.
	//             Note: product_id must be non-empty.
	//
	// add-to-favorites : The user added the product to favorites.
	//             Note: product_id must be non-empty.
	//
	// remove-from-favorites : The user removed the product from favorites.
	//             Note: product_id must be non-empty.
	//
	// purchase  : The user finished the purchase.
	//             Note: If one order contains multiple products, please use
	//             more than one user event to transmit. If one order contains
	//             the same product multiple times, use `this.purchase_count`.
	//
	// search    : The user search event.
	//           : Note: `this.Context.query` must be non-empty.
	//
	// stay-detail-page: The user leave product details page, report the user stay
	//             time on product details page.
	//             Note: product_id must be non-empty.
	//
	// Note: This field is only for the event type, the actual scene is kept
	// separately.
	EventType string `protobuf:"bytes,2,opt,name=event_type,json=eventType,proto3" json:"event_type,omitempty"`
	// Required.
	// The time when the event happened.
	EventTimestamp int64 `protobuf:"varint,3,opt,name=event_timestamp,json=eventTimestamp,proto3" json:"event_timestamp,omitempty"`
	// Optional.
	// If `event_type` is impression or click, this is required.
	// If `event type` is cart/favorite/purchase, this is optional.
	Scene *UserEvent_Scene `protobuf:"bytes,4,opt,name=scene,proto3" json:"scene,omitempty"`
	// Optional.
	// When event_type is search, this field should be empty.
	// Otherwise it is required.
	ProductId string `protobuf:"bytes,5,opt,name=product_id,json=productId,proto3" json:"product_id,omitempty"`
	// Required.
	// The device info.
	Device *UserEvent_Device `protobuf:"bytes,6,opt,name=device,proto3" json:"device,omitempty"`
	// Optional.
	// The context for this event.
	Context *UserEvent_Context `protobuf:"bytes,7,opt,name=context,proto3" json:"context,omitempty"`
	// Optional.
	// This is strongly recommended to hook all the relevant events towards
	// purchase.
	AttributionToken string `protobuf:"bytes,8,opt,name=attribution_token,json=attributionToken,proto3" json:"attribution_token,omitempty"`
	// Optional.
	// This contains the strategy info from BytePlus.
	// Please refer to
	// [this](../docs/ways-to-improve-recommendation-performance#use-usereventrec_info-and-usereventtraffic_source) for more details.
	/// 可选字段，只需要对来自Byteplus的推荐结果填充此字段，获取Byteplus推荐结果时，可选保存PredictResult.ResponseProduct.rec_info字段值到此字段，并透传到后续曝光点击转化等用户行为中，用户辅助Byteplus提升推荐效果。参照 link PredictResult.ResponseProduct.rec_info
	RecInfo string `protobuf:"bytes,9,opt,name=rec_info,json=recInfo,proto3" json:"rec_info,omitempty"`
	// Optional.
	// The source strategy for this user event.
	// Acceptable values are "self", "byteplus", "other".
	// self   :  came from caller's own engine.
	// byteplus:  came from byteplus's engine.
	// other  :  came from the third-party engine.
	// Please refer to
	// [this](../docs/ways-to-improve-recommendation-performance#use-usereventrec_info-and-usereventtraffic_source) for more details.
	TrafficSource string `protobuf:"bytes,10,opt,name=traffic_source,json=trafficSource,proto3" json:"traffic_source,omitempty"`
	// Optional.
	// When event_type is purchase, this field must be non-zero.
	PurchaseCount int32 `protobuf:"varint,11,opt,name=purchase_count,json=purchaseCount,proto3" json:"purchase_count,omitempty"`
	// Optional.
	// The stay time(in seconds) on detail page.
	// When event_type is stay-detail-page, this field must be non-zero.
	DetailPageStayTime int32 `protobuf:"varint,12,opt,name=detail_page_stay_time,json=detailPageStayTime,proto3" json:"detail_page_stay_time,omitempty"`
	// Optional.
	// This is a catch-all field to pass all the additional information.
	// Please provide as much information as possible.
	Extra map[string]string `protobuf:"bytes,100,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *UserEvent) Reset() {
	*x = UserEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_byteplus_retail_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserEvent) ProtoMessage() {}

func (x *UserEvent) ProtoReflect() protoreflect.Message {
	mi := &file_byteplus_retail_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserEvent.ProtoReflect.Descriptor instead.
func (*UserEvent) Descriptor() ([]byte, []int) {
	return file_byteplus_retail_proto_rawDescGZIP(), []int{18}
}

func (x *UserEvent) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *UserEvent) GetEventType() string {
	if x != nil {
		return x.EventType
	}
	return ""
}

func (x *UserEvent) GetEventTimestamp() int64 {
	if x != nil {
		return x.EventTimestamp
	}
	return 0
}

func (x *UserEvent) GetScene() *UserEvent_Scene {
	if x != nil {
		return x.Scene
	}
	return nil
}

func (x *UserEvent) GetProductId() string {
	if x != nil {
		return x.ProductId
	}
	return ""
}

func (x *UserEvent) GetDevice() *UserEvent_Device {
	if x != nil {
		return x.Device
	}
	return nil
}

func (x *UserEvent) GetContext() *UserEvent_Context {
	if x != nil {
		return x.Context
	}
	return nil
}

func (x *UserEvent) GetAttributionToken() string {
	if x != nil {
		return x.AttributionToken
	}
	return ""
}

func (x *UserEvent) GetRecInfo() string {
	if x != nil {
		return x.RecInfo
	}
	return ""
}

func (x *UserEvent) GetTrafficSource() string {
	if x != nil {
		return x.TrafficSource
	}
	return ""
}

func (x *UserEvent) GetPurchaseCount() int32 {
	if x != nil {
		return x.PurchaseCount
	}
	return 0
}

func (x *UserEvent) GetDetailPageStayTime() int32 {
	if x != nil {
		return x.DetailPageStayTime
	}
	return 0
}

func (x *UserEvent) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

// Request proto for WriteUserEvent method.
type WriteUserEventsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. A list of user events to write.
	// The max # of events allowed is 2000.
	UserEvents []*UserEvent `protobuf:"bytes,1,rep,name=user_events,json=userEvents,proto3" json:"user_events,omitempty"`
	// Optional.
	// This is a catch-all field to pass all the additional information.
	// Please provide as much information as possible.
	Extra map[string]string `protobuf:"bytes,100,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *WriteUserEventsRequest) Reset() {
	*x = WriteUserEventsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_byteplus_retail_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WriteUserEventsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WriteUserEventsRequest) ProtoMessage() {}

func (x *WriteUserEventsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_byteplus_retail_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WriteUserEventsRequest.ProtoReflect.Descriptor instead.
func (*WriteUserEventsRequest) Descriptor() ([]byte, []int) {
	return file_byteplus_retail_proto_rawDescGZIP(), []int{19}
}

func (x *WriteUserEventsRequest) GetUserEvents() []*UserEvent {
	if x != nil {
		return x.UserEvents
	}
	return nil
}

func (x *WriteUserEventsRequest) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

// The error detail for a single user event.
type UserEventError struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Output only.
	// The detailed error message.
	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	// Output only.
	// This is the exact same user proto that was passed in the request.
	UserEvent *UserEvent `protobuf:"bytes,2,opt,name=user_event,json=userEvent,proto3" json:"user_event,omitempty"`
}

func (x *UserEventError) Reset() {
	*x = UserEventError{}
	if protoimpl.UnsafeEnabled {
		mi := &file_byteplus_retail_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserEventError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserEventError) ProtoMessage() {}

func (x *UserEventError) ProtoReflect() protoreflect.Message {
	mi := &file_byteplus_retail_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserEventError.ProtoReflect.Descriptor instead.
func (*UserEventError) Descriptor() ([]byte, []int) {
	return file_byteplus_retail_proto_rawDescGZIP(), []int{20}
}

func (x *UserEventError) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *UserEventError) GetUserEvent() *UserEvent {
	if x != nil {
		return x.UserEvent
	}
	return nil
}

// The response proto for WriteUserEvents.
type WriteUserEventsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Output only.
	// When `status.code` is 0, all payload are successfully written.
	// If `status.code` is 1001, `errors` is populated.
	// Other non-zero values indicate all payload failed.
	Status *protocol.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	// Output only.
	// This field is populated when `status.code` is 1001.
	// When populated, this field contains the errors.
	Errors []*UserEventError `protobuf:"bytes,2,rep,name=errors,proto3" json:"errors,omitempty"`
}

func (x *WriteUserEventsResponse) Reset() {
	*x = WriteUserEventsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_byteplus_retail_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WriteUserEventsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WriteUserEventsResponse) ProtoMessage() {}

func (x *WriteUserEventsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_byteplus_retail_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WriteUserEventsResponse.ProtoReflect.Descriptor instead.
func (*WriteUserEventsResponse) Descriptor() ([]byte, []int) {
	return file_byteplus_retail_proto_rawDescGZIP(), []int{21}
}

func (x *WriteUserEventsResponse) GetStatus() *protocol.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *WriteUserEventsResponse) GetErrors() []*UserEventError {
	if x != nil {
		return x.Errors
	}
	return nil
}

// The inline source for the input config for ImportUserEvents method.
type UserEventsInlineSource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional.
	// A list of user events to import.
	// The max # of items allowed is 2k.
	UserEvents []*UserEvent `protobuf:"bytes,1,rep,name=user_events,json=userEvents,proto3" json:"user_events,omitempty"`
}

func (x *UserEventsInlineSource) Reset() {
	*x = UserEventsInlineSource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_byteplus_retail_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserEventsInlineSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserEventsInlineSource) ProtoMessage() {}

func (x *UserEventsInlineSource) ProtoReflect() protoreflect.Message {
	mi := &file_byteplus_retail_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserEventsInlineSource.ProtoReflect.Descriptor instead.
func (*UserEventsInlineSource) Descriptor() ([]byte, []int) {
	return file_byteplus_retail_proto_rawDescGZIP(), []int{22}
}

func (x *UserEventsInlineSource) GetUserEvents() []*UserEvent {
	if x != nil {
		return x.UserEvents
	}
	return nil
}

// The input config source.
type UserEventsInputConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required.
	// The source of the input.
	//
	// Types that are assignable to Source:
	//	*UserEventsInputConfig_UserEventsInlineSource
	Source isUserEventsInputConfig_Source `protobuf_oneof:"source"`
}

func (x *UserEventsInputConfig) Reset() {
	*x = UserEventsInputConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_byteplus_retail_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserEventsInputConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserEventsInputConfig) ProtoMessage() {}

func (x *UserEventsInputConfig) ProtoReflect() protoreflect.Message {
	mi := &file_byteplus_retail_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserEventsInputConfig.ProtoReflect.Descriptor instead.
func (*UserEventsInputConfig) Descriptor() ([]byte, []int) {
	return file_byteplus_retail_proto_rawDescGZIP(), []int{23}
}

func (m *UserEventsInputConfig) GetSource() isUserEventsInputConfig_Source {
	if m != nil {
		return m.Source
	}
	return nil
}

func (x *UserEventsInputConfig) GetUserEventsInlineSource() *UserEventsInlineSource {
	if x, ok := x.GetSource().(*UserEventsInputConfig_UserEventsInlineSource); ok {
		return x.UserEventsInlineSource
	}
	return nil
}

type isUserEventsInputConfig_Source interface {
	isUserEventsInputConfig_Source()
}

type UserEventsInputConfig_UserEventsInlineSource struct {
	// The Inline source for the input content for UserEvents.
	UserEventsInlineSource *UserEventsInlineSource `protobuf:"bytes,1,opt,name=user_events_inline_source,json=userEventsInlineSource,proto3,oneof"`
}

func (*UserEventsInputConfig_UserEventsInlineSource) isUserEventsInputConfig_Source() {}

// Request proto for the ImportUserEvents request.
type ImportUserEventsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required.
	// The desired input location of the data.
	InputConfig *UserEventsInputConfig `protobuf:"bytes,1,opt,name=input_config,json=inputConfig,proto3" json:"input_config,omitempty"`
	// Required.
	// The desired date config of the data.
	DateConfig *DateConfig `protobuf:"bytes,2,opt,name=date_config,json=dateConfig,proto3" json:"date_config,omitempty"`
	// Optional.
	// The desired location of errors incurred during the Import.
	ErrorsConfig *ImportErrorsConfig `protobuf:"bytes,3,opt,name=errors_config,json=errorsConfig,proto3" json:"errors_config,omitempty"`
	// Optional.
	// This is a catch-all field to pass all the additional information.
	// Please provide as much information as possible.
	Extra map[string]string `protobuf:"bytes,100,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ImportUserEventsRequest) Reset() {
	*x = ImportUserEventsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_byteplus_retail_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImportUserEventsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImportUserEventsRequest) ProtoMessage() {}

func (x *ImportUserEventsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_byteplus_retail_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImportUserEventsRequest.ProtoReflect.Descriptor instead.
func (*ImportUserEventsRequest) Descriptor() ([]byte, []int) {
	return file_byteplus_retail_proto_rawDescGZIP(), []int{24}
}

func (x *ImportUserEventsRequest) GetInputConfig() *UserEventsInputConfig {
	if x != nil {
		return x.InputConfig
	}
	return nil
}

func (x *ImportUserEventsRequest) GetDateConfig() *DateConfig {
	if x != nil {
		return x.DateConfig
	}
	return nil
}

func (x *ImportUserEventsRequest) GetErrorsConfig() *ImportErrorsConfig {
	if x != nil {
		return x.ErrorsConfig
	}
	return nil
}

func (x *ImportUserEventsRequest) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

// The response for the ImportUserEvents call.
type ImportUserEventsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Output only.
	// When `status.code` is 0, all payload are successfully written.
	// If `status.code` is 1001, `error_samples` is populated.
	// Other non-zero values indicate all payload failed.
	Status *protocol.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	// Output only.
	// This field is populated when `status.code` is 1001.
	// When populated, this field contains the error samples.
	ErrorSamples []*UserEventError `protobuf:"bytes,2,rep,name=error_samples,json=errorSamples,proto3" json:"error_samples,omitempty"`
}

func (x *ImportUserEventsResponse) Reset() {
	*x = ImportUserEventsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_byteplus_retail_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImportUserEventsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImportUserEventsResponse) ProtoMessage() {}

func (x *ImportUserEventsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_byteplus_retail_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImportUserEventsResponse.ProtoReflect.Descriptor instead.
func (*ImportUserEventsResponse) Descriptor() ([]byte, []int) {
	return file_byteplus_retail_proto_rawDescGZIP(), []int{25}
}

func (x *ImportUserEventsResponse) GetStatus() *protocol.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *ImportUserEventsResponse) GetErrorSamples() []*UserEventError {
	if x != nil {
		return x.ErrorSamples
	}
	return nil
}

// The request proto for `Predict` call.
type PredictRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required.
	// This is same as `User.user_id`.
	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// Required.
	// The maximum number of products returned.
	// The actual # of products returned is the min of:
	// `size`
	// length(`context.candidates_product_ids`)
	// total # of products with `is_recommendable=True`
	Size int32 `protobuf:"varint,2,opt,name=size,proto3" json:"size,omitempty"`
	// Required.
	// The scene for the recommendation.
	Scene *UserEvent_Scene `protobuf:"bytes,3,opt,name=scene,proto3" json:"scene,omitempty"`
	// Optional.
	// The context of this request.
	Context *PredictRequest_Context `protobuf:"bytes,4,opt,name=context,proto3" json:"context,omitempty"`
	// Optional.
	// This is a catch-all field to pass all the additional information.
	// Please provide as much information as possible.
	Extra map[string]string `protobuf:"bytes,100,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *PredictRequest) Reset() {
	*x = PredictRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_byteplus_retail_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PredictRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PredictRequest) ProtoMessage() {}

func (x *PredictRequest) ProtoReflect() protoreflect.Message {
	mi := &file_byteplus_retail_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PredictRequest.ProtoReflect.Descriptor instead.
func (*PredictRequest) Descriptor() ([]byte, []int) {
	return file_byteplus_retail_proto_rawDescGZIP(), []int{26}
}

func (x *PredictRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *PredictRequest) GetSize() int32 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *PredictRequest) GetScene() *UserEvent_Scene {
	if x != nil {
		return x.Scene
	}
	return nil
}

func (x *PredictRequest) GetContext() *PredictRequest_Context {
	if x != nil {
		return x.Context
	}
	return nil
}

func (x *PredictRequest) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

// A single predict call result.
type PredictResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Output only.
	// The list of predicted products.
	ResponseProducts []*PredictResult_ResponseProduct `protobuf:"bytes,1,rep,name=response_products,json=responseProducts,proto3" json:"response_products,omitempty"`
	// Output only.
	// Extra debug info.
	Extra map[string]string `protobuf:"bytes,100,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *PredictResult) Reset() {
	*x = PredictResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_byteplus_retail_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PredictResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PredictResult) ProtoMessage() {}

func (x *PredictResult) ProtoReflect() protoreflect.Message {
	mi := &file_byteplus_retail_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PredictResult.ProtoReflect.Descriptor instead.
func (*PredictResult) Descriptor() ([]byte, []int) {
	return file_byteplus_retail_proto_rawDescGZIP(), []int{27}
}

func (x *PredictResult) GetResponseProducts() []*PredictResult_ResponseProduct {
	if x != nil {
		return x.ResponseProducts
	}
	return nil
}

func (x *PredictResult) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

// The response proto the predict call.
type PredictResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Output only.
	// The status of the call.
	Status *protocol.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	// Output only.
	// This is same as the request id of request.
	RequestId string `protobuf:"bytes,2,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	// Output only.
	// This is only populated when `PredictResponse.status.code` is not 0.
	Value *PredictResult `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *PredictResponse) Reset() {
	*x = PredictResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_byteplus_retail_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PredictResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PredictResponse) ProtoMessage() {}

func (x *PredictResponse) ProtoReflect() protoreflect.Message {
	mi := &file_byteplus_retail_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PredictResponse.ProtoReflect.Descriptor instead.
func (*PredictResponse) Descriptor() ([]byte, []int) {
	return file_byteplus_retail_proto_rawDescGZIP(), []int{28}
}

func (x *PredictResponse) GetStatus() *protocol.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *PredictResponse) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *PredictResponse) GetValue() *PredictResult {
	if x != nil {
		return x.Value
	}
	return nil
}

// The request proto for AckServerImpressions call.
type AckServerImpressionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required.
	// This should be same as `PredictResponse.request_id`.
	PredictRequestId string `protobuf:"bytes,1,opt,name=predict_request_id,json=predictRequestId,proto3" json:"predict_request_id,omitempty"`
	// Required.
	// This should be same as `PredictRequest.user_id`.
	UserId string `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// Required.
	// This should be the traffic source.
	// Please refer to
	// [this](../docs/ways-to-improve-recommendation-performance#use-usereventrec_info-and-usereventtraffic_source) for more details.
	TrafficSource string `protobuf:"bytes,3,opt,name=traffic_source,json=trafficSource,proto3" json:"traffic_source,omitempty"`
	// Required.
	// The scene info.
	// Please make sure this is as close to UserEvent.scene as possible.
	Scene *UserEvent_Scene `protobuf:"bytes,4,opt,name=scene,proto3" json:"scene,omitempty"`
	// Required.
	// The list of altered products.
	AlteredProducts []*AckServerImpressionsRequest_AlteredProduct `protobuf:"bytes,5,rep,name=altered_products,json=alteredProducts,proto3" json:"altered_products,omitempty"`
}

func (x *AckServerImpressionsRequest) Reset() {
	*x = AckServerImpressionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_byteplus_retail_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AckServerImpressionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AckServerImpressionsRequest) ProtoMessage() {}

func (x *AckServerImpressionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_byteplus_retail_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AckServerImpressionsRequest.ProtoReflect.Descriptor instead.
func (*AckServerImpressionsRequest) Descriptor() ([]byte, []int) {
	return file_byteplus_retail_proto_rawDescGZIP(), []int{29}
}

func (x *AckServerImpressionsRequest) GetPredictRequestId() string {
	if x != nil {
		return x.PredictRequestId
	}
	return ""
}

func (x *AckServerImpressionsRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *AckServerImpressionsRequest) GetTrafficSource() string {
	if x != nil {
		return x.TrafficSource
	}
	return ""
}

func (x *AckServerImpressionsRequest) GetScene() *UserEvent_Scene {
	if x != nil {
		return x.Scene
	}
	return nil
}

func (x *AckServerImpressionsRequest) GetAlteredProducts() []*AckServerImpressionsRequest_AlteredProduct {
	if x != nil {
		return x.AlteredProducts
	}
	return nil
}

// The response message for AckServerImpressions.
type AckServerImpressionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Output only.
	// The status of this response.
	Status *protocol.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *AckServerImpressionsResponse) Reset() {
	*x = AckServerImpressionsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_byteplus_retail_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AckServerImpressionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AckServerImpressionsResponse) ProtoMessage() {}

func (x *AckServerImpressionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_byteplus_retail_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AckServerImpressionsResponse.ProtoReflect.Descriptor instead.
func (*AckServerImpressionsResponse) Descriptor() ([]byte, []int) {
	return file_byteplus_retail_proto_rawDescGZIP(), []int{30}
}

func (x *AckServerImpressionsResponse) GetStatus() *protocol.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

// Optional.
// The location info.
type User_Location struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional.
	// Country name.
	// Some sample values are "USA", "UK", etc.
	// Please refer to
	// [this](../docs/effective-and-efficient-data-synchronization#requirements-for-free-format-string-fields) for more details.
	/// 该字段是取值无关的 link guide 2.5.2 取值无关
	Country string `protobuf:"bytes,1,opt,name=country,proto3" json:"country,omitempty"`
	// Optional.
	// City name.
	// Some sample values are "San Jose", "Chicago", "NYC", etc.
	// Please refer to
	// [this](../docs/effective-and-efficient-data-synchronization#requirements-for-free-format-string-fields) for more details.
	/// 该字段是取值无关的 link guide 2.5.2 取值无关
	City string `protobuf:"bytes,2,opt,name=city,proto3" json:"city,omitempty"`
	// Optional.
	// The more fine grained district or area.
	// Some sample values are "king county", "santa monica county", etc.
	// Please refer to
	// [this](../docs/effective-and-efficient-data-synchronization#requirements-for-free-format-string-fields) for more details.
	/// 该字段是取值无关的 link guide 2.5.2 取值无关
	DistrictOrArea string `protobuf:"bytes,3,opt,name=district_or_area,json=districtOrArea,proto3" json:"district_or_area,omitempty"`
	// Optional.
	// Postal code of the address. Not all countries use or require postal codes
	// to be present.
	Postcode string `protobuf:"bytes,4,opt,name=postcode,proto3" json:"postcode,omitempty"`
}

func (x *User_Location) Reset() {
	*x = User_Location{}
	if protoimpl.UnsafeEnabled {
		mi := &file_byteplus_retail_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *User_Location) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*User_Location) ProtoMessage() {}

func (x *User_Location) ProtoReflect() protoreflect.Message {
	mi := &file_byteplus_retail_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use User_Location.ProtoReflect.Descriptor instead.
func (*User_Location) Descriptor() ([]byte, []int) {
	return file_byteplus_retail_proto_rawDescGZIP(), []int{0, 0}
}

func (x *User_Location) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

func (x *User_Location) GetCity() string {
	if x != nil {
		return x.City
	}
	return ""
}

func (x *User_Location) GetDistrictOrArea() string {
	if x != nil {
		return x.DistrictOrArea
	}
	return ""
}

func (x *User_Location) GetPostcode() string {
	if x != nil {
		return x.Postcode
	}
	return ""
}

// The category proto.
type Product_Category struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required.
	// The depth of the category.
	// This is consecutive (1-based) and ascending.
	CategoryDepth int32 `protobuf:"varint,1,opt,name=category_depth,json=categoryDepth,proto3" json:"category_depth,omitempty"`
	// Required.
	// The category nodes belong to the same depth.
	CategoryNodes []*Product_Category_CategoryNode `protobuf:"bytes,2,rep,name=category_nodes,json=categoryNodes,proto3" json:"category_nodes,omitempty"`
}

func (x *Product_Category) Reset() {
	*x = Product_Category{}
	if protoimpl.UnsafeEnabled {
		mi := &file_byteplus_retail_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Product_Category) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Product_Category) ProtoMessage() {}

func (x *Product_Category) ProtoReflect() protoreflect.Message {
	mi := &file_byteplus_retail_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Product_Category.ProtoReflect.Descriptor instead.
func (*Product_Category) Descriptor() ([]byte, []int) {
	return file_byteplus_retail_proto_rawDescGZIP(), []int{10, 0}
}

func (x *Product_Category) GetCategoryDepth() int32 {
	if x != nil {
		return x.CategoryDepth
	}
	return 0
}

func (x *Product_Category) GetCategoryNodes() []*Product_Category_CategoryNode {
	if x != nil {
		return x.CategoryNodes
	}
	return nil
}

// The brand proto.
type Product_Brand struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required.
	// The brand depth. This is consecutive (1-based) and ascending.
	BrandDepth int32 `protobuf:"varint,1,opt,name=brand_depth,json=brandDepth,proto3" json:"brand_depth,omitempty"`
	// Required.
	// The id or name of the brand at this depth.
	IdOrName string `protobuf:"bytes,2,opt,name=id_or_name,json=idOrName,proto3" json:"id_or_name,omitempty"`
}

func (x *Product_Brand) Reset() {
	*x = Product_Brand{}
	if protoimpl.UnsafeEnabled {
		mi := &file_byteplus_retail_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Product_Brand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Product_Brand) ProtoMessage() {}

func (x *Product_Brand) ProtoReflect() protoreflect.Message {
	mi := &file_byteplus_retail_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Product_Brand.ProtoReflect.Descriptor instead.
func (*Product_Brand) Descriptor() ([]byte, []int) {
	return file_byteplus_retail_proto_rawDescGZIP(), []int{10, 1}
}

func (x *Product_Brand) GetBrandDepth() int32 {
	if x != nil {
		return x.BrandDepth
	}
	return 0
}

func (x *Product_Brand) GetIdOrName() string {
	if x != nil {
		return x.IdOrName
	}
	return ""
}

// The price proto.
// Please make sure the products that need to be ranked together
// have the same currency.
type Product_Price struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required.
	// The current price in cents.
	// e.g. $100.12 should be 10012 here.
	CurrentPrice int64 `protobuf:"varint,1,opt,name=current_price,json=currentPrice,proto3" json:"current_price,omitempty"`
	// Required.
	// The original price in cents.
	// e.g. $100.12 should be 10012 here.
	OriginPrice int64 `protobuf:"varint,2,opt,name=origin_price,json=originPrice,proto3" json:"origin_price,omitempty"`
}

func (x *Product_Price) Reset() {
	*x = Product_Price{}
	if protoimpl.UnsafeEnabled {
		mi := &file_byteplus_retail_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Product_Price) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Product_Price) ProtoMessage() {}

func (x *Product_Price) ProtoReflect() protoreflect.Message {
	mi := &file_byteplus_retail_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Product_Price.ProtoReflect.Descriptor instead.
func (*Product_Price) Descriptor() ([]byte, []int) {
	return file_byteplus_retail_proto_rawDescGZIP(), []int{10, 2}
}

func (x *Product_Price) GetCurrentPrice() int64 {
	if x != nil {
		return x.CurrentPrice
	}
	return 0
}

func (x *Product_Price) GetOriginPrice() int64 {
	if x != nil {
		return x.OriginPrice
	}
	return 0
}

// The product display information.
type Product_Display struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Please refer to
	// [this](../docs/effective-and-efficient-data-synchronization#requirements-for-free-format-string-fields) for more details.
	/// 该字段是取值无关的 link guide 2.5.2 取值无关
	ListingPageDisplayTags []string `protobuf:"bytes,1,rep,name=listing_page_display_tags,json=listingPageDisplayTags,proto3" json:"listing_page_display_tags,omitempty"`
	// Optional.
	// The tags visible in the details page.
	// Please fill as much as possible.
	// Sample values are: "free shipping", "1 year guarantee", etc
	// Please refer to
	// [this](../docs/effective-and-efficient-data-synchronization#requirements-for-free-format-string-fields) for more details.
	/// 该字段是取值无关的 link guide 2.5.2 取值无关
	DetailPageDisplayTags []string `protobuf:"bytes,2,rep,name=detail_page_display_tags,json=detailPageDisplayTags,proto3" json:"detail_page_display_tags,omitempty"`
	// Optional.
	// The product display media type in ths listing page.
	// The only acceptable values are ["image", "video", "other"].
	ListingPageDisplayType string `protobuf:"bytes,3,opt,name=listing_page_display_type,json=listingPageDisplayType,proto3" json:"listing_page_display_type,omitempty"`
	// Optional.
	// When `listing_page_display_type` is one of the multi-media types,
	// put the url here.
	CoverMultimediaUrl string `protobuf:"bytes,4,opt,name=cover_multimedia_url,json=coverMultimediaUrl,proto3" json:"cover_multimedia_url,omitempty"`
}

func (x *Product_Display) Reset() {
	*x = Product_Display{}
	if protoimpl.UnsafeEnabled {
		mi := &file_byteplus_retail_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Product_Display) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Product_Display) ProtoMessage() {}

func (x *Product_Display) ProtoReflect() protoreflect.Message {
	mi := &file_byteplus_retail_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Product_Display.ProtoReflect.Descriptor instead.
func (*Product_Display) Descriptor() ([]byte, []int) {
	return file_byteplus_retail_proto_rawDescGZIP(), []int{10, 3}
}

func (x *Product_Display) GetListingPageDisplayTags() []string {
	if x != nil {
		return x.ListingPageDisplayTags
	}
	return nil
}

func (x *Product_Display) GetDetailPageDisplayTags() []string {
	if x != nil {
		return x.DetailPageDisplayTags
	}
	return nil
}

func (x *Product_Display) GetListingPageDisplayType() string {
	if x != nil {
		return x.ListingPageDisplayType
	}
	return ""
}

func (x *Product_Display) GetCoverMultimediaUrl() string {
	if x != nil {
		return x.CoverMultimediaUrl
	}
	return ""
}

// The detailed product specs.
type Product_ProductSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required.
	// The product group id.
	// For example, the beer (same brand) might have 6-pack, 12-pack, etc,
	// each has a different `product_id`, then they should have the
	// `same product_group_id`
	ProductGroupId string `protobuf:"bytes,1,opt,name=product_group_id,json=productGroupId,proto3" json:"product_group_id,omitempty"`
	// Optional.
	// The rating given by the users.
	// The value is normalized to [0.0, 5.0].
	UserRating float64 `protobuf:"fixed64,2,opt,name=user_rating,json=userRating,proto3" json:"user_rating,omitempty"`
	// Optional.
	// The # of comments for this product.
	CommentCount int32 `protobuf:"varint,3,opt,name=comment_count,json=commentCount,proto3" json:"comment_count,omitempty"`
	// Optional.
	// The source of the product.
	// The accepted values are ["self", "thirdparty", "other"].
	Source string `protobuf:"bytes,4,opt,name=source,proto3" json:"source,omitempty"`
	// Optional.
	// The time that the product is on sales.
	PublishTimestamp int64 `protobuf:"varint,5,opt,name=publish_timestamp,json=publishTimestamp,proto3" json:"publish_timestamp,omitempty"`
}

func (x *Product_ProductSpec) Reset() {
	*x = Product_ProductSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_byteplus_retail_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Product_ProductSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Product_ProductSpec) ProtoMessage() {}

func (x *Product_ProductSpec) ProtoReflect() protoreflect.Message {
	mi := &file_byteplus_retail_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Product_ProductSpec.ProtoReflect.Descriptor instead.
func (*Product_ProductSpec) Descriptor() ([]byte, []int) {
	return file_byteplus_retail_proto_rawDescGZIP(), []int{10, 4}
}

func (x *Product_ProductSpec) GetProductGroupId() string {
	if x != nil {
		return x.ProductGroupId
	}
	return ""
}

func (x *Product_ProductSpec) GetUserRating() float64 {
	if x != nil {
		return x.UserRating
	}
	return 0
}

func (x *Product_ProductSpec) GetCommentCount() int32 {
	if x != nil {
		return x.CommentCount
	}
	return 0
}

func (x *Product_ProductSpec) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *Product_ProductSpec) GetPublishTimestamp() int64 {
	if x != nil {
		return x.PublishTimestamp
	}
	return 0
}

// Seller info.
type Product_Seller struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required.
	// The id for the seller.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Optional.
	// The seller's level.
	// The sample values are "gold", "silver", etc.
	// Please refer to
	// [this](../docs/effective-and-efficient-data-synchronization#requirements-for-free-format-string-fields) for more details.
	/// 该字段是取值无关的 link guide 2.5.2 取值无关
	SellerLevel string `protobuf:"bytes,2,opt,name=seller_level,json=sellerLevel,proto3" json:"seller_level,omitempty"`
	// Optional.
	// The seller's rating.
	// Normalized to [0.0, 5.0].
	SellerRating float64 `protobuf:"fixed64,3,opt,name=seller_rating,json=sellerRating,proto3" json:"seller_rating,omitempty"`
}

func (x *Product_Seller) Reset() {
	*x = Product_Seller{}
	if protoimpl.UnsafeEnabled {
		mi := &file_byteplus_retail_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Product_Seller) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Product_Seller) ProtoMessage() {}

func (x *Product_Seller) ProtoReflect() protoreflect.Message {
	mi := &file_byteplus_retail_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Product_Seller.ProtoReflect.Descriptor instead.
func (*Product_Seller) Descriptor() ([]byte, []int) {
	return file_byteplus_retail_proto_rawDescGZIP(), []int{10, 5}
}

func (x *Product_Seller) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Product_Seller) GetSellerLevel() string {
	if x != nil {
		return x.SellerLevel
	}
	return ""
}

func (x *Product_Seller) GetSellerRating() float64 {
	if x != nil {
		return x.SellerRating
	}
	return 0
}

// The single node of the category.
type Product_Category_CategoryNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IdOrName string `protobuf:"bytes,1,opt,name=id_or_name,json=idOrName,proto3" json:"id_or_name,omitempty"`
}

func (x *Product_Category_CategoryNode) Reset() {
	*x = Product_Category_CategoryNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_byteplus_retail_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Product_Category_CategoryNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Product_Category_CategoryNode) ProtoMessage() {}

func (x *Product_Category_CategoryNode) ProtoReflect() protoreflect.Message {
	mi := &file_byteplus_retail_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Product_Category_CategoryNode.ProtoReflect.Descriptor instead.
func (*Product_Category_CategoryNode) Descriptor() ([]byte, []int) {
	return file_byteplus_retail_proto_rawDescGZIP(), []int{10, 0, 0}
}

func (x *Product_Category_CategoryNode) GetIdOrName() string {
	if x != nil {
		return x.IdOrName
	}
	return ""
}

// The scene where the event happened.
type UserEvent_Scene struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required.
	// The unique identifier for the scene.
	// It can be Home page, Search page, Details page, etc.
	// It is strongly recommended that you split the scene if possible.
	// Please refer to
	// [this](../docs/effective-and-efficient-data-synchronization#requirements-for-free-format-string-fields) for more details.
	SceneName string `protobuf:"bytes,1,opt,name=scene_name,json=sceneName,proto3" json:"scene_name,omitempty"`
	// Optional.
	// The page number.
	// It can be:
	// 1. Users swipe the screen for X times then see the product.
	// 2. Users go to page X and see the product.
	// In this case, X is the page number.
	//
	// This should default to be 0. That means everything fits into 1 page.
	PageNumber int32 `protobuf:"varint,2,opt,name=page_number,json=pageNumber,proto3" json:"page_number,omitempty"`
	// Optional.
	// The offset (1-based) within the page above.
	Offset int32 `protobuf:"varint,3,opt,name=offset,proto3" json:"offset,omitempty"`
}

func (x *UserEvent_Scene) Reset() {
	*x = UserEvent_Scene{}
	if protoimpl.UnsafeEnabled {
		mi := &file_byteplus_retail_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserEvent_Scene) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserEvent_Scene) ProtoMessage() {}

func (x *UserEvent_Scene) ProtoReflect() protoreflect.Message {
	mi := &file_byteplus_retail_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserEvent_Scene.ProtoReflect.Descriptor instead.
func (*UserEvent_Scene) Descriptor() ([]byte, []int) {
	return file_byteplus_retail_proto_rawDescGZIP(), []int{18, 0}
}

func (x *UserEvent_Scene) GetSceneName() string {
	if x != nil {
		return x.SceneName
	}
	return ""
}

func (x *UserEvent_Scene) GetPageNumber() int32 {
	if x != nil {
		return x.PageNumber
	}
	return 0
}

func (x *UserEvent_Scene) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

// The device proto.
type UserEvent_Device struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required.
	// The platform used by the user.
	// The acceptable values are "app", "desktop-web", "mobile-web", "other".
	// app: user use APP
	// desktop-web: user use desktop web
	// mobile-web: user use mobile web
	Platform string `protobuf:"bytes,1,opt,name=platform,proto3" json:"platform,omitempty"`
	// Optional.
	// The platform used by the user.
	// The acceptable values are "android", "ios", "windows", "other"
	// and "other".
	OsType string `protobuf:"bytes,2,opt,name=os_type,json=osType,proto3" json:"os_type,omitempty"`
	// Optional.
	// Your application version.
	// e.g. V9.0.8.
	// Please refer to
	// [this](../docs/effective-and-efficient-data-synchronization#requirements-for-free-format-string-fields) for more details.
	/// 该字段是取值无关的 link guide 2.5.2 取值无关
	AppVersion string `protobuf:"bytes,3,opt,name=app_version,json=appVersion,proto3" json:"app_version,omitempty"`
	// Optional.
	// The device model.
	// e.g. "iPhone10", "Pixel 4".
	// Please refer to
	// [this](../docs/effective-and-efficient-data-synchronization#requirements-for-free-format-string-fields) for more details.
	/// 该字段是取值无关的 link guide 2.5.2 取值无关
	DeviceModel string `protobuf:"bytes,4,opt,name=device_model,json=deviceModel,proto3" json:"device_model,omitempty"`
	// Optional.
	// The brand of the device.
	// e.g. "Samsung"
	// Please refer to
	// [this](../docs/effective-and-efficient-data-synchronization#requirements-for-free-format-string-fields) for more details.
	/// 该字段是取值无关的 link guide 2.5.2 取值无关
	DeviceBrand string `protobuf:"bytes,5,opt,name=device_brand,json=deviceBrand,proto3" json:"device_brand,omitempty"`
	// Optional.
	// The operating system version.
	// e.g. "14.4.2"
	// Please refer to
	// [this](../docs/effective-and-efficient-data-synchronization#requirements-for-free-format-string-fields) for more details.
	/// 该字段是取值无关的 link guide 2.5.2 取值无关
	OsVersion string `protobuf:"bytes,6,opt,name=os_version,json=osVersion,proto3" json:"os_version,omitempty"`
	// Optional.
	// The type of the browser.
	// e.g. "chrome", "firefox", etc.
	// Please refer to
	// [this](../docs/effective-and-efficient-data-synchronization#requirements-for-free-format-string-fields) for more details.
	/// 该字段是取值无关的 link guide 2.5.2 取值无关
	BrowserType string `protobuf:"bytes,7,opt,name=browser_type,json=browserType,proto3" json:"browser_type,omitempty"`
	// Optional.
	// The UserAgent for the browser.
	// Please refer to
	// [this](../docs/effective-and-efficient-data-synchronization#requirements-for-free-format-string-fields) for more details.
	/// 该字段是取值无关的 link guide 2.5.2 取值无关
	UserAgent string `protobuf:"bytes,8,opt,name=user_agent,json=userAgent,proto3" json:"user_agent,omitempty"`
	// Optional.
	// The network used.
	// The acceptable values are "2g", "3g", "4g", "5g", "wifi", "other".
	Network string `protobuf:"bytes,9,opt,name=network,proto3" json:"network,omitempty"`
}

func (x *UserEvent_Device) Reset() {
	*x = UserEvent_Device{}
	if protoimpl.UnsafeEnabled {
		mi := &file_byteplus_retail_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserEvent_Device) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserEvent_Device) ProtoMessage() {}

func (x *UserEvent_Device) ProtoReflect() protoreflect.Message {
	mi := &file_byteplus_retail_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserEvent_Device.ProtoReflect.Descriptor instead.
func (*UserEvent_Device) Descriptor() ([]byte, []int) {
	return file_byteplus_retail_proto_rawDescGZIP(), []int{18, 1}
}

func (x *UserEvent_Device) GetPlatform() string {
	if x != nil {
		return x.Platform
	}
	return ""
}

func (x *UserEvent_Device) GetOsType() string {
	if x != nil {
		return x.OsType
	}
	return ""
}

func (x *UserEvent_Device) GetAppVersion() string {
	if x != nil {
		return x.AppVersion
	}
	return ""
}

func (x *UserEvent_Device) GetDeviceModel() string {
	if x != nil {
		return x.DeviceModel
	}
	return ""
}

func (x *UserEvent_Device) GetDeviceBrand() string {
	if x != nil {
		return x.DeviceBrand
	}
	return ""
}

func (x *UserEvent_Device) GetOsVersion() string {
	if x != nil {
		return x.OsVersion
	}
	return ""
}

func (x *UserEvent_Device) GetBrowserType() string {
	if x != nil {
		return x.BrowserType
	}
	return ""
}

func (x *UserEvent_Device) GetUserAgent() string {
	if x != nil {
		return x.UserAgent
	}
	return ""
}

func (x *UserEvent_Device) GetNetwork() string {
	if x != nil {
		return x.Network
	}
	return ""
}

// The context for this event.
type UserEvent_Context struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional.
	// This is required for the search event.
	// Please also provide this when the purchase/impression event follows the search event.
	Query string `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
	// Optional.
	// The main product id on the "related to this product" page.
	RootProductId string `protobuf:"bytes,2,opt,name=root_product_id,json=rootProductId,proto3" json:"root_product_id,omitempty"`
}

func (x *UserEvent_Context) Reset() {
	*x = UserEvent_Context{}
	if protoimpl.UnsafeEnabled {
		mi := &file_byteplus_retail_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserEvent_Context) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserEvent_Context) ProtoMessage() {}

func (x *UserEvent_Context) ProtoReflect() protoreflect.Message {
	mi := &file_byteplus_retail_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserEvent_Context.ProtoReflect.Descriptor instead.
func (*UserEvent_Context) Descriptor() ([]byte, []int) {
	return file_byteplus_retail_proto_rawDescGZIP(), []int{18, 2}
}

func (x *UserEvent_Context) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

func (x *UserEvent_Context) GetRootProductId() string {
	if x != nil {
		return x.RootProductId
	}
	return ""
}

// The context of this request.
type PredictRequest_Context struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional.
	// This is only required for product details page.
	RootProduct *Product `protobuf:"bytes,1,opt,name=root_product,json=rootProduct,proto3" json:"root_product,omitempty"`
	// Optional.
	// Make sure this is as close to `UserEvent.device` as possible.
	Device *UserEvent_Device `protobuf:"bytes,2,opt,name=device,proto3" json:"device,omitempty"`
	// Optional.
	// The list of candidates for the recommendation.
	// If this is empty, all products are the candidates.
	CandidateProductIds []string `protobuf:"bytes,3,rep,name=candidate_product_ids,json=candidateProductIds,proto3" json:"candidate_product_ids,omitempty"`
}

func (x *PredictRequest_Context) Reset() {
	*x = PredictRequest_Context{}
	if protoimpl.UnsafeEnabled {
		mi := &file_byteplus_retail_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PredictRequest_Context) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PredictRequest_Context) ProtoMessage() {}

func (x *PredictRequest_Context) ProtoReflect() protoreflect.Message {
	mi := &file_byteplus_retail_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PredictRequest_Context.ProtoReflect.Descriptor instead.
func (*PredictRequest_Context) Descriptor() ([]byte, []int) {
	return file_byteplus_retail_proto_rawDescGZIP(), []int{26, 0}
}

func (x *PredictRequest_Context) GetRootProduct() *Product {
	if x != nil {
		return x.RootProduct
	}
	return nil
}

func (x *PredictRequest_Context) GetDevice() *UserEvent_Device {
	if x != nil {
		return x.Device
	}
	return nil
}

func (x *PredictRequest_Context) GetCandidateProductIds() []string {
	if x != nil {
		return x.CandidateProductIds
	}
	return nil
}

// The response of a product.
type PredictResult_ResponseProduct struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Output only.
	// The product id.
	// This is consistent with `Product.product_id`.
	ProductId string `protobuf:"bytes,1,opt,name=product_id,json=productId,proto3" json:"product_id,omitempty"`
	// Output only.
	// This is the 1-based ranking of the product.
	Rank int32 `protobuf:"varint,2,opt,name=rank,proto3" json:"rank,omitempty"`
	// Output only.
	// The is the predicted CTR.
	Pctr float64 `protobuf:"fixed64,3,opt,name=pctr,proto3" json:"pctr,omitempty"`
	// Output only.
	// This is the predicted CVR.
	Pcvr float64 `protobuf:"fixed64,4,opt,name=pcvr,proto3" json:"pcvr,omitempty"`
	// Output only.
	// The strategy used for this particular recommendation result.
	// Please refer to [this](../docs/ways-to-improve-recommendation-performance#use-usereventrec_info-and-usereventtraffic_source) for more details.
	RecInfo string `protobuf:"bytes,5,opt,name=rec_info,json=recInfo,proto3" json:"rec_info,omitempty"`
	// Output only.
	// All the extra info here.
	Extra map[string]string `protobuf:"bytes,100,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *PredictResult_ResponseProduct) Reset() {
	*x = PredictResult_ResponseProduct{}
	if protoimpl.UnsafeEnabled {
		mi := &file_byteplus_retail_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PredictResult_ResponseProduct) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PredictResult_ResponseProduct) ProtoMessage() {}

func (x *PredictResult_ResponseProduct) ProtoReflect() protoreflect.Message {
	mi := &file_byteplus_retail_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PredictResult_ResponseProduct.ProtoReflect.Descriptor instead.
func (*PredictResult_ResponseProduct) Descriptor() ([]byte, []int) {
	return file_byteplus_retail_proto_rawDescGZIP(), []int{27, 0}
}

func (x *PredictResult_ResponseProduct) GetProductId() string {
	if x != nil {
		return x.ProductId
	}
	return ""
}

func (x *PredictResult_ResponseProduct) GetRank() int32 {
	if x != nil {
		return x.Rank
	}
	return 0
}

func (x *PredictResult_ResponseProduct) GetPctr() float64 {
	if x != nil {
		return x.Pctr
	}
	return 0
}

func (x *PredictResult_ResponseProduct) GetPcvr() float64 {
	if x != nil {
		return x.Pcvr
	}
	return 0
}

func (x *PredictResult_ResponseProduct) GetRecInfo() string {
	if x != nil {
		return x.RecInfo
	}
	return ""
}

func (x *PredictResult_ResponseProduct) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

// The product that was altered.
type AckServerImpressionsRequest_AlteredProduct struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required.
	// This is same as `Product.product_id`.
	ProductId string `protobuf:"bytes,1,opt,name=product_id,json=productId,proto3" json:"product_id,omitempty"`
	// Required.
	// The final state of the product.
	// The acceptable values are "kept", "filtered", "inserted".
	// kept     : The product was kept as is.
	// filtered : The product is filtered by the caller's own logic.
	// inserted : The product is inserted by the caller's own logic.
	AlteredReason string `protobuf:"bytes,2,opt,name=altered_reason,json=alteredReason,proto3" json:"altered_reason,omitempty"`
	// Required.
	// The final rank.
	// If this is unset (or 0), we assume it is filtered in actual impression.
	Rank int32 `protobuf:"varint,3,opt,name=rank,proto3" json:"rank,omitempty"`
	// Optional.
	// This is a catch-all field to pass all the additional information.
	// Please provide as much information as possible.
	Extra map[string]string `protobuf:"bytes,101,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *AckServerImpressionsRequest_AlteredProduct) Reset() {
	*x = AckServerImpressionsRequest_AlteredProduct{}
	if protoimpl.UnsafeEnabled {
		mi := &file_byteplus_retail_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AckServerImpressionsRequest_AlteredProduct) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AckServerImpressionsRequest_AlteredProduct) ProtoMessage() {}

func (x *AckServerImpressionsRequest_AlteredProduct) ProtoReflect() protoreflect.Message {
	mi := &file_byteplus_retail_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AckServerImpressionsRequest_AlteredProduct.ProtoReflect.Descriptor instead.
func (*AckServerImpressionsRequest_AlteredProduct) Descriptor() ([]byte, []int) {
	return file_byteplus_retail_proto_rawDescGZIP(), []int{29, 0}
}

func (x *AckServerImpressionsRequest_AlteredProduct) GetProductId() string {
	if x != nil {
		return x.ProductId
	}
	return ""
}

func (x *AckServerImpressionsRequest_AlteredProduct) GetAlteredReason() string {
	if x != nil {
		return x.AlteredReason
	}
	return ""
}

func (x *AckServerImpressionsRequest_AlteredProduct) GetRank() int32 {
	if x != nil {
		return x.Rank
	}
	return 0
}

func (x *AckServerImpressionsRequest_AlteredProduct) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

var File_byteplus_retail_proto protoreflect.FileDescriptor

var file_byteplus_retail_proto_rawDesc = []byte{
	0x0a, 0x15, 0x62, 0x79, 0x74, 0x65, 0x70, 0x6c, 0x75, 0x73, 0x5f, 0x72, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x19, 0x62, 0x79, 0x74, 0x65, 0x64, 0x61, 0x6e,
	0x63, 0x65, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x70, 0x6c, 0x75, 0x73, 0x2e, 0x72, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x1a, 0x15, 0x62, 0x79, 0x74, 0x65, 0x70, 0x6c, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xb0, 0x04, 0x0a, 0x04, 0x55, 0x73,
	0x65, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x67,
	0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x67, 0x65, 0x6e,
	0x64, 0x65, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x2d, 0x0a, 0x12, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x29, 0x0a, 0x10, 0x6d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x12, 0x35, 0x0a, 0x16, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x15, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x44, 0x0a, 0x08, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x62,
	0x79, 0x74, 0x65, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x70, 0x6c, 0x75,
	0x73, 0x2e, 0x72, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x2e, 0x4c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x40, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x64, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2a, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x62, 0x79, 0x74, 0x65,
	0x70, 0x6c, 0x75, 0x73, 0x2e, 0x72, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74,
	0x72, 0x61, 0x1a, 0x7e, 0x0a, 0x08, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18,
	0x0a, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x69, 0x74, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x69, 0x74, 0x79, 0x12, 0x28, 0x0a, 0x10,
	0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x5f, 0x6f, 0x72, 0x5f, 0x61, 0x72, 0x65, 0x61,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74,
	0x4f, 0x72, 0x41, 0x72, 0x65, 0x61, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x74, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x74, 0x63, 0x6f,
	0x64, 0x65, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xd3, 0x01, 0x0a,
	0x11, 0x57, 0x72, 0x69, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x35, 0x0a, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x62, 0x79,
	0x74, 0x65, 0x70, 0x6c, 0x75, 0x73, 0x2e, 0x72, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x52, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x12, 0x4d, 0x0a, 0x05, 0x65, 0x78, 0x74,
	0x72, 0x61, 0x18, 0x64, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x64,
	0x61, 0x6e, 0x63, 0x65, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x70, 0x6c, 0x75, 0x73, 0x2e, 0x72, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x2e, 0x57, 0x72, 0x69, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72,
	0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0x5a, 0x0a, 0x09, 0x55, 0x73, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12,
	0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x33, 0x0a, 0x04, 0x75, 0x73, 0x65,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x64, 0x61,
	0x6e, 0x63, 0x65, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x70, 0x6c, 0x75, 0x73, 0x2e, 0x72, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x22, 0x8d,
	0x01, 0x0a, 0x12, 0x57, 0x72, 0x69, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x39, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x64, 0x61, 0x6e, 0x63,
	0x65, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x70, 0x6c, 0x75, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x3c, 0x0a, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x62, 0x79, 0x74,
	0x65, 0x70, 0x6c, 0x75, 0x73, 0x2e, 0x72, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x22, 0x4a,
	0x0a, 0x11, 0x55, 0x73, 0x65, 0x72, 0x73, 0x49, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x12, 0x35, 0x0a, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x62,
	0x79, 0x74, 0x65, 0x70, 0x6c, 0x75, 0x73, 0x2e, 0x72, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x52, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x22, 0x7c, 0x0a, 0x10, 0x55, 0x73,
	0x65, 0x72, 0x73, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x5e,
	0x0a, 0x13, 0x75, 0x73, 0x65, 0x72, 0x73, 0x5f, 0x69, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x62, 0x79,
	0x74, 0x65, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x70, 0x6c, 0x75, 0x73,
	0x2e, 0x72, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x73, 0x49, 0x6e, 0x6c,
	0x69, 0x6e, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x48, 0x00, 0x52, 0x11, 0x75, 0x73, 0x65,
	0x72, 0x73, 0x49, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x08,
	0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x22, 0x37, 0x0a, 0x0a, 0x44, 0x61, 0x74, 0x65,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x69, 0x73,
	0x5f, 0x65, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x69, 0x73, 0x45, 0x6e,
	0x64, 0x22, 0x52, 0x0a, 0x12, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x2d, 0x0a, 0x11, 0x65, 0x6d, 0x70, 0x74, 0x79,
	0x5f, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x00, 0x52, 0x10, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x44, 0x65, 0x73, 0x74, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0d, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x8a, 0x03, 0x0a, 0x12, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74,
	0x55, 0x73, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4e, 0x0a, 0x0c,
	0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x62,
	0x79, 0x74, 0x65, 0x70, 0x6c, 0x75, 0x73, 0x2e, 0x72, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x73, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x0b, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x46, 0x0a, 0x0b,
	0x64, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x25, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x62, 0x79,
	0x74, 0x65, 0x70, 0x6c, 0x75, 0x73, 0x2e, 0x72, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x2e, 0x44, 0x61,
	0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0a, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x52, 0x0a, 0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x5f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x62, 0x79,
	0x74, 0x65, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x70, 0x6c, 0x75, 0x73,
	0x2e, 0x72, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x2e, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x4e, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72,
	0x61, 0x18, 0x64, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x64, 0x61,
	0x6e, 0x63, 0x65, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x70, 0x6c, 0x75, 0x73, 0x2e, 0x72, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x2e, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x55, 0x73, 0x65, 0x72, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72,
	0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0x9b, 0x01, 0x0a, 0x13, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x55, 0x73, 0x65,
	0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x39, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x62, 0x79, 0x74,
	0x65, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x70, 0x6c, 0x75, 0x73, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x49, 0x0a, 0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x73,
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x62,
	0x79, 0x74, 0x65, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x70, 0x6c, 0x75,
	0x73, 0x2e, 0x72, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73,
	0x22, 0xbc, 0x0c, 0x0a, 0x07, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x12, 0x1d, 0x0a, 0x0a,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x12, 0x4b, 0x0a, 0x0a, 0x63,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2b, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x62, 0x79, 0x74, 0x65,
	0x70, 0x6c, 0x75, 0x73, 0x2e, 0x72, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x2e, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x2e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x0a, 0x63, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x12, 0x40, 0x0a, 0x06, 0x62, 0x72, 0x61, 0x6e,
	0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x64,
	0x61, 0x6e, 0x63, 0x65, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x70, 0x6c, 0x75, 0x73, 0x2e, 0x72, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x42, 0x72, 0x61,
	0x6e, 0x64, 0x52, 0x06, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x73, 0x12, 0x3e, 0x0a, 0x05, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x62, 0x79, 0x74, 0x65,
	0x64, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x70, 0x6c, 0x75, 0x73, 0x2e, 0x72,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x69, 0x73,
	0x5f, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x69, 0x73, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x64, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x71,
	0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x0c, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x53, 0x63, 0x6f, 0x72, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04,
	0x74, 0x61, 0x67, 0x73, 0x12, 0x44, 0x0a, 0x07, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x64, 0x61, 0x6e, 0x63,
	0x65, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x70, 0x6c, 0x75, 0x73, 0x2e, 0x72, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61,
	0x79, 0x52, 0x07, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x12, 0x51, 0x0a, 0x0c, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2e, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x62, 0x79, 0x74,
	0x65, 0x70, 0x6c, 0x75, 0x73, 0x2e, 0x72, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x2e, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x53, 0x70, 0x65, 0x63,
	0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x53, 0x70, 0x65, 0x63, 0x12, 0x41, 0x0a,
	0x06, 0x73, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e,
	0x62, 0x79, 0x74, 0x65, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x70, 0x6c,
	0x75, 0x73, 0x2e, 0x72, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x2e, 0x53, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x52, 0x06, 0x73, 0x65, 0x6c, 0x6c, 0x65, 0x72,
	0x12, 0x43, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x64, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2d, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x62, 0x79, 0x74, 0x65,
	0x70, 0x6c, 0x75, 0x73, 0x2e, 0x72, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x2e, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05,
	0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0xc0, 0x01, 0x0a, 0x08, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x64,
	0x65, 0x70, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x63, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x44, 0x65, 0x70, 0x74, 0x68, 0x12, 0x5f, 0x0a, 0x0e, 0x63, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x38, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x62, 0x79,
	0x74, 0x65, 0x70, 0x6c, 0x75, 0x73, 0x2e, 0x72, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x2e, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x2e, 0x43,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x0d, 0x63, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x1a, 0x2c, 0x0a, 0x0c, 0x43, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x0a, 0x69, 0x64,
	0x5f, 0x6f, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x69, 0x64, 0x4f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x1a, 0x46, 0x0a, 0x05, 0x42, 0x72, 0x61, 0x6e,
	0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x44, 0x65, 0x70,
	0x74, 0x68, 0x12, 0x1c, 0x0a, 0x0a, 0x69, 0x64, 0x5f, 0x6f, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x64, 0x4f, 0x72, 0x4e, 0x61, 0x6d, 0x65,
	0x1a, 0x4f, 0x0a, 0x05, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x21,
	0x0a, 0x0c, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x1a, 0xea, 0x01, 0x0a, 0x07, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x12, 0x39, 0x0a,
	0x19, 0x6c, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x64, 0x69,
	0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x74, 0x61, 0x67, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x16, 0x6c, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x67, 0x65, 0x44, 0x69, 0x73,
	0x70, 0x6c, 0x61, 0x79, 0x54, 0x61, 0x67, 0x73, 0x12, 0x37, 0x0a, 0x18, 0x64, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f,
	0x74, 0x61, 0x67, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x15, 0x64, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x50, 0x61, 0x67, 0x65, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x54, 0x61, 0x67,
	0x73, 0x12, 0x39, 0x0a, 0x19, 0x6c, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x61, 0x67,
	0x65, 0x5f, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x6c, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x67,
	0x65, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x30, 0x0a, 0x14,
	0x63, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x65, 0x64, 0x69, 0x61,
	0x5f, 0x75, 0x72, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x63, 0x6f, 0x76, 0x65,
	0x72, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x55, 0x72, 0x6c, 0x1a, 0xc2,
	0x01, 0x0a, 0x0b, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x53, 0x70, 0x65, 0x63, 0x12, 0x28,
	0x0a, 0x10, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x75,
	0x73, 0x65, 0x72, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73,
	0x68, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x10, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x1a, 0x60, 0x0a, 0x06, 0x53, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x21, 0x0a,
	0x0c, 0x73, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x12, 0x23, 0x0a, 0x0d, 0x73, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6e,
	0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x73, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x52,
	0x61, 0x74, 0x69, 0x6e, 0x67, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0xe2, 0x01, 0x0a, 0x14, 0x57, 0x72, 0x69, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3e, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x62, 0x79, 0x74,
	0x65, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x70, 0x6c, 0x75, 0x73, 0x2e,
	0x72, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x08,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x12, 0x50, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72,
	0x61, 0x18, 0x64, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x64, 0x61,
	0x6e, 0x63, 0x65, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x70, 0x6c, 0x75, 0x73, 0x2e, 0x72, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x2e, 0x57, 0x72, 0x69, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78,
	0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0x66, 0x0a, 0x0c, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x3c,
	0x0a, 0x07, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x62, 0x79, 0x74, 0x65,
	0x70, 0x6c, 0x75, 0x73, 0x2e, 0x72, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x2e, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x22, 0x93, 0x01, 0x0a,
	0x15, 0x57, 0x72, 0x69, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x39, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x64, 0x61, 0x6e,
	0x63, 0x65, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x70, 0x6c, 0x75, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x3f, 0x0a, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x27, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x62, 0x79,
	0x74, 0x65, 0x70, 0x6c, 0x75, 0x73, 0x2e, 0x72, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x2e, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x06, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x73, 0x22, 0x56, 0x0a, 0x14, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x49, 0x6e,
	0x6c, 0x69, 0x6e, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x3e, 0x0a, 0x08, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x62,
	0x79, 0x74, 0x65, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x70, 0x6c, 0x75,
	0x73, 0x2e, 0x72, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x52, 0x08, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x22, 0x88, 0x01, 0x0a, 0x13, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x67, 0x0a, 0x16, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x5f, 0x69,
	0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x62,
	0x79, 0x74, 0x65, 0x70, 0x6c, 0x75, 0x73, 0x2e, 0x72, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x2e, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x49, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x48, 0x00, 0x52, 0x14, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x49,
	0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x22, 0x93, 0x03, 0x0a, 0x15, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x51, 0x0a, 0x0c, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x64, 0x61, 0x6e, 0x63,
	0x65, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x70, 0x6c, 0x75, 0x73, 0x2e, 0x72, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0b, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x46, 0x0a, 0x0b, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x64, 0x61,
	0x6e, 0x63, 0x65, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x70, 0x6c, 0x75, 0x73, 0x2e, 0x72, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0a,
	0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x52, 0x0a, 0x0d, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2d, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x62, 0x79,
	0x74, 0x65, 0x70, 0x6c, 0x75, 0x73, 0x2e, 0x72, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x2e, 0x49, 0x6d,
	0x70, 0x6f, 0x72, 0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x51,
	0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x64, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3b, 0x2e,
	0x62, 0x79, 0x74, 0x65, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x70, 0x6c,
	0x75, 0x73, 0x2e, 0x72, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x2e, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e,
	0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72,
	0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xa1, 0x01, 0x0a, 0x16,
	0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x39, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x64, 0x61, 0x6e,
	0x63, 0x65, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x70, 0x6c, 0x75, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x4c, 0x0a, 0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c,
	0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x64,
	0x61, 0x6e, 0x63, 0x65, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x70, 0x6c, 0x75, 0x73, 0x2e, 0x72, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x22,
	0xf0, 0x08, 0x0a, 0x09, 0x55, 0x73, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x17, 0x0a,
	0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x40,
	0x0a, 0x05, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e,
	0x62, 0x79, 0x74, 0x65, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x70, 0x6c,
	0x75, 0x73, 0x2e, 0x72, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x2e, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x52, 0x05, 0x73, 0x63, 0x65, 0x6e, 0x65,
	0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x12,
	0x43, 0x0a, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2b, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x62, 0x79, 0x74, 0x65,
	0x70, 0x6c, 0x75, 0x73, 0x2e, 0x72, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x06, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x12, 0x46, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x64, 0x61, 0x6e, 0x63,
	0x65, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x70, 0x6c, 0x75, 0x73, 0x2e, 0x72, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x78, 0x74, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x2b, 0x0a, 0x11,
	0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x65, 0x63,
	0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x65, 0x63,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x5f,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x72,
	0x61, 0x66, 0x66, 0x69, 0x63, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x70,
	0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0d, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x31, 0x0a, 0x15, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x5f, 0x70, 0x61, 0x67,
	0x65, 0x5f, 0x73, 0x74, 0x61, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x12, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x50, 0x61, 0x67, 0x65, 0x53, 0x74, 0x61,
	0x79, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x45, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x64,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x64, 0x61, 0x6e, 0x63, 0x65,
	0x2e, 0x62, 0x79, 0x74, 0x65, 0x70, 0x6c, 0x75, 0x73, 0x2e, 0x72, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0x5f, 0x0a, 0x05,
	0x53, 0x63, 0x65, 0x6e, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x63, 0x65, 0x6e, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x1a, 0x9f, 0x02,
	0x0a, 0x06, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x12, 0x17, 0x0a, 0x07, 0x6f, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a,
	0x0b, 0x61, 0x70, 0x70, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x61, 0x70, 0x70, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x21,
	0x0a, 0x0c, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x6f, 0x64, 0x65,
	0x6c, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x62, 0x72, 0x61, 0x6e,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x42,
	0x72, 0x61, 0x6e, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6f, 0x73, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6f, 0x73, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x72, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x62, 0x72, 0x6f, 0x77, 0x73,
	0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61,
	0x67, 0x65, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72,
	0x41, 0x67, 0x65, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x1a,
	0x47, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x12, 0x26, 0x0a, 0x0f, 0x72, 0x6f, 0x6f, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x72, 0x6f, 0x6f, 0x74, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72,
	0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0xed, 0x01, 0x0a, 0x16, 0x57, 0x72, 0x69, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x45, 0x0a,
	0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x62,
	0x79, 0x74, 0x65, 0x70, 0x6c, 0x75, 0x73, 0x2e, 0x72, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x73, 0x12, 0x52, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x64, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x2e,
	0x62, 0x79, 0x74, 0x65, 0x70, 0x6c, 0x75, 0x73, 0x2e, 0x72, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x2e,
	0x57, 0x72, 0x69, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72,
	0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0x6f, 0x0a, 0x0e, 0x55, 0x73, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x43,
	0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x62,
	0x79, 0x74, 0x65, 0x70, 0x6c, 0x75, 0x73, 0x2e, 0x72, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x22, 0x97, 0x01, 0x0a, 0x17, 0x57, 0x72, 0x69, 0x74, 0x65, 0x55, 0x73, 0x65,
	0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x39, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x62, 0x79, 0x74, 0x65,
	0x70, 0x6c, 0x75, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x41, 0x0a, 0x06, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x62, 0x79, 0x74,
	0x65, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x70, 0x6c, 0x75, 0x73, 0x2e,
	0x72, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x22, 0x5f, 0x0a,
	0x16, 0x55, 0x73, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x49, 0x6e, 0x6c, 0x69, 0x6e,
	0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x45, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x62,
	0x79, 0x74, 0x65, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x70, 0x6c, 0x75,
	0x73, 0x2e, 0x72, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x52, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x91,
	0x01, 0x0a, 0x15, 0x55, 0x73, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x49, 0x6e, 0x70,
	0x75, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x6e, 0x0a, 0x19, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x69, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x62, 0x79,
	0x74, 0x65, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x70, 0x6c, 0x75, 0x73,
	0x2e, 0x72, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x73, 0x49, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x48, 0x00,
	0x52, 0x16, 0x75, 0x73, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x49, 0x6e, 0x6c, 0x69,
	0x6e, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x22, 0x99, 0x03, 0x0a, 0x17, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x55, 0x73, 0x65,
	0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x53,
	0x0a, 0x0c, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x64, 0x61, 0x6e, 0x63, 0x65,
	0x2e, 0x62, 0x79, 0x74, 0x65, 0x70, 0x6c, 0x75, 0x73, 0x2e, 0x72, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x49, 0x6e, 0x70, 0x75, 0x74,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0b, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x46, 0x0a, 0x0b, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x64,
	0x61, 0x6e, 0x63, 0x65, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x70, 0x6c, 0x75, 0x73, 0x2e, 0x72, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x0a, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x52, 0x0a, 0x0d, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x62,
	0x79, 0x74, 0x65, 0x70, 0x6c, 0x75, 0x73, 0x2e, 0x72, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x2e, 0x49,
	0x6d, 0x70, 0x6f, 0x72, 0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x53, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x64, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3d,
	0x2e, 0x62, 0x79, 0x74, 0x65, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x70,
	0x6c, 0x75, 0x73, 0x2e, 0x72, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x2e, 0x49, 0x6d, 0x70, 0x6f, 0x72,
	0x74, 0x55, 0x73, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65,
	0x78, 0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xa5,
	0x01, 0x0a, 0x18, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x55, 0x73, 0x65, 0x72, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x39, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x62, 0x79,
	0x74, 0x65, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x70, 0x6c, 0x75, 0x73,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x4e, 0x0a, 0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f,
	0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e,
	0x62, 0x79, 0x74, 0x65, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x70, 0x6c,
	0x75, 0x73, 0x2e, 0x72, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x53,
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x22, 0x9e, 0x04, 0x0a, 0x0e, 0x50, 0x72, 0x65, 0x64, 0x69,
	0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x40, 0x0a, 0x05, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x64, 0x61, 0x6e, 0x63,
	0x65, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x70, 0x6c, 0x75, 0x73, 0x2e, 0x72, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x53, 0x63, 0x65, 0x6e,
	0x65, 0x52, 0x05, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x12, 0x4b, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x78, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x62, 0x79, 0x74, 0x65,
	0x64, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x70, 0x6c, 0x75, 0x73, 0x2e, 0x72,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x2e, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x07, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x4a, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x64,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x64, 0x61, 0x6e, 0x63, 0x65,
	0x2e, 0x62, 0x79, 0x74, 0x65, 0x70, 0x6c, 0x75, 0x73, 0x2e, 0x72, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x2e, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e,
	0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72,
	0x61, 0x1a, 0xc9, 0x01, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x45, 0x0a,
	0x0c, 0x72, 0x6f, 0x6f, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x2e,
	0x62, 0x79, 0x74, 0x65, 0x70, 0x6c, 0x75, 0x73, 0x2e, 0x72, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x2e,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x0b, 0x72, 0x6f, 0x6f, 0x74, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x12, 0x43, 0x0a, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x64, 0x61, 0x6e, 0x63, 0x65,
	0x2e, 0x62, 0x79, 0x74, 0x65, 0x70, 0x6c, 0x75, 0x73, 0x2e, 0x72, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x52, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x32, 0x0a, 0x15, 0x63, 0x61, 0x6e,
	0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x69,
	0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x13, 0x63, 0x61, 0x6e, 0x64, 0x69, 0x64,
	0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x73, 0x1a, 0x38, 0x0a,
	0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x9a, 0x04, 0x0a, 0x0d, 0x50, 0x72, 0x65, 0x64,
	0x69, 0x63, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x65, 0x0a, 0x11, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x64, 0x61, 0x6e, 0x63, 0x65,
	0x2e, 0x62, 0x79, 0x74, 0x65, 0x70, 0x6c, 0x75, 0x73, 0x2e, 0x72, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x2e, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x10,
	0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73,
	0x12, 0x49, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x64, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x33, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x62, 0x79, 0x74, 0x65,
	0x70, 0x6c, 0x75, 0x73, 0x2e, 0x72, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x2e, 0x50, 0x72, 0x65, 0x64,
	0x69, 0x63, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0x9c, 0x02, 0x0a, 0x0f,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x12,
	0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x72, 0x61,
	0x6e, 0x6b, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x63, 0x74, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x04, 0x70, 0x63, 0x74, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x63, 0x76, 0x72, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x70, 0x63, 0x76, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x65,
	0x63, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x65,
	0x63, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x59, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x64,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x43, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x64, 0x61, 0x6e, 0x63, 0x65,
	0x2e, 0x62, 0x79, 0x74, 0x65, 0x70, 0x6c, 0x75, 0x73, 0x2e, 0x72, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x2e, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x45,
	0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61,
	0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78,
	0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0xab, 0x01, 0x0a, 0x0f, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x39, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x64,
	0x61, 0x6e, 0x63, 0x65, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x70, 0x6c, 0x75, 0x73, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x49, 0x64, 0x12, 0x3e, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x28, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x62, 0x79,
	0x74, 0x65, 0x70, 0x6c, 0x75, 0x73, 0x2e, 0x72, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x2e, 0x50, 0x72,
	0x65, 0x64, 0x69, 0x63, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x22, 0xce, 0x04, 0x0a, 0x1b, 0x41, 0x63, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x49, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x5f, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10,
	0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64,
	0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x72, 0x61,
	0x66, 0x66, 0x69, 0x63, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x12, 0x40, 0x0a, 0x05, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2a, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x62, 0x79, 0x74, 0x65,
	0x70, 0x6c, 0x75, 0x73, 0x2e, 0x72, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x52, 0x05, 0x73, 0x63, 0x65,
	0x6e, 0x65, 0x12, 0x70, 0x0a, 0x10, 0x61, 0x6c, 0x74, 0x65, 0x72, 0x65, 0x64, 0x5f, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x45, 0x2e, 0x62,
	0x79, 0x74, 0x65, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x70, 0x6c, 0x75,
	0x73, 0x2e, 0x72, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x2e, 0x41, 0x63, 0x6b, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x49, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x2e, 0x41, 0x6c, 0x74, 0x65, 0x72, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x52, 0x0f, 0x61, 0x6c, 0x74, 0x65, 0x72, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x73, 0x1a, 0x8c, 0x02, 0x0a, 0x0e, 0x41, 0x6c, 0x74, 0x65, 0x72, 0x65, 0x64,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x6c, 0x74, 0x65, 0x72, 0x65,
	0x64, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x61, 0x6c, 0x74, 0x65, 0x72, 0x65, 0x64, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x12, 0x0a,
	0x04, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x72, 0x61, 0x6e,
	0x6b, 0x12, 0x66, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x65, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x50, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x62, 0x79, 0x74,
	0x65, 0x70, 0x6c, 0x75, 0x73, 0x2e, 0x72, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x2e, 0x41, 0x63, 0x6b,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x41, 0x6c, 0x74, 0x65, 0x72, 0x65, 0x64,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74,
	0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0x59, 0x0a, 0x1c, 0x41, 0x63, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x49, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x39, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x2e,
	0x62, 0x79, 0x74, 0x65, 0x70, 0x6c, 0x75, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x32, 0xb0,
	0x07, 0x0a, 0x15, 0x42, 0x79, 0x74, 0x65, 0x70, 0x6c, 0x75, 0x73, 0x52, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x69, 0x0a, 0x0a, 0x57, 0x72, 0x69, 0x74,
	0x65, 0x55, 0x73, 0x65, 0x72, 0x73, 0x12, 0x2c, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x64, 0x61, 0x6e,
	0x63, 0x65, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x70, 0x6c, 0x75, 0x73, 0x2e, 0x72, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x2e, 0x57, 0x72, 0x69, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x64, 0x61, 0x6e, 0x63, 0x65,
	0x2e, 0x62, 0x79, 0x74, 0x65, 0x70, 0x6c, 0x75, 0x73, 0x2e, 0x72, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x2e, 0x57, 0x72, 0x69, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x6a, 0x0a, 0x0b, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x55, 0x73, 0x65,
	0x72, 0x73, 0x12, 0x2d, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x62,
	0x79, 0x74, 0x65, 0x70, 0x6c, 0x75, 0x73, 0x2e, 0x72, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x2e, 0x49,
	0x6d, 0x70, 0x6f, 0x72, 0x74, 0x55, 0x73, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x2c, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x62, 0x79,
	0x74, 0x65, 0x70, 0x6c, 0x75, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x72, 0x0a, 0x0d, 0x57, 0x72, 0x69, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73,
	0x12, 0x2f, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x62, 0x79, 0x74,
	0x65, 0x70, 0x6c, 0x75, 0x73, 0x2e, 0x72, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x2e, 0x57, 0x72, 0x69,
	0x74, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x30, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x62, 0x79,
	0x74, 0x65, 0x70, 0x6c, 0x75, 0x73, 0x2e, 0x72, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x2e, 0x57, 0x72,
	0x69, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x70, 0x0a, 0x0e, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x73, 0x12, 0x30, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x64, 0x61, 0x6e, 0x63,
	0x65, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x70, 0x6c, 0x75, 0x73, 0x2e, 0x72, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x2e, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x64, 0x61,
	0x6e, 0x63, 0x65, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x70, 0x6c, 0x75, 0x73, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x78, 0x0a, 0x0f, 0x57, 0x72, 0x69, 0x74, 0x65, 0x55, 0x73,
	0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x31, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x64,
	0x61, 0x6e, 0x63, 0x65, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x70, 0x6c, 0x75, 0x73, 0x2e, 0x72, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x2e, 0x57, 0x72, 0x69, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x62, 0x79,
	0x74, 0x65, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x70, 0x6c, 0x75, 0x73,
	0x2e, 0x72, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x2e, 0x57, 0x72, 0x69, 0x74, 0x65, 0x55, 0x73, 0x65,
	0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x74, 0x0a, 0x10, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x55, 0x73, 0x65, 0x72, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x73, 0x12, 0x32, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x2e,
	0x62, 0x79, 0x74, 0x65, 0x70, 0x6c, 0x75, 0x73, 0x2e, 0x72, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x2e,
	0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x55, 0x73, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x64, 0x61,
	0x6e, 0x63, 0x65, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x70, 0x6c, 0x75, 0x73, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x60, 0x0a, 0x07, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74,
	0x12, 0x29, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x62, 0x79, 0x74,
	0x65, 0x70, 0x6c, 0x75, 0x73, 0x2e, 0x72, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x2e, 0x50, 0x72, 0x65,
	0x64, 0x69, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x62, 0x79,
	0x74, 0x65, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x70, 0x6c, 0x75, 0x73,
	0x2e, 0x72, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x2e, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x87, 0x01, 0x0a, 0x14, 0x41, 0x63, 0x6b, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x36, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x62, 0x79, 0x74,
	0x65, 0x70, 0x6c, 0x75, 0x73, 0x2e, 0x72, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x2e, 0x41, 0x63, 0x6b,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x37, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x64,
	0x61, 0x6e, 0x63, 0x65, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x70, 0x6c, 0x75, 0x73, 0x2e, 0x72, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x2e, 0x41, 0x63, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x6d,
	0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x42, 0x4e, 0x0a, 0x1c, 0x62, 0x79, 0x74, 0x65, 0x70, 0x6c, 0x75, 0x73, 0x2e, 0x73, 0x64,
	0x6b, 0x2e, 0x72, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x5a, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x62, 0x79,
	0x74, 0x65, 0x70, 0x6c, 0x75, 0x73, 0x2d, 0x73, 0x64, 0x6b, 0x2f, 0x73, 0x64, 0x6b, 0x2d, 0x67,
	0x6f, 0x2f, 0x72, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_byteplus_retail_proto_rawDescOnce sync.Once
	file_byteplus_retail_proto_rawDescData = file_byteplus_retail_proto_rawDesc
)

func file_byteplus_retail_proto_rawDescGZIP() []byte {
	file_byteplus_retail_proto_rawDescOnce.Do(func() {
		file_byteplus_retail_proto_rawDescData = protoimpl.X.CompressGZIP(file_byteplus_retail_proto_rawDescData)
	})
	return file_byteplus_retail_proto_rawDescData
}

var file_byteplus_retail_proto_msgTypes = make([]protoimpl.MessageInfo, 58)
var file_byteplus_retail_proto_goTypes = []interface{}{
	(*User)(nil),                          // 0: bytedance.byteplus.retail.User
	(*WriteUsersRequest)(nil),             // 1: bytedance.byteplus.retail.WriteUsersRequest
	(*UserError)(nil),                     // 2: bytedance.byteplus.retail.UserError
	(*WriteUsersResponse)(nil),            // 3: bytedance.byteplus.retail.WriteUsersResponse
	(*UsersInlineSource)(nil),             // 4: bytedance.byteplus.retail.UsersInlineSource
	(*UsersInputConfig)(nil),              // 5: bytedance.byteplus.retail.UsersInputConfig
	(*DateConfig)(nil),                    // 6: bytedance.byteplus.retail.DateConfig
	(*ImportErrorsConfig)(nil),            // 7: bytedance.byteplus.retail.ImportErrorsConfig
	(*ImportUsersRequest)(nil),            // 8: bytedance.byteplus.retail.ImportUsersRequest
	(*ImportUsersResponse)(nil),           // 9: bytedance.byteplus.retail.ImportUsersResponse
	(*Product)(nil),                       // 10: bytedance.byteplus.retail.Product
	(*WriteProductsRequest)(nil),          // 11: bytedance.byteplus.retail.WriteProductsRequest
	(*ProductError)(nil),                  // 12: bytedance.byteplus.retail.ProductError
	(*WriteProductsResponse)(nil),         // 13: bytedance.byteplus.retail.WriteProductsResponse
	(*ProductsInlineSource)(nil),          // 14: bytedance.byteplus.retail.ProductsInlineSource
	(*ProductsInputConfig)(nil),           // 15: bytedance.byteplus.retail.ProductsInputConfig
	(*ImportProductsRequest)(nil),         // 16: bytedance.byteplus.retail.ImportProductsRequest
	(*ImportProductsResponse)(nil),        // 17: bytedance.byteplus.retail.ImportProductsResponse
	(*UserEvent)(nil),                     // 18: bytedance.byteplus.retail.UserEvent
	(*WriteUserEventsRequest)(nil),        // 19: bytedance.byteplus.retail.WriteUserEventsRequest
	(*UserEventError)(nil),                // 20: bytedance.byteplus.retail.UserEventError
	(*WriteUserEventsResponse)(nil),       // 21: bytedance.byteplus.retail.WriteUserEventsResponse
	(*UserEventsInlineSource)(nil),        // 22: bytedance.byteplus.retail.UserEventsInlineSource
	(*UserEventsInputConfig)(nil),         // 23: bytedance.byteplus.retail.UserEventsInputConfig
	(*ImportUserEventsRequest)(nil),       // 24: bytedance.byteplus.retail.ImportUserEventsRequest
	(*ImportUserEventsResponse)(nil),      // 25: bytedance.byteplus.retail.ImportUserEventsResponse
	(*PredictRequest)(nil),                // 26: bytedance.byteplus.retail.PredictRequest
	(*PredictResult)(nil),                 // 27: bytedance.byteplus.retail.PredictResult
	(*PredictResponse)(nil),               // 28: bytedance.byteplus.retail.PredictResponse
	(*AckServerImpressionsRequest)(nil),   // 29: bytedance.byteplus.retail.AckServerImpressionsRequest
	(*AckServerImpressionsResponse)(nil),  // 30: bytedance.byteplus.retail.AckServerImpressionsResponse
	(*User_Location)(nil),                 // 31: bytedance.byteplus.retail.User.Location
	nil,                                   // 32: bytedance.byteplus.retail.User.ExtraEntry
	nil,                                   // 33: bytedance.byteplus.retail.WriteUsersRequest.ExtraEntry
	nil,                                   // 34: bytedance.byteplus.retail.ImportUsersRequest.ExtraEntry
	(*Product_Category)(nil),              // 35: bytedance.byteplus.retail.Product.Category
	(*Product_Brand)(nil),                 // 36: bytedance.byteplus.retail.Product.Brand
	(*Product_Price)(nil),                 // 37: bytedance.byteplus.retail.Product.Price
	(*Product_Display)(nil),               // 38: bytedance.byteplus.retail.Product.Display
	(*Product_ProductSpec)(nil),           // 39: bytedance.byteplus.retail.Product.ProductSpec
	(*Product_Seller)(nil),                // 40: bytedance.byteplus.retail.Product.Seller
	nil,                                   // 41: bytedance.byteplus.retail.Product.ExtraEntry
	(*Product_Category_CategoryNode)(nil), // 42: bytedance.byteplus.retail.Product.Category.CategoryNode
	nil,                                   // 43: bytedance.byteplus.retail.WriteProductsRequest.ExtraEntry
	nil,                                   // 44: bytedance.byteplus.retail.ImportProductsRequest.ExtraEntry
	(*UserEvent_Scene)(nil),               // 45: bytedance.byteplus.retail.UserEvent.Scene
	(*UserEvent_Device)(nil),              // 46: bytedance.byteplus.retail.UserEvent.Device
	(*UserEvent_Context)(nil),             // 47: bytedance.byteplus.retail.UserEvent.Context
	nil,                                   // 48: bytedance.byteplus.retail.UserEvent.ExtraEntry
	nil,                                   // 49: bytedance.byteplus.retail.WriteUserEventsRequest.ExtraEntry
	nil,                                   // 50: bytedance.byteplus.retail.ImportUserEventsRequest.ExtraEntry
	(*PredictRequest_Context)(nil),        // 51: bytedance.byteplus.retail.PredictRequest.Context
	nil,                                   // 52: bytedance.byteplus.retail.PredictRequest.ExtraEntry
	(*PredictResult_ResponseProduct)(nil), // 53: bytedance.byteplus.retail.PredictResult.ResponseProduct
	nil,                                   // 54: bytedance.byteplus.retail.PredictResult.ExtraEntry
	nil,                                   // 55: bytedance.byteplus.retail.PredictResult.ResponseProduct.ExtraEntry
	(*AckServerImpressionsRequest_AlteredProduct)(nil), // 56: bytedance.byteplus.retail.AckServerImpressionsRequest.AlteredProduct
	nil,                                // 57: bytedance.byteplus.retail.AckServerImpressionsRequest.AlteredProduct.ExtraEntry
	(*protocol.Status)(nil),            // 58: bytedance.byteplus.common.Status
	(*protocol.OperationResponse)(nil), // 59: bytedance.byteplus.common.OperationResponse
}
var file_byteplus_retail_proto_depIdxs = []int32{
	31, // 0: bytedance.byteplus.retail.User.location:type_name -> bytedance.byteplus.retail.User.Location
	32, // 1: bytedance.byteplus.retail.User.extra:type_name -> bytedance.byteplus.retail.User.ExtraEntry
	0,  // 2: bytedance.byteplus.retail.WriteUsersRequest.users:type_name -> bytedance.byteplus.retail.User
	33, // 3: bytedance.byteplus.retail.WriteUsersRequest.extra:type_name -> bytedance.byteplus.retail.WriteUsersRequest.ExtraEntry
	0,  // 4: bytedance.byteplus.retail.UserError.user:type_name -> bytedance.byteplus.retail.User
	58, // 5: bytedance.byteplus.retail.WriteUsersResponse.status:type_name -> bytedance.byteplus.common.Status
	2,  // 6: bytedance.byteplus.retail.WriteUsersResponse.errors:type_name -> bytedance.byteplus.retail.UserError
	0,  // 7: bytedance.byteplus.retail.UsersInlineSource.users:type_name -> bytedance.byteplus.retail.User
	4,  // 8: bytedance.byteplus.retail.UsersInputConfig.users_inline_source:type_name -> bytedance.byteplus.retail.UsersInlineSource
	5,  // 9: bytedance.byteplus.retail.ImportUsersRequest.input_config:type_name -> bytedance.byteplus.retail.UsersInputConfig
	6,  // 10: bytedance.byteplus.retail.ImportUsersRequest.date_config:type_name -> bytedance.byteplus.retail.DateConfig
	7,  // 11: bytedance.byteplus.retail.ImportUsersRequest.errors_config:type_name -> bytedance.byteplus.retail.ImportErrorsConfig
	34, // 12: bytedance.byteplus.retail.ImportUsersRequest.extra:type_name -> bytedance.byteplus.retail.ImportUsersRequest.ExtraEntry
	58, // 13: bytedance.byteplus.retail.ImportUsersResponse.status:type_name -> bytedance.byteplus.common.Status
	2,  // 14: bytedance.byteplus.retail.ImportUsersResponse.error_samples:type_name -> bytedance.byteplus.retail.UserError
	35, // 15: bytedance.byteplus.retail.Product.categories:type_name -> bytedance.byteplus.retail.Product.Category
	36, // 16: bytedance.byteplus.retail.Product.brands:type_name -> bytedance.byteplus.retail.Product.Brand
	37, // 17: bytedance.byteplus.retail.Product.price:type_name -> bytedance.byteplus.retail.Product.Price
	38, // 18: bytedance.byteplus.retail.Product.display:type_name -> bytedance.byteplus.retail.Product.Display
	39, // 19: bytedance.byteplus.retail.Product.product_spec:type_name -> bytedance.byteplus.retail.Product.ProductSpec
	40, // 20: bytedance.byteplus.retail.Product.seller:type_name -> bytedance.byteplus.retail.Product.Seller
	41, // 21: bytedance.byteplus.retail.Product.extra:type_name -> bytedance.byteplus.retail.Product.ExtraEntry
	10, // 22: bytedance.byteplus.retail.WriteProductsRequest.products:type_name -> bytedance.byteplus.retail.Product
	43, // 23: bytedance.byteplus.retail.WriteProductsRequest.extra:type_name -> bytedance.byteplus.retail.WriteProductsRequest.ExtraEntry
	10, // 24: bytedance.byteplus.retail.ProductError.product:type_name -> bytedance.byteplus.retail.Product
	58, // 25: bytedance.byteplus.retail.WriteProductsResponse.status:type_name -> bytedance.byteplus.common.Status
	12, // 26: bytedance.byteplus.retail.WriteProductsResponse.errors:type_name -> bytedance.byteplus.retail.ProductError
	10, // 27: bytedance.byteplus.retail.ProductsInlineSource.products:type_name -> bytedance.byteplus.retail.Product
	14, // 28: bytedance.byteplus.retail.ProductsInputConfig.products_inline_source:type_name -> bytedance.byteplus.retail.ProductsInlineSource
	15, // 29: bytedance.byteplus.retail.ImportProductsRequest.input_config:type_name -> bytedance.byteplus.retail.ProductsInputConfig
	6,  // 30: bytedance.byteplus.retail.ImportProductsRequest.date_config:type_name -> bytedance.byteplus.retail.DateConfig
	7,  // 31: bytedance.byteplus.retail.ImportProductsRequest.errors_config:type_name -> bytedance.byteplus.retail.ImportErrorsConfig
	44, // 32: bytedance.byteplus.retail.ImportProductsRequest.extra:type_name -> bytedance.byteplus.retail.ImportProductsRequest.ExtraEntry
	58, // 33: bytedance.byteplus.retail.ImportProductsResponse.status:type_name -> bytedance.byteplus.common.Status
	12, // 34: bytedance.byteplus.retail.ImportProductsResponse.error_samples:type_name -> bytedance.byteplus.retail.ProductError
	45, // 35: bytedance.byteplus.retail.UserEvent.scene:type_name -> bytedance.byteplus.retail.UserEvent.Scene
	46, // 36: bytedance.byteplus.retail.UserEvent.device:type_name -> bytedance.byteplus.retail.UserEvent.Device
	47, // 37: bytedance.byteplus.retail.UserEvent.context:type_name -> bytedance.byteplus.retail.UserEvent.Context
	48, // 38: bytedance.byteplus.retail.UserEvent.extra:type_name -> bytedance.byteplus.retail.UserEvent.ExtraEntry
	18, // 39: bytedance.byteplus.retail.WriteUserEventsRequest.user_events:type_name -> bytedance.byteplus.retail.UserEvent
	49, // 40: bytedance.byteplus.retail.WriteUserEventsRequest.extra:type_name -> bytedance.byteplus.retail.WriteUserEventsRequest.ExtraEntry
	18, // 41: bytedance.byteplus.retail.UserEventError.user_event:type_name -> bytedance.byteplus.retail.UserEvent
	58, // 42: bytedance.byteplus.retail.WriteUserEventsResponse.status:type_name -> bytedance.byteplus.common.Status
	20, // 43: bytedance.byteplus.retail.WriteUserEventsResponse.errors:type_name -> bytedance.byteplus.retail.UserEventError
	18, // 44: bytedance.byteplus.retail.UserEventsInlineSource.user_events:type_name -> bytedance.byteplus.retail.UserEvent
	22, // 45: bytedance.byteplus.retail.UserEventsInputConfig.user_events_inline_source:type_name -> bytedance.byteplus.retail.UserEventsInlineSource
	23, // 46: bytedance.byteplus.retail.ImportUserEventsRequest.input_config:type_name -> bytedance.byteplus.retail.UserEventsInputConfig
	6,  // 47: bytedance.byteplus.retail.ImportUserEventsRequest.date_config:type_name -> bytedance.byteplus.retail.DateConfig
	7,  // 48: bytedance.byteplus.retail.ImportUserEventsRequest.errors_config:type_name -> bytedance.byteplus.retail.ImportErrorsConfig
	50, // 49: bytedance.byteplus.retail.ImportUserEventsRequest.extra:type_name -> bytedance.byteplus.retail.ImportUserEventsRequest.ExtraEntry
	58, // 50: bytedance.byteplus.retail.ImportUserEventsResponse.status:type_name -> bytedance.byteplus.common.Status
	20, // 51: bytedance.byteplus.retail.ImportUserEventsResponse.error_samples:type_name -> bytedance.byteplus.retail.UserEventError
	45, // 52: bytedance.byteplus.retail.PredictRequest.scene:type_name -> bytedance.byteplus.retail.UserEvent.Scene
	51, // 53: bytedance.byteplus.retail.PredictRequest.context:type_name -> bytedance.byteplus.retail.PredictRequest.Context
	52, // 54: bytedance.byteplus.retail.PredictRequest.extra:type_name -> bytedance.byteplus.retail.PredictRequest.ExtraEntry
	53, // 55: bytedance.byteplus.retail.PredictResult.response_products:type_name -> bytedance.byteplus.retail.PredictResult.ResponseProduct
	54, // 56: bytedance.byteplus.retail.PredictResult.extra:type_name -> bytedance.byteplus.retail.PredictResult.ExtraEntry
	58, // 57: bytedance.byteplus.retail.PredictResponse.status:type_name -> bytedance.byteplus.common.Status
	27, // 58: bytedance.byteplus.retail.PredictResponse.value:type_name -> bytedance.byteplus.retail.PredictResult
	45, // 59: bytedance.byteplus.retail.AckServerImpressionsRequest.scene:type_name -> bytedance.byteplus.retail.UserEvent.Scene
	56, // 60: bytedance.byteplus.retail.AckServerImpressionsRequest.altered_products:type_name -> bytedance.byteplus.retail.AckServerImpressionsRequest.AlteredProduct
	58, // 61: bytedance.byteplus.retail.AckServerImpressionsResponse.status:type_name -> bytedance.byteplus.common.Status
	42, // 62: bytedance.byteplus.retail.Product.Category.category_nodes:type_name -> bytedance.byteplus.retail.Product.Category.CategoryNode
	10, // 63: bytedance.byteplus.retail.PredictRequest.Context.root_product:type_name -> bytedance.byteplus.retail.Product
	46, // 64: bytedance.byteplus.retail.PredictRequest.Context.device:type_name -> bytedance.byteplus.retail.UserEvent.Device
	55, // 65: bytedance.byteplus.retail.PredictResult.ResponseProduct.extra:type_name -> bytedance.byteplus.retail.PredictResult.ResponseProduct.ExtraEntry
	57, // 66: bytedance.byteplus.retail.AckServerImpressionsRequest.AlteredProduct.extra:type_name -> bytedance.byteplus.retail.AckServerImpressionsRequest.AlteredProduct.ExtraEntry
	1,  // 67: bytedance.byteplus.retail.ByteplusRetailService.WriteUsers:input_type -> bytedance.byteplus.retail.WriteUsersRequest
	8,  // 68: bytedance.byteplus.retail.ByteplusRetailService.ImportUsers:input_type -> bytedance.byteplus.retail.ImportUsersRequest
	11, // 69: bytedance.byteplus.retail.ByteplusRetailService.WriteProducts:input_type -> bytedance.byteplus.retail.WriteProductsRequest
	16, // 70: bytedance.byteplus.retail.ByteplusRetailService.ImportProducts:input_type -> bytedance.byteplus.retail.ImportProductsRequest
	19, // 71: bytedance.byteplus.retail.ByteplusRetailService.WriteUserEvents:input_type -> bytedance.byteplus.retail.WriteUserEventsRequest
	24, // 72: bytedance.byteplus.retail.ByteplusRetailService.ImportUserEvents:input_type -> bytedance.byteplus.retail.ImportUserEventsRequest
	26, // 73: bytedance.byteplus.retail.ByteplusRetailService.Predict:input_type -> bytedance.byteplus.retail.PredictRequest
	29, // 74: bytedance.byteplus.retail.ByteplusRetailService.AckServerImpressions:input_type -> bytedance.byteplus.retail.AckServerImpressionsRequest
	3,  // 75: bytedance.byteplus.retail.ByteplusRetailService.WriteUsers:output_type -> bytedance.byteplus.retail.WriteUsersResponse
	59, // 76: bytedance.byteplus.retail.ByteplusRetailService.ImportUsers:output_type -> bytedance.byteplus.common.OperationResponse
	13, // 77: bytedance.byteplus.retail.ByteplusRetailService.WriteProducts:output_type -> bytedance.byteplus.retail.WriteProductsResponse
	59, // 78: bytedance.byteplus.retail.ByteplusRetailService.ImportProducts:output_type -> bytedance.byteplus.common.OperationResponse
	21, // 79: bytedance.byteplus.retail.ByteplusRetailService.WriteUserEvents:output_type -> bytedance.byteplus.retail.WriteUserEventsResponse
	59, // 80: bytedance.byteplus.retail.ByteplusRetailService.ImportUserEvents:output_type -> bytedance.byteplus.common.OperationResponse
	28, // 81: bytedance.byteplus.retail.ByteplusRetailService.Predict:output_type -> bytedance.byteplus.retail.PredictResponse
	30, // 82: bytedance.byteplus.retail.ByteplusRetailService.AckServerImpressions:output_type -> bytedance.byteplus.retail.AckServerImpressionsResponse
	75, // [75:83] is the sub-list for method output_type
	67, // [67:75] is the sub-list for method input_type
	67, // [67:67] is the sub-list for extension type_name
	67, // [67:67] is the sub-list for extension extendee
	0,  // [0:67] is the sub-list for field type_name
}

func init() { file_byteplus_retail_proto_init() }
func file_byteplus_retail_proto_init() {
	if File_byteplus_retail_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_byteplus_retail_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*User); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_byteplus_retail_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WriteUsersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_byteplus_retail_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserError); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_byteplus_retail_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WriteUsersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_byteplus_retail_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UsersInlineSource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_byteplus_retail_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UsersInputConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_byteplus_retail_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DateConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_byteplus_retail_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImportErrorsConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_byteplus_retail_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImportUsersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_byteplus_retail_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImportUsersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_byteplus_retail_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Product); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_byteplus_retail_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WriteProductsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_byteplus_retail_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProductError); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_byteplus_retail_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WriteProductsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_byteplus_retail_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProductsInlineSource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_byteplus_retail_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProductsInputConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_byteplus_retail_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImportProductsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_byteplus_retail_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImportProductsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_byteplus_retail_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_byteplus_retail_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WriteUserEventsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_byteplus_retail_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserEventError); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_byteplus_retail_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WriteUserEventsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_byteplus_retail_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserEventsInlineSource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_byteplus_retail_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserEventsInputConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_byteplus_retail_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImportUserEventsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_byteplus_retail_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImportUserEventsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_byteplus_retail_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PredictRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_byteplus_retail_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PredictResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_byteplus_retail_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PredictResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_byteplus_retail_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AckServerImpressionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_byteplus_retail_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AckServerImpressionsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_byteplus_retail_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*User_Location); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_byteplus_retail_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Product_Category); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_byteplus_retail_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Product_Brand); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_byteplus_retail_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Product_Price); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_byteplus_retail_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Product_Display); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_byteplus_retail_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Product_ProductSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_byteplus_retail_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Product_Seller); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_byteplus_retail_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Product_Category_CategoryNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_byteplus_retail_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserEvent_Scene); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_byteplus_retail_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserEvent_Device); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_byteplus_retail_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserEvent_Context); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_byteplus_retail_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PredictRequest_Context); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_byteplus_retail_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PredictResult_ResponseProduct); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_byteplus_retail_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AckServerImpressionsRequest_AlteredProduct); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_byteplus_retail_proto_msgTypes[5].OneofWrappers = []interface{}{
		(*UsersInputConfig_UsersInlineSource)(nil),
	}
	file_byteplus_retail_proto_msgTypes[7].OneofWrappers = []interface{}{
		(*ImportErrorsConfig_EmptyDestination)(nil),
	}
	file_byteplus_retail_proto_msgTypes[15].OneofWrappers = []interface{}{
		(*ProductsInputConfig_ProductsInlineSource)(nil),
	}
	file_byteplus_retail_proto_msgTypes[23].OneofWrappers = []interface{}{
		(*UserEventsInputConfig_UserEventsInlineSource)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_byteplus_retail_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   58,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_byteplus_retail_proto_goTypes,
		DependencyIndexes: file_byteplus_retail_proto_depIdxs,
		MessageInfos:      file_byteplus_retail_proto_msgTypes,
	}.Build()
	File_byteplus_retail_proto = out.File
	file_byteplus_retail_proto_rawDesc = nil
	file_byteplus_retail_proto_goTypes = nil
	file_byteplus_retail_proto_depIdxs = nil
}
