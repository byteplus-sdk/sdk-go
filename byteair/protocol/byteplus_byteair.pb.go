// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.17.3
// source: byteplus_byteair.proto

package protocol

import (
	protocol "github.com/byteplus-sdk/sdk-go/common/protocol"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	anypb "google.golang.org/protobuf/types/known/anypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CallbackReqType int32

const (
	CallbackReqType_byte_scene     CallbackReqType = 0
	CallbackReqType_not_byte_scene CallbackReqType = 1
	CallbackReqType_behavior       CallbackReqType = 2
)

// Enum value maps for CallbackReqType.
var (
	CallbackReqType_name = map[int32]string{
		0: "byte_scene",
		1: "not_byte_scene",
		2: "behavior",
	}
	CallbackReqType_value = map[string]int32{
		"byte_scene":     0,
		"not_byte_scene": 1,
		"behavior":       2,
	}
)

func (x CallbackReqType) Enum() *CallbackReqType {
	p := new(CallbackReqType)
	*p = x
	return p
}

func (x CallbackReqType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CallbackReqType) Descriptor() protoreflect.EnumDescriptor {
	return file_byteplus_byteair_proto_enumTypes[0].Descriptor()
}

func (CallbackReqType) Type() protoreflect.EnumType {
	return &file_byteplus_byteair_proto_enumTypes[0]
}

func (x CallbackReqType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CallbackReqType.Descriptor instead.
func (CallbackReqType) EnumDescriptor() ([]byte, []int) {
	return file_byteplus_byteair_proto_rawDescGZIP(), []int{0}
}

type DataError struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Output only.
	// The detailed error message.
	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	// Output only.
	// The failed data,that is serialized by json.
	Data string `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *DataError) Reset() {
	*x = DataError{}
	if protoimpl.UnsafeEnabled {
		mi := &file_byteplus_byteair_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataError) ProtoMessage() {}

func (x *DataError) ProtoReflect() protoreflect.Message {
	mi := &file_byteplus_byteair_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataError.ProtoReflect.Descriptor instead.
func (*DataError) Descriptor() ([]byte, []int) {
	return file_byteplus_byteair_proto_rawDescGZIP(), []int{0}
}

func (x *DataError) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *DataError) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

type WriteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Output only.
	// When `status.code` is 0, all payload are successfully written.
	// If `status.code` is 1001, `errors` is populated.
	// Other non-zero values indicate all payload failed.
	Status *protocol.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	// Output only.
	// This field is populated when `status.code` is 1001.
	// When populated, this field contains the errors.
	Errors []*DataError `protobuf:"bytes,2,rep,name=errors,proto3" json:"errors,omitempty"`
}

func (x *WriteResponse) Reset() {
	*x = WriteResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_byteplus_byteair_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WriteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WriteResponse) ProtoMessage() {}

func (x *WriteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_byteplus_byteair_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WriteResponse.ProtoReflect.Descriptor instead.
func (*WriteResponse) Descriptor() ([]byte, []int) {
	return file_byteplus_byteair_proto_rawDescGZIP(), []int{1}
}

func (x *WriteResponse) GetStatus() *protocol.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *WriteResponse) GetErrors() []*DataError {
	if x != nil {
		return x.Errors
	}
	return nil
}

type ImportResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Output only.
	// The status of the import call.
	// When `status.code` is 0, all payload are successfully imported.
	// If `status.code` is 1001, `error_samples` is populated.
	// Other non-zero values indicate all payload failed.
	Status *protocol.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	// Output only.
	// This field is populated when `status.code` is 1001.
	// When populated, this field contains the error samples.
	ErrorSamples []*DataError `protobuf:"bytes,2,rep,name=error_samples,json=errorSamples,proto3" json:"error_samples,omitempty"`
}

func (x *ImportResponse) Reset() {
	*x = ImportResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_byteplus_byteair_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImportResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImportResponse) ProtoMessage() {}

func (x *ImportResponse) ProtoReflect() protoreflect.Message {
	mi := &file_byteplus_byteair_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImportResponse.ProtoReflect.Descriptor instead.
func (*ImportResponse) Descriptor() ([]byte, []int) {
	return file_byteplus_byteair_proto_rawDescGZIP(), []int{2}
}

func (x *ImportResponse) GetStatus() *protocol.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *ImportResponse) GetErrorSamples() []*DataError {
	if x != nil {
		return x.ErrorSamples
	}
	return nil
}

type PredictRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required
	// The user's info
	User *PredictUser `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
	// Required
	// The context info
	Context *PredictContext `protobuf:"bytes,2,opt,name=context,proto3" json:"context,omitempty"`
	// Required
	// The max size of results
	Size int32 `protobuf:"varint,3,opt,name=size,proto3" json:"size,omitempty"`
	// Optional
	// If you want predict in specified items,
	// you can provide them in this field
	CandidateItems []*PredictCandidateItem `protobuf:"bytes,4,rep,name=candidateItems,proto3" json:"candidateItems,omitempty"`
	// Optional
	// Extra info, which can't be provided by other field
	Extra *PredictExtra `protobuf:"bytes,5,opt,name=extra,proto3" json:"extra,omitempty"`
	// If you want recommend results related specified item,
	// you need provide it in this field.
	RelatedItem *PredictRelatedItem `protobuf:"bytes,6,opt,name=relatedItem,proto3" json:"relatedItem,omitempty"`
	// Optional
	// If this is a search request,
	// you can provide search info in this field.
	// Search request is considered as a special predict request.
	SearchInfo *SearchInfo `protobuf:"bytes,7,opt,name=searchInfo,proto3" json:"searchInfo,omitempty"`
	// parent item for related scene
	ParentItem *PredictParentItem `protobuf:"bytes,8,opt,name=parentItem,proto3" json:"parentItem,omitempty"`
	// Optional
	// filter items
	FilterItems []*PredictFilterItem `protobuf:"bytes,9,rep,name=filterItems,proto3" json:"filterItems,omitempty"`
}

func (x *PredictRequest) Reset() {
	*x = PredictRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_byteplus_byteair_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PredictRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PredictRequest) ProtoMessage() {}

func (x *PredictRequest) ProtoReflect() protoreflect.Message {
	mi := &file_byteplus_byteair_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PredictRequest.ProtoReflect.Descriptor instead.
func (*PredictRequest) Descriptor() ([]byte, []int) {
	return file_byteplus_byteair_proto_rawDescGZIP(), []int{3}
}

func (x *PredictRequest) GetUser() *PredictUser {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *PredictRequest) GetContext() *PredictContext {
	if x != nil {
		return x.Context
	}
	return nil
}

func (x *PredictRequest) GetSize() int32 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *PredictRequest) GetCandidateItems() []*PredictCandidateItem {
	if x != nil {
		return x.CandidateItems
	}
	return nil
}

func (x *PredictRequest) GetExtra() *PredictExtra {
	if x != nil {
		return x.Extra
	}
	return nil
}

func (x *PredictRequest) GetRelatedItem() *PredictRelatedItem {
	if x != nil {
		return x.RelatedItem
	}
	return nil
}

func (x *PredictRequest) GetSearchInfo() *SearchInfo {
	if x != nil {
		return x.SearchInfo
	}
	return nil
}

func (x *PredictRequest) GetParentItem() *PredictParentItem {
	if x != nil {
		return x.ParentItem
	}
	return nil
}

func (x *PredictRequest) GetFilterItems() []*PredictFilterItem {
	if x != nil {
		return x.FilterItems
	}
	return nil
}

type PredictUser struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required
	// The user id
	Uid string `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`
	// Optional
	// The device used by user
	Device *PredictDevice `protobuf:"bytes,2,opt,name=device,proto3" json:"device,omitempty"`
	// Optional
	// The user's age
	// It can be the an (estimate) single value, or a range.
	// e.g. "23", "18-25", "0-15", "50-100", etc
	Age string `protobuf:"bytes,3,opt,name=age,proto3" json:"age,omitempty"`
	// Optional.
	// The gender of the given user.
	// e.g. "male", "female", and "other".
	Gender string `protobuf:"bytes,4,opt,name=gender,proto3" json:"gender,omitempty"`
	// Optional
	// Province name
	Province string `protobuf:"bytes,5,opt,name=province,proto3" json:"province,omitempty"`
	// Optional.
	// City name.
	City string `protobuf:"bytes,6,opt,name=city,proto3" json:"city,omitempty"`
	// Optional.
	// The more fine grained district or area.
	District string `protobuf:"bytes,7,opt,name=district,proto3" json:"district,omitempty"`
	// Optional
	// The app market that user download app from
	AppMarket string `protobuf:"bytes,8,opt,name=appMarket,proto3" json:"appMarket,omitempty"`
	// Optional
	// The login mode
	// e.g. "wechat", "google", "self"
	LoginMode string `protobuf:"bytes,9,opt,name=loginMode,proto3" json:"loginMode,omitempty"`
	// Optional.
	// Country name.
	// Some sample values are "USA", "UK", etc.
	Country string `protobuf:"bytes,10,opt,name=country,proto3" json:"country,omitempty"`
	// Optional.
	// This is a catch-all field to pass all the additional information.
	// Please provide as much information as possible.
	Extra map[string]string `protobuf:"bytes,100,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *PredictUser) Reset() {
	*x = PredictUser{}
	if protoimpl.UnsafeEnabled {
		mi := &file_byteplus_byteair_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PredictUser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PredictUser) ProtoMessage() {}

func (x *PredictUser) ProtoReflect() protoreflect.Message {
	mi := &file_byteplus_byteair_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PredictUser.ProtoReflect.Descriptor instead.
func (*PredictUser) Descriptor() ([]byte, []int) {
	return file_byteplus_byteair_proto_rawDescGZIP(), []int{4}
}

func (x *PredictUser) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *PredictUser) GetDevice() *PredictDevice {
	if x != nil {
		return x.Device
	}
	return nil
}

func (x *PredictUser) GetAge() string {
	if x != nil {
		return x.Age
	}
	return ""
}

func (x *PredictUser) GetGender() string {
	if x != nil {
		return x.Gender
	}
	return ""
}

func (x *PredictUser) GetProvince() string {
	if x != nil {
		return x.Province
	}
	return ""
}

func (x *PredictUser) GetCity() string {
	if x != nil {
		return x.City
	}
	return ""
}

func (x *PredictUser) GetDistrict() string {
	if x != nil {
		return x.District
	}
	return ""
}

func (x *PredictUser) GetAppMarket() string {
	if x != nil {
		return x.AppMarket
	}
	return ""
}

func (x *PredictUser) GetLoginMode() string {
	if x != nil {
		return x.LoginMode
	}
	return ""
}

func (x *PredictUser) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

func (x *PredictUser) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type PredictDevice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional
	// Device id, such as 'imei'
	DeviceId string `protobuf:"bytes,1,opt,name=deviceId,proto3" json:"deviceId,omitempty"`
	// Optional
	// The platform used by the user, e.g. 'Android', 'Web'
	Platform string `protobuf:"bytes,2,opt,name=platform,proto3" json:"platform,omitempty"`
	// Optional.
	// The brand of the device.
	// e.g. "Samsung"
	DeviceVendor string `protobuf:"bytes,3,opt,name=deviceVendor,proto3" json:"deviceVendor,omitempty"`
	// Optional.
	// The device model.
	// e.g. "iPhone10", "Pixel 4".
	DeviceModel string `protobuf:"bytes,4,opt,name=deviceModel,proto3" json:"deviceModel,omitempty"`
	// Optional
	// The device resolution
	// e.g. "800*600"
	DeviceResolution string `protobuf:"bytes,5,opt,name=deviceResolution,proto3" json:"deviceResolution,omitempty"`
	// Optional.
	// Your application version.
	// e.g. V9.0.8.
	ClientVersion string `protobuf:"bytes,6,opt,name=clientVersion,proto3" json:"clientVersion,omitempty"`
	// Optional.
	// The operating system version.
	// e.g. "14.4.2"
	OsVersion string `protobuf:"bytes,7,opt,name=osVersion,proto3" json:"osVersion,omitempty"`
	// Optional.
	// The network used.
	// e.g. "2g", "3g", "4g", "5g", "wifi", "other".
	NetworkType string `protobuf:"bytes,8,opt,name=networkType,proto3" json:"networkType,omitempty"`
	// Optional.
	// The network carrier.
	// e.g. "Version", "CMCC"
	Carrier string `protobuf:"bytes,9,opt,name=carrier,proto3" json:"carrier,omitempty"`
}

func (x *PredictDevice) Reset() {
	*x = PredictDevice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_byteplus_byteair_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PredictDevice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PredictDevice) ProtoMessage() {}

func (x *PredictDevice) ProtoReflect() protoreflect.Message {
	mi := &file_byteplus_byteair_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PredictDevice.ProtoReflect.Descriptor instead.
func (*PredictDevice) Descriptor() ([]byte, []int) {
	return file_byteplus_byteair_proto_rawDescGZIP(), []int{5}
}

func (x *PredictDevice) GetDeviceId() string {
	if x != nil {
		return x.DeviceId
	}
	return ""
}

func (x *PredictDevice) GetPlatform() string {
	if x != nil {
		return x.Platform
	}
	return ""
}

func (x *PredictDevice) GetDeviceVendor() string {
	if x != nil {
		return x.DeviceVendor
	}
	return ""
}

func (x *PredictDevice) GetDeviceModel() string {
	if x != nil {
		return x.DeviceModel
	}
	return ""
}

func (x *PredictDevice) GetDeviceResolution() string {
	if x != nil {
		return x.DeviceResolution
	}
	return ""
}

func (x *PredictDevice) GetClientVersion() string {
	if x != nil {
		return x.ClientVersion
	}
	return ""
}

func (x *PredictDevice) GetOsVersion() string {
	if x != nil {
		return x.OsVersion
	}
	return ""
}

func (x *PredictDevice) GetNetworkType() string {
	if x != nil {
		return x.NetworkType
	}
	return ""
}

func (x *PredictDevice) GetCarrier() string {
	if x != nil {
		return x.Carrier
	}
	return ""
}

type PredictContext struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required
	// The position of showing recommend result.
	// You need to negotiate with ByteDance how to define it
	Spm string `protobuf:"bytes,1,opt,name=spm,proto3" json:"spm,omitempty"`
	// whether close personal recommend
	ClosePersonalizedRecommend bool `protobuf:"varint,2,opt,name=closePersonalizedRecommend,proto3" json:"closePersonalizedRecommend,omitempty"`
	// Optional.
	// This is a catch-all field to pass all the additional information.
	// Please provide as much information as possible.
	Extra map[string]string `protobuf:"bytes,100,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *PredictContext) Reset() {
	*x = PredictContext{}
	if protoimpl.UnsafeEnabled {
		mi := &file_byteplus_byteair_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PredictContext) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PredictContext) ProtoMessage() {}

func (x *PredictContext) ProtoReflect() protoreflect.Message {
	mi := &file_byteplus_byteair_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PredictContext.ProtoReflect.Descriptor instead.
func (*PredictContext) Descriptor() ([]byte, []int) {
	return file_byteplus_byteair_proto_rawDescGZIP(), []int{6}
}

func (x *PredictContext) GetSpm() string {
	if x != nil {
		return x.Spm
	}
	return ""
}

func (x *PredictContext) GetClosePersonalizedRecommend() bool {
	if x != nil {
		return x.ClosePersonalizedRecommend
	}
	return false
}

func (x *PredictContext) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type PredictCandidateItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required
	// The item id
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Optional
	// The item score
	Score float64 `protobuf:"fixed64,2,opt,name=score,proto3" json:"score,omitempty"`
	// Optional
	// The item's price
	Price float64 `protobuf:"fixed64,3,opt,name=price,proto3" json:"price,omitempty"`
	// Optional
	// Boost coefficient when sorting
	BoostCoef float64 `protobuf:"fixed64,4,opt,name=boost_coef,json=boostCoef,proto3" json:"boost_coef,omitempty"`
	// Optional.
	// This is a catch-all field to pass all the additional information.
	// Please provide as much information as possible.
	Extra map[string]string `protobuf:"bytes,100,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *PredictCandidateItem) Reset() {
	*x = PredictCandidateItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_byteplus_byteair_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PredictCandidateItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PredictCandidateItem) ProtoMessage() {}

func (x *PredictCandidateItem) ProtoReflect() protoreflect.Message {
	mi := &file_byteplus_byteair_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PredictCandidateItem.ProtoReflect.Descriptor instead.
func (*PredictCandidateItem) Descriptor() ([]byte, []int) {
	return file_byteplus_byteair_proto_rawDescGZIP(), []int{7}
}

func (x *PredictCandidateItem) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *PredictCandidateItem) GetScore() float64 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *PredictCandidateItem) GetPrice() float64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *PredictCandidateItem) GetBoostCoef() float64 {
	if x != nil {
		return x.BoostCoef
	}
	return 0
}

func (x *PredictCandidateItem) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type PredictExtra struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional.
	// mark for test
	InnerTest bool `protobuf:"varint,1,opt,name=innerTest,proto3" json:"innerTest,omitempty"`
	// Optional.
	// This is a catch-all field to pass all the additional information.
	// Please provide as much information as possible.
	Extra map[string]string `protobuf:"bytes,101,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *PredictExtra) Reset() {
	*x = PredictExtra{}
	if protoimpl.UnsafeEnabled {
		mi := &file_byteplus_byteair_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PredictExtra) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PredictExtra) ProtoMessage() {}

func (x *PredictExtra) ProtoReflect() protoreflect.Message {
	mi := &file_byteplus_byteair_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PredictExtra.ProtoReflect.Descriptor instead.
func (*PredictExtra) Descriptor() ([]byte, []int) {
	return file_byteplus_byteair_proto_rawDescGZIP(), []int{8}
}

func (x *PredictExtra) GetInnerTest() bool {
	if x != nil {
		return x.InnerTest
	}
	return false
}

func (x *PredictExtra) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type PredictRelatedItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required
	// The item id
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Optional.
	// This is a catch-all field to pass all the additional information.
	// Please provide as much information as possible.
	Extra map[string]string `protobuf:"bytes,100,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *PredictRelatedItem) Reset() {
	*x = PredictRelatedItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_byteplus_byteair_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PredictRelatedItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PredictRelatedItem) ProtoMessage() {}

func (x *PredictRelatedItem) ProtoReflect() protoreflect.Message {
	mi := &file_byteplus_byteair_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PredictRelatedItem.ProtoReflect.Descriptor instead.
func (*PredictRelatedItem) Descriptor() ([]byte, []int) {
	return file_byteplus_byteair_proto_rawDescGZIP(), []int{9}
}

func (x *PredictRelatedItem) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *PredictRelatedItem) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type SearchInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required
	// The starting position of fetching,
	// which plus `size` must less or equal 5000, and begin from '0'.
	// New `start` is equal to the value of previous `start` plus `size`
	Start int32 `protobuf:"varint,1,opt,name=start,proto3" json:"start,omitempty"`
	// Required
	// The type of search
	// 0: query
	// 1: filter
	// 2: search in specified items provided by request
	SearchType int32 `protobuf:"varint,2,opt,name=searchType,proto3" json:"searchType,omitempty"`
	// Optional
	// 0: ascending order;
	// 1: descending order (default)
	SortMode int32 `protobuf:"varint,3,opt,name=sortMode,proto3" json:"sortMode,omitempty"`
	// Optional
	// The item's attribute used by sorting
	//  0: default
	//  1: count of sold
	//  2: price
	//  3: time
	//  4: commission
	SortType int32 `protobuf:"varint,4,opt,name=sortType,proto3" json:"sortType,omitempty"`
	// Optional
	// The content type of result.
	// Example, return item's id when `content` is "gid"
	Content string `protobuf:"bytes,5,opt,name=content,proto3" json:"content,omitempty"`
	// Optional
	// The key word of searching by, it's required when `searchType` is "0"
	Query string `protobuf:"bytes,6,opt,name=query,proto3" json:"query,omitempty"`
	// Optional
	// The condition of filtering by,
	// e.g. "brand", "category".
	Filters map[string]*StringArray `protobuf:"bytes,7,rep,name=filters,proto3" json:"filters,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Optional
	// Search results will be ignored, if they are hit those conditions
	FilterOut map[string]*StringArray `protobuf:"bytes,8,rep,name=filterOut,proto3" json:"filterOut,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Optional
	// The list of searching in, it's required when `searchType` is "0"
	GoodsList []*SearchGoods `protobuf:"bytes,9,rep,name=goodsList,proto3" json:"goodsList,omitempty"`
}

func (x *SearchInfo) Reset() {
	*x = SearchInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_byteplus_byteair_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchInfo) ProtoMessage() {}

func (x *SearchInfo) ProtoReflect() protoreflect.Message {
	mi := &file_byteplus_byteair_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchInfo.ProtoReflect.Descriptor instead.
func (*SearchInfo) Descriptor() ([]byte, []int) {
	return file_byteplus_byteair_proto_rawDescGZIP(), []int{10}
}

func (x *SearchInfo) GetStart() int32 {
	if x != nil {
		return x.Start
	}
	return 0
}

func (x *SearchInfo) GetSearchType() int32 {
	if x != nil {
		return x.SearchType
	}
	return 0
}

func (x *SearchInfo) GetSortMode() int32 {
	if x != nil {
		return x.SortMode
	}
	return 0
}

func (x *SearchInfo) GetSortType() int32 {
	if x != nil {
		return x.SortType
	}
	return 0
}

func (x *SearchInfo) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *SearchInfo) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

func (x *SearchInfo) GetFilters() map[string]*StringArray {
	if x != nil {
		return x.Filters
	}
	return nil
}

func (x *SearchInfo) GetFilterOut() map[string]*StringArray {
	if x != nil {
		return x.FilterOut
	}
	return nil
}

func (x *SearchInfo) GetGoodsList() []*SearchGoods {
	if x != nil {
		return x.GoodsList
	}
	return nil
}

// Protobuf does not support array type as map's value,
// so we wrap array as a object, which can be value of map
type StringArray struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Values []string `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty"`
}

func (x *StringArray) Reset() {
	*x = StringArray{}
	if protoimpl.UnsafeEnabled {
		mi := &file_byteplus_byteair_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StringArray) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StringArray) ProtoMessage() {}

func (x *StringArray) ProtoReflect() protoreflect.Message {
	mi := &file_byteplus_byteair_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StringArray.ProtoReflect.Descriptor instead.
func (*StringArray) Descriptor() ([]byte, []int) {
	return file_byteplus_byteair_proto_rawDescGZIP(), []int{11}
}

func (x *StringArray) GetValues() []string {
	if x != nil {
		return x.Values
	}
	return nil
}

type SearchGoods struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional
	// The item id of int type
	//
	// Deprecated: Do not use.
	GoodsId int64 `protobuf:"varint,1,opt,name=goodsId,proto3" json:"goodsId,omitempty"`
	// Required
	// The item id of string type
	GoodsIdStr string `protobuf:"bytes,2,opt,name=goodsIdStr,proto3" json:"goodsIdStr,omitempty"`
	// Optional
	// The item's price
	Price float32 `protobuf:"fixed32,3,opt,name=price,proto3" json:"price,omitempty"`
	// Optional
	// Boost coefficient when sorting
	BoostCeof float32 `protobuf:"fixed32,4,opt,name=boostCeof,proto3" json:"boostCeof,omitempty"`
}

func (x *SearchGoods) Reset() {
	*x = SearchGoods{}
	if protoimpl.UnsafeEnabled {
		mi := &file_byteplus_byteair_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchGoods) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchGoods) ProtoMessage() {}

func (x *SearchGoods) ProtoReflect() protoreflect.Message {
	mi := &file_byteplus_byteair_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchGoods.ProtoReflect.Descriptor instead.
func (*SearchGoods) Descriptor() ([]byte, []int) {
	return file_byteplus_byteair_proto_rawDescGZIP(), []int{12}
}

// Deprecated: Do not use.
func (x *SearchGoods) GetGoodsId() int64 {
	if x != nil {
		return x.GoodsId
	}
	return 0
}

func (x *SearchGoods) GetGoodsIdStr() string {
	if x != nil {
		return x.GoodsIdStr
	}
	return ""
}

func (x *SearchGoods) GetPrice() float32 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *SearchGoods) GetBoostCeof() float32 {
	if x != nil {
		return x.BoostCeof
	}
	return 0
}

// same as PredictRelatedItem.
type PredictParentItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required
	// The item id
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Optional.
	// This is a catch-all field to pass all the additional information.
	// Please provide as much information as possible.
	Extra map[string]string `protobuf:"bytes,100,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *PredictParentItem) Reset() {
	*x = PredictParentItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_byteplus_byteair_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PredictParentItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PredictParentItem) ProtoMessage() {}

func (x *PredictParentItem) ProtoReflect() protoreflect.Message {
	mi := &file_byteplus_byteair_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PredictParentItem.ProtoReflect.Descriptor instead.
func (*PredictParentItem) Descriptor() ([]byte, []int) {
	return file_byteplus_byteair_proto_rawDescGZIP(), []int{13}
}

func (x *PredictParentItem) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *PredictParentItem) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type PredictFilterItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required
	// The item id
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Optional.
	// This is a catch-all field to pass all the additional information.
	// Please provide as much information as possible.
	Extra map[string]string `protobuf:"bytes,100,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *PredictFilterItem) Reset() {
	*x = PredictFilterItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_byteplus_byteair_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PredictFilterItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PredictFilterItem) ProtoMessage() {}

func (x *PredictFilterItem) ProtoReflect() protoreflect.Message {
	mi := &file_byteplus_byteair_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PredictFilterItem.ProtoReflect.Descriptor instead.
func (*PredictFilterItem) Descriptor() ([]byte, []int) {
	return file_byteplus_byteair_proto_rawDescGZIP(), []int{14}
}

func (x *PredictFilterItem) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *PredictFilterItem) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type PredictResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Output only.
	// The error code. Callers should expect this field for all responses.
	// 0    : The request is successfully returned. Other values indicates errors.
	Code int32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	// Output only.
	// Detailed error message.
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	// Output only.
	// The predict result.
	// It's only populated when `code` is "0".
	Value *PredictResult `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
	// Output only.
	// This is same as the request id of request.
	RequestId string `protobuf:"bytes,4,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (x *PredictResponse) Reset() {
	*x = PredictResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_byteplus_byteair_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PredictResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PredictResponse) ProtoMessage() {}

func (x *PredictResponse) ProtoReflect() protoreflect.Message {
	mi := &file_byteplus_byteair_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PredictResponse.ProtoReflect.Descriptor instead.
func (*PredictResponse) Descriptor() ([]byte, []int) {
	return file_byteplus_byteair_proto_rawDescGZIP(), []int{15}
}

func (x *PredictResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *PredictResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *PredictResponse) GetValue() *PredictResult {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *PredictResponse) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

type PredictResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Output only.
	// The list of predicted products.
	Items []*PredictItem `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
	// Output only.
	// All the predict extra info here.
	Extra map[string]string `protobuf:"bytes,2,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Output only.
	// It is populated when search request.
	// The total count of search result,
	// not the count of this request's result.
	TotalCount int32 `protobuf:"varint,3,opt,name=totalCount,proto3" json:"totalCount,omitempty"`
}

func (x *PredictResult) Reset() {
	*x = PredictResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_byteplus_byteair_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PredictResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PredictResult) ProtoMessage() {}

func (x *PredictResult) ProtoReflect() protoreflect.Message {
	mi := &file_byteplus_byteair_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PredictResult.ProtoReflect.Descriptor instead.
func (*PredictResult) Descriptor() ([]byte, []int) {
	return file_byteplus_byteair_proto_rawDescGZIP(), []int{16}
}

func (x *PredictResult) GetItems() []*PredictItem {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *PredictResult) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

func (x *PredictResult) GetTotalCount() int32 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

type PredictItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Output Only
	// The item id
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Output Only
	// This is the 1-based ranking of the product.
	Rank int32 `protobuf:"varint,3,opt,name=rank,proto3" json:"rank,omitempty"`
	// Output only.
	// The strategy used for this particular recommendation result.
	TransData string `protobuf:"bytes,4,opt,name=transData,proto3" json:"transData,omitempty"`
	// Output only.
	// All the item extra info here.
	Extra map[string]string `protobuf:"bytes,5,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *PredictItem) Reset() {
	*x = PredictItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_byteplus_byteair_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PredictItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PredictItem) ProtoMessage() {}

func (x *PredictItem) ProtoReflect() protoreflect.Message {
	mi := &file_byteplus_byteair_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PredictItem.ProtoReflect.Descriptor instead.
func (*PredictItem) Descriptor() ([]byte, []int) {
	return file_byteplus_byteair_proto_rawDescGZIP(), []int{17}
}

func (x *PredictItem) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *PredictItem) GetRank() int32 {
	if x != nil {
		return x.Rank
	}
	return 0
}

func (x *PredictItem) GetTransData() string {
	if x != nil {
		return x.TransData
	}
	return ""
}

func (x *PredictItem) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type CallbackRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required
	// The user's id
	Uid string `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`
	// Required.
	// The scene info.
	// Please make sure this is the same as the predict request's scene param
	Scene string `protobuf:"bytes,2,opt,name=scene,proto3" json:"scene,omitempty"`
	// Required
	// The list of need callback
	Items []*CallbackItem `protobuf:"bytes,3,rep,name=items,proto3" json:"items,omitempty"`
	// Required.
	// This should be same as `PredictResponse.request_id`.
	PredictRequestId string `protobuf:"bytes,4,opt,name=predict_request_id,json=predictRequestId,proto3" json:"predict_request_id,omitempty"`
	// callback context info
	Context *CallbackContext `protobuf:"bytes,5,opt,name=context,proto3" json:"context,omitempty"`
	// optional.
	// All the callback extra info here.
	Extra map[string]string `protobuf:"bytes,100,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *CallbackRequest) Reset() {
	*x = CallbackRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_byteplus_byteair_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CallbackRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CallbackRequest) ProtoMessage() {}

func (x *CallbackRequest) ProtoReflect() protoreflect.Message {
	mi := &file_byteplus_byteair_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CallbackRequest.ProtoReflect.Descriptor instead.
func (*CallbackRequest) Descriptor() ([]byte, []int) {
	return file_byteplus_byteair_proto_rawDescGZIP(), []int{18}
}

func (x *CallbackRequest) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *CallbackRequest) GetScene() string {
	if x != nil {
		return x.Scene
	}
	return ""
}

func (x *CallbackRequest) GetItems() []*CallbackItem {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *CallbackRequest) GetPredictRequestId() string {
	if x != nil {
		return x.PredictRequestId
	}
	return ""
}

func (x *CallbackRequest) GetContext() *CallbackContext {
	if x != nil {
		return x.Context
	}
	return nil
}

func (x *CallbackRequest) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type CallbackItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required
	// The item id, that is showed to user or filtered
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Optional
	// The item's position when showed to user.
	// If item is filtered, not showed, ignore this field
	Pos string `protobuf:"bytes,2,opt,name=pos,proto3" json:"pos,omitempty"`
	// Optional.
	// The extra info about this item.
	// For example, you can set the final state of the item.
	// The acceptable values are "kept", "filtered", "inserted".
	// kept     : The item was kept as is.
	// filtered : The item is filtered by the caller's own logic.
	// inserted : The item is inserted by the caller's own logic.
	Extra string `protobuf:"bytes,3,opt,name=extra,proto3" json:"extra,omitempty"`
}

func (x *CallbackItem) Reset() {
	*x = CallbackItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_byteplus_byteair_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CallbackItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CallbackItem) ProtoMessage() {}

func (x *CallbackItem) ProtoReflect() protoreflect.Message {
	mi := &file_byteplus_byteair_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CallbackItem.ProtoReflect.Descriptor instead.
func (*CallbackItem) Descriptor() ([]byte, []int) {
	return file_byteplus_byteair_proto_rawDescGZIP(), []int{19}
}

func (x *CallbackItem) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CallbackItem) GetPos() string {
	if x != nil {
		return x.Pos
	}
	return ""
}

func (x *CallbackItem) GetExtra() string {
	if x != nil {
		return x.Extra
	}
	return ""
}

type CallbackContext struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// spm
	Spm string `protobuf:"bytes,1,opt,name=spm,proto3" json:"spm,omitempty"`
	// reqType.
	ReqType CallbackReqType `protobuf:"varint,2,opt,name=req_type,json=reqType,proto3,enum=bytedance.byteplus.byteair.CallbackReqType" json:"req_type,omitempty"`
	// more info
	Extra map[string]string `protobuf:"bytes,100,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *CallbackContext) Reset() {
	*x = CallbackContext{}
	if protoimpl.UnsafeEnabled {
		mi := &file_byteplus_byteair_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CallbackContext) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CallbackContext) ProtoMessage() {}

func (x *CallbackContext) ProtoReflect() protoreflect.Message {
	mi := &file_byteplus_byteair_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CallbackContext.ProtoReflect.Descriptor instead.
func (*CallbackContext) Descriptor() ([]byte, []int) {
	return file_byteplus_byteair_proto_rawDescGZIP(), []int{20}
}

func (x *CallbackContext) GetSpm() string {
	if x != nil {
		return x.Spm
	}
	return ""
}

func (x *CallbackContext) GetReqType() CallbackReqType {
	if x != nil {
		return x.ReqType
	}
	return CallbackReqType_byte_scene
}

func (x *CallbackContext) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type CallbackResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Output only.
	// The error code. Callers should expect this field for all
	// responses.
	// Here is the table for the possible codes.
	// 0   : The request is successfully returned. Other values indicates errors.
	Code int32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	// Output only.
	// Detailed error message.
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *CallbackResponse) Reset() {
	*x = CallbackResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_byteplus_byteair_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CallbackResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CallbackResponse) ProtoMessage() {}

func (x *CallbackResponse) ProtoReflect() protoreflect.Message {
	mi := &file_byteplus_byteair_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CallbackResponse.ProtoReflect.Descriptor instead.
func (*CallbackResponse) Descriptor() ([]byte, []int) {
	return file_byteplus_byteair_proto_rawDescGZIP(), []int{21}
}

func (x *CallbackResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *CallbackResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

var File_byteplus_byteair_proto protoreflect.FileDescriptor

var file_byteplus_byteair_proto_rawDesc = []byte{
	0x0a, 0x16, 0x62, 0x79, 0x74, 0x65, 0x70, 0x6c, 0x75, 0x73, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x61,
	0x69, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1a, 0x62, 0x79, 0x74, 0x65, 0x64, 0x61,
	0x6e, 0x63, 0x65, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x70, 0x6c, 0x75, 0x73, 0x2e, 0x62, 0x79, 0x74,
	0x65, 0x61, 0x69, 0x72, 0x1a, 0x15, 0x62, 0x79, 0x74, 0x65, 0x70, 0x6c, 0x75, 0x73, 0x5f, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x61, 0x6e, 0x79,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x39, 0x0a, 0x09, 0x44, 0x61, 0x74, 0x61, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x22, 0x89, 0x01, 0x0a, 0x0d, 0x57, 0x72, 0x69, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x39, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x2e,
	0x62, 0x79, 0x74, 0x65, 0x70, 0x6c, 0x75, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3d,
	0x0a, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25,
	0x2e, 0x62, 0x79, 0x74, 0x65, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x70,
	0x6c, 0x75, 0x73, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x61, 0x69, 0x72, 0x2e, 0x44, 0x61, 0x74, 0x61,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x22, 0x97, 0x01,
	0x0a, 0x0e, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x39, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x62, 0x79, 0x74,
	0x65, 0x70, 0x6c, 0x75, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x4a, 0x0a, 0x0d, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x25, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x62,
	0x79, 0x74, 0x65, 0x70, 0x6c, 0x75, 0x73, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x61, 0x69, 0x72, 0x2e,
	0x44, 0x61, 0x74, 0x61, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x22, 0xfb, 0x04, 0x0a, 0x0e, 0x50, 0x72, 0x65, 0x64,
	0x69, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3b, 0x0a, 0x04, 0x75, 0x73,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x64,
	0x61, 0x6e, 0x63, 0x65, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x70, 0x6c, 0x75, 0x73, 0x2e, 0x62, 0x79,
	0x74, 0x65, 0x61, 0x69, 0x72, 0x2e, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x55, 0x73, 0x65,
	0x72, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x44, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x64,
	0x61, 0x6e, 0x63, 0x65, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x70, 0x6c, 0x75, 0x73, 0x2e, 0x62, 0x79,
	0x74, 0x65, 0x61, 0x69, 0x72, 0x2e, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x69, 0x7a,
	0x65, 0x12, 0x58, 0x0a, 0x0e, 0x63, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x49, 0x74,
	0x65, 0x6d, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x62, 0x79, 0x74, 0x65,
	0x64, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x70, 0x6c, 0x75, 0x73, 0x2e, 0x62,
	0x79, 0x74, 0x65, 0x61, 0x69, 0x72, 0x2e, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x43, 0x61,
	0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x0e, 0x63, 0x61, 0x6e,
	0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x3e, 0x0a, 0x05, 0x65,
	0x78, 0x74, 0x72, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x62, 0x79, 0x74,
	0x65, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x70, 0x6c, 0x75, 0x73, 0x2e,
	0x62, 0x79, 0x74, 0x65, 0x61, 0x69, 0x72, 0x2e, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x45,
	0x78, 0x74, 0x72, 0x61, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x12, 0x50, 0x0a, 0x0b, 0x72,
	0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2e, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x62, 0x79, 0x74,
	0x65, 0x70, 0x6c, 0x75, 0x73, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x61, 0x69, 0x72, 0x2e, 0x50, 0x72,
	0x65, 0x64, 0x69, 0x63, 0x74, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x49, 0x74, 0x65, 0x6d,
	0x52, 0x0b, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x46, 0x0a,
	0x0a, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x26, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x62, 0x79,
	0x74, 0x65, 0x70, 0x6c, 0x75, 0x73, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x61, 0x69, 0x72, 0x2e, 0x53,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x73, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x4d, 0x0a, 0x0a, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49,
	0x74, 0x65, 0x6d, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x62, 0x79, 0x74, 0x65,
	0x64, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x70, 0x6c, 0x75, 0x73, 0x2e, 0x62,
	0x79, 0x74, 0x65, 0x61, 0x69, 0x72, 0x2e, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x50, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x49, 0x74, 0x65, 0x6d, 0x12, 0x4f, 0x0a, 0x0b, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x49, 0x74,
	0x65, 0x6d, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x62, 0x79, 0x74, 0x65,
	0x64, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x70, 0x6c, 0x75, 0x73, 0x2e, 0x62,
	0x79, 0x74, 0x65, 0x61, 0x69, 0x72, 0x2e, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x0b, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x49, 0x74, 0x65, 0x6d, 0x73, 0x22, 0xb2, 0x03, 0x0a, 0x0b, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63,
	0x74, 0x55, 0x73, 0x65, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x41, 0x0a, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x64, 0x61,
	0x6e, 0x63, 0x65, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x70, 0x6c, 0x75, 0x73, 0x2e, 0x62, 0x79, 0x74,
	0x65, 0x61, 0x69, 0x72, 0x2e, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x52, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x67,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x61, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x67, 0x65,
	0x6e, 0x64, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x63, 0x69, 0x74, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x63, 0x69, 0x74, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74,
	0x12, 0x1c, 0x0a, 0x09, 0x61, 0x70, 0x70, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x70, 0x70, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x12, 0x1c,
	0x0a, 0x09, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x48, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18,
	0x64, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x64, 0x61, 0x6e, 0x63,
	0x65, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x70, 0x6c, 0x75, 0x73, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x61,
	0x69, 0x72, 0x2e, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x55, 0x73, 0x65, 0x72, 0x2e, 0x45,
	0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61,
	0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xb9, 0x02, 0x0a, 0x0d, 0x50,
	0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x12, 0x22, 0x0a, 0x0c, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x56, 0x65,
	0x6e, 0x64, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x2a, 0x0a, 0x10, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x6f,
	0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09,
	0x6f, 0x73, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x6f, 0x73, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x63, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63,
	0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x22, 0xe9, 0x01, 0x0a, 0x0e, 0x50, 0x72, 0x65, 0x64, 0x69,
	0x63, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x70, 0x6d,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x73, 0x70, 0x6d, 0x12, 0x3e, 0x0a, 0x1a, 0x63,
	0x6c, 0x6f, 0x73, 0x65, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64,
	0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x1a, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x69, 0x7a,
	0x65, 0x64, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x12, 0x4b, 0x0a, 0x05, 0x65,
	0x78, 0x74, 0x72, 0x61, 0x18, 0x64, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x62, 0x79, 0x74,
	0x65, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x70, 0x6c, 0x75, 0x73, 0x2e,
	0x62, 0x79, 0x74, 0x65, 0x61, 0x69, 0x72, 0x2e, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72,
	0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0xfe, 0x01, 0x0a, 0x14, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x43, 0x61,
	0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x73,
	0x63, 0x6f, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x6f, 0x6f, 0x73, 0x74,
	0x5f, 0x63, 0x6f, 0x65, 0x66, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x62, 0x6f, 0x6f,
	0x73, 0x74, 0x43, 0x6f, 0x65, 0x66, 0x12, 0x51, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18,
	0x64, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x64, 0x61, 0x6e, 0x63,
	0x65, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x70, 0x6c, 0x75, 0x73, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x61,
	0x69, 0x72, 0x2e, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x43, 0x61, 0x6e, 0x64, 0x69, 0x64,
	0x61, 0x74, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74,
	0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0xb1, 0x01, 0x0a, 0x0c, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x45,
	0x78, 0x74, 0x72, 0x61, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x54, 0x65, 0x73,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x54, 0x65,
	0x73, 0x74, 0x12, 0x49, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x65, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x33, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x62, 0x79,
	0x74, 0x65, 0x70, 0x6c, 0x75, 0x73, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x61, 0x69, 0x72, 0x2e, 0x50,
	0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x45, 0x78, 0x74, 0x72, 0x61, 0x2e, 0x45, 0x78, 0x74, 0x72,
	0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a,
	0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xaf, 0x01, 0x0a, 0x12, 0x50, 0x72, 0x65, 0x64,
	0x69, 0x63, 0x74, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x4f,
	0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x64, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x39, 0x2e,
	0x62, 0x79, 0x74, 0x65, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x70, 0x6c,
	0x75, 0x73, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x61, 0x69, 0x72, 0x2e, 0x50, 0x72, 0x65, 0x64, 0x69,
	0x63, 0x74, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x2e, 0x45, 0x78,
	0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a,
	0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xe1, 0x04, 0x0a, 0x0a, 0x53, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x1e,
	0x0a, 0x0a, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0a, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x73, 0x6f, 0x72, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x08, 0x73, 0x6f, 0x72, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x6f,
	0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x73, 0x6f,
	0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x12, 0x14, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x4d, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x64, 0x61,
	0x6e, 0x63, 0x65, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x70, 0x6c, 0x75, 0x73, 0x2e, 0x62, 0x79, 0x74,
	0x65, 0x61, 0x69, 0x72, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x2e,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x53, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x4f,
	0x75, 0x74, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x64,
	0x61, 0x6e, 0x63, 0x65, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x70, 0x6c, 0x75, 0x73, 0x2e, 0x62, 0x79,
	0x74, 0x65, 0x61, 0x69, 0x72, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x49, 0x6e, 0x66, 0x6f,
	0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x4f, 0x75, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x09, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x4f, 0x75, 0x74, 0x12, 0x45, 0x0a, 0x09, 0x67, 0x6f,
	0x6f, 0x64, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e,
	0x62, 0x79, 0x74, 0x65, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x70, 0x6c,
	0x75, 0x73, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x61, 0x69, 0x72, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x52, 0x09, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x4c, 0x69, 0x73,
	0x74, 0x1a, 0x63, 0x0a, 0x0c, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x3d, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x27, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x62,
	0x79, 0x74, 0x65, 0x70, 0x6c, 0x75, 0x73, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x61, 0x69, 0x72, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x41, 0x72, 0x72, 0x61, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x65, 0x0a, 0x0e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x4f, 0x75, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x3d, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x62, 0x79, 0x74, 0x65,
	0x64, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x70, 0x6c, 0x75, 0x73, 0x2e, 0x62,
	0x79, 0x74, 0x65, 0x61, 0x69, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x41, 0x72, 0x72,
	0x61, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x25, 0x0a,
	0x0b, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x41, 0x72, 0x72, 0x61, 0x79, 0x12, 0x16, 0x0a, 0x06,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x73, 0x22, 0x7f, 0x0a, 0x0b, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x47, 0x6f,
	0x6f, 0x64, 0x73, 0x12, 0x1c, 0x0a, 0x07, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x42, 0x02, 0x18, 0x01, 0x52, 0x07, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x49,
	0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x49, 0x64, 0x53, 0x74, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x49, 0x64, 0x53, 0x74,
	0x72, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x62, 0x6f, 0x6f, 0x73, 0x74,
	0x43, 0x65, 0x6f, 0x66, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x62, 0x6f, 0x6f, 0x73,
	0x74, 0x43, 0x65, 0x6f, 0x66, 0x22, 0xad, 0x01, 0x0a, 0x11, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63,
	0x74, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x4e, 0x0a, 0x05, 0x65,
	0x78, 0x74, 0x72, 0x61, 0x18, 0x64, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x62, 0x79, 0x74,
	0x65, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x70, 0x6c, 0x75, 0x73, 0x2e,
	0x62, 0x79, 0x74, 0x65, 0x61, 0x69, 0x72, 0x2e, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x50,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45,
	0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xad, 0x01, 0x0a, 0x11, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63,
	0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x4e, 0x0a, 0x05, 0x65,
	0x78, 0x74, 0x72, 0x61, 0x18, 0x64, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x62, 0x79, 0x74,
	0x65, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x70, 0x6c, 0x75, 0x73, 0x2e,
	0x62, 0x79, 0x74, 0x65, 0x61, 0x69, 0x72, 0x2e, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x49, 0x74, 0x65, 0x6d, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45,
	0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x9f, 0x01, 0x0a, 0x0f, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x3f, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x64, 0x61, 0x6e,
	0x63, 0x65, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x70, 0x6c, 0x75, 0x73, 0x2e, 0x62, 0x79, 0x74, 0x65,
	0x61, 0x69, 0x72, 0x2e, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x22, 0xf4, 0x01, 0x0a, 0x0d, 0x50, 0x72, 0x65, 0x64,
	0x69, 0x63, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x3d, 0x0a, 0x05, 0x69, 0x74, 0x65,
	0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x64,
	0x61, 0x6e, 0x63, 0x65, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x70, 0x6c, 0x75, 0x73, 0x2e, 0x62, 0x79,
	0x74, 0x65, 0x61, 0x69, 0x72, 0x2e, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x49, 0x74, 0x65,
	0x6d, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x4a, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72,
	0x61, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x64, 0x61,
	0x6e, 0x63, 0x65, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x70, 0x6c, 0x75, 0x73, 0x2e, 0x62, 0x79, 0x74,
	0x65, 0x61, 0x69, 0x72, 0x2e, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65,
	0x78, 0x74, 0x72, 0x61, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xd3,
	0x01, 0x0a, 0x0b, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x72, 0x61,
	0x6e, 0x6b, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x44, 0x61, 0x74, 0x61, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x48, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x32, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x62, 0x79, 0x74, 0x65,
	0x70, 0x6c, 0x75, 0x73, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x61, 0x69, 0x72, 0x2e, 0x50, 0x72, 0x65,
	0x64, 0x69, 0x63, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78,
	0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0xf6, 0x02, 0x0a, 0x0f, 0x43, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63,
	0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63,
	0x65, 0x6e, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x63, 0x65, 0x6e, 0x65,
	0x12, 0x3e, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x28, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x62, 0x79, 0x74, 0x65,
	0x70, 0x6c, 0x75, 0x73, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x61, 0x69, 0x72, 0x2e, 0x43, 0x61, 0x6c,
	0x6c, 0x62, 0x61, 0x63, 0x6b, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73,
	0x12, 0x2c, 0x0a, 0x12, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x70, 0x72,
	0x65, 0x64, 0x69, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x45,
	0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2b, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x62, 0x79, 0x74, 0x65,
	0x70, 0x6c, 0x75, 0x73, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x61, 0x69, 0x72, 0x2e, 0x43, 0x61, 0x6c,
	0x6c, 0x62, 0x61, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x07, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x4c, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x64,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x64, 0x61, 0x6e, 0x63, 0x65,
	0x2e, 0x62, 0x79, 0x74, 0x65, 0x70, 0x6c, 0x75, 0x73, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x61, 0x69,
	0x72, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78,
	0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x46, 0x0a,
	0x0c, 0x43, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x10, 0x0a,
	0x03, 0x70, 0x6f, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x70, 0x6f, 0x73, 0x12,
	0x14, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x65, 0x78, 0x74, 0x72, 0x61, 0x22, 0xf3, 0x01, 0x0a, 0x0f, 0x43, 0x61, 0x6c, 0x6c, 0x62, 0x61,
	0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x70, 0x6d,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x73, 0x70, 0x6d, 0x12, 0x46, 0x0a, 0x08, 0x72,
	0x65, 0x71, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e,
	0x62, 0x79, 0x74, 0x65, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x70, 0x6c,
	0x75, 0x73, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x61, 0x69, 0x72, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x62,
	0x61, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x72, 0x65, 0x71, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x4c, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x64, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x36, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x62,
	0x79, 0x74, 0x65, 0x70, 0x6c, 0x75, 0x73, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x61, 0x69, 0x72, 0x2e,
	0x43, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x2e,
	0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72,
	0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x40, 0x0a, 0x10, 0x43,
	0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2a, 0x43, 0x0a,
	0x0f, 0x43, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x0e, 0x0a, 0x0a, 0x62, 0x79, 0x74, 0x65, 0x5f, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x10, 0x00,
	0x12, 0x12, 0x0a, 0x0e, 0x6e, 0x6f, 0x74, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x5f, 0x73, 0x63, 0x65,
	0x6e, 0x65, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72,
	0x10, 0x02, 0x32, 0x83, 0x03, 0x0a, 0x16, 0x42, 0x79, 0x74, 0x65, 0x70, 0x6c, 0x75, 0x73, 0x47,
	0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x4c, 0x0a,
	0x09, 0x57, 0x72, 0x69, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x14, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79,
	0x1a, 0x29, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x62, 0x79, 0x74,
	0x65, 0x70, 0x6c, 0x75, 0x73, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x61, 0x69, 0x72, 0x2e, 0x57, 0x72,
	0x69, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x50, 0x0a, 0x0a, 0x49,
	0x6d, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x1a,
	0x2c, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x62, 0x79, 0x74, 0x65,
	0x70, 0x6c, 0x75, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x62, 0x0a,
	0x07, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x12, 0x2a, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x64,
	0x61, 0x6e, 0x63, 0x65, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x70, 0x6c, 0x75, 0x73, 0x2e, 0x62, 0x79,
	0x74, 0x65, 0x61, 0x69, 0x72, 0x2e, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x64, 0x61, 0x6e, 0x63, 0x65,
	0x2e, 0x62, 0x79, 0x74, 0x65, 0x70, 0x6c, 0x75, 0x73, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x61, 0x69,
	0x72, 0x2e, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x65, 0x0a, 0x08, 0x43, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x12, 0x2b, 0x2e,
	0x62, 0x79, 0x74, 0x65, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x70, 0x6c,
	0x75, 0x73, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x61, 0x69, 0x72, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x62,
	0x61, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x62, 0x79, 0x74,
	0x65, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x70, 0x6c, 0x75, 0x73, 0x2e,
	0x62, 0x79, 0x74, 0x65, 0x61, 0x69, 0x72, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x50, 0x0a, 0x1d, 0x62, 0x79, 0x74, 0x65,
	0x70, 0x6c, 0x75, 0x73, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x61, 0x69, 0x72,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5a, 0x2f, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x62, 0x79, 0x74, 0x65, 0x70, 0x6c, 0x75, 0x73, 0x2d, 0x73,
	0x64, 0x6b, 0x2f, 0x73, 0x64, 0x6b, 0x2d, 0x67, 0x6f, 0x2f, 0x62, 0x79, 0x74, 0x65, 0x61, 0x69,
	0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_byteplus_byteair_proto_rawDescOnce sync.Once
	file_byteplus_byteair_proto_rawDescData = file_byteplus_byteair_proto_rawDesc
)

func file_byteplus_byteair_proto_rawDescGZIP() []byte {
	file_byteplus_byteair_proto_rawDescOnce.Do(func() {
		file_byteplus_byteair_proto_rawDescData = protoimpl.X.CompressGZIP(file_byteplus_byteair_proto_rawDescData)
	})
	return file_byteplus_byteair_proto_rawDescData
}

var file_byteplus_byteair_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_byteplus_byteair_proto_msgTypes = make([]protoimpl.MessageInfo, 35)
var file_byteplus_byteair_proto_goTypes = []interface{}{
	(CallbackReqType)(0),               // 0: bytedance.byteplus.byteair.CallbackReqType
	(*DataError)(nil),                  // 1: bytedance.byteplus.byteair.DataError
	(*WriteResponse)(nil),              // 2: bytedance.byteplus.byteair.WriteResponse
	(*ImportResponse)(nil),             // 3: bytedance.byteplus.byteair.ImportResponse
	(*PredictRequest)(nil),             // 4: bytedance.byteplus.byteair.PredictRequest
	(*PredictUser)(nil),                // 5: bytedance.byteplus.byteair.PredictUser
	(*PredictDevice)(nil),              // 6: bytedance.byteplus.byteair.PredictDevice
	(*PredictContext)(nil),             // 7: bytedance.byteplus.byteair.PredictContext
	(*PredictCandidateItem)(nil),       // 8: bytedance.byteplus.byteair.PredictCandidateItem
	(*PredictExtra)(nil),               // 9: bytedance.byteplus.byteair.PredictExtra
	(*PredictRelatedItem)(nil),         // 10: bytedance.byteplus.byteair.PredictRelatedItem
	(*SearchInfo)(nil),                 // 11: bytedance.byteplus.byteair.SearchInfo
	(*StringArray)(nil),                // 12: bytedance.byteplus.byteair.StringArray
	(*SearchGoods)(nil),                // 13: bytedance.byteplus.byteair.SearchGoods
	(*PredictParentItem)(nil),          // 14: bytedance.byteplus.byteair.PredictParentItem
	(*PredictFilterItem)(nil),          // 15: bytedance.byteplus.byteair.PredictFilterItem
	(*PredictResponse)(nil),            // 16: bytedance.byteplus.byteair.PredictResponse
	(*PredictResult)(nil),              // 17: bytedance.byteplus.byteair.PredictResult
	(*PredictItem)(nil),                // 18: bytedance.byteplus.byteair.PredictItem
	(*CallbackRequest)(nil),            // 19: bytedance.byteplus.byteair.CallbackRequest
	(*CallbackItem)(nil),               // 20: bytedance.byteplus.byteair.CallbackItem
	(*CallbackContext)(nil),            // 21: bytedance.byteplus.byteair.CallbackContext
	(*CallbackResponse)(nil),           // 22: bytedance.byteplus.byteair.CallbackResponse
	nil,                                // 23: bytedance.byteplus.byteair.PredictUser.ExtraEntry
	nil,                                // 24: bytedance.byteplus.byteair.PredictContext.ExtraEntry
	nil,                                // 25: bytedance.byteplus.byteair.PredictCandidateItem.ExtraEntry
	nil,                                // 26: bytedance.byteplus.byteair.PredictExtra.ExtraEntry
	nil,                                // 27: bytedance.byteplus.byteair.PredictRelatedItem.ExtraEntry
	nil,                                // 28: bytedance.byteplus.byteair.SearchInfo.FiltersEntry
	nil,                                // 29: bytedance.byteplus.byteair.SearchInfo.FilterOutEntry
	nil,                                // 30: bytedance.byteplus.byteair.PredictParentItem.ExtraEntry
	nil,                                // 31: bytedance.byteplus.byteair.PredictFilterItem.ExtraEntry
	nil,                                // 32: bytedance.byteplus.byteair.PredictResult.ExtraEntry
	nil,                                // 33: bytedance.byteplus.byteair.PredictItem.ExtraEntry
	nil,                                // 34: bytedance.byteplus.byteair.CallbackRequest.ExtraEntry
	nil,                                // 35: bytedance.byteplus.byteair.CallbackContext.ExtraEntry
	(*protocol.Status)(nil),            // 36: bytedance.byteplus.common.Status
	(*anypb.Any)(nil),                  // 37: google.protobuf.Any
	(*protocol.OperationResponse)(nil), // 38: bytedance.byteplus.common.OperationResponse
}
var file_byteplus_byteair_proto_depIdxs = []int32{
	36, // 0: bytedance.byteplus.byteair.WriteResponse.status:type_name -> bytedance.byteplus.common.Status
	1,  // 1: bytedance.byteplus.byteair.WriteResponse.errors:type_name -> bytedance.byteplus.byteair.DataError
	36, // 2: bytedance.byteplus.byteair.ImportResponse.status:type_name -> bytedance.byteplus.common.Status
	1,  // 3: bytedance.byteplus.byteair.ImportResponse.error_samples:type_name -> bytedance.byteplus.byteair.DataError
	5,  // 4: bytedance.byteplus.byteair.PredictRequest.user:type_name -> bytedance.byteplus.byteair.PredictUser
	7,  // 5: bytedance.byteplus.byteair.PredictRequest.context:type_name -> bytedance.byteplus.byteair.PredictContext
	8,  // 6: bytedance.byteplus.byteair.PredictRequest.candidateItems:type_name -> bytedance.byteplus.byteair.PredictCandidateItem
	9,  // 7: bytedance.byteplus.byteair.PredictRequest.extra:type_name -> bytedance.byteplus.byteair.PredictExtra
	10, // 8: bytedance.byteplus.byteair.PredictRequest.relatedItem:type_name -> bytedance.byteplus.byteair.PredictRelatedItem
	11, // 9: bytedance.byteplus.byteair.PredictRequest.searchInfo:type_name -> bytedance.byteplus.byteair.SearchInfo
	14, // 10: bytedance.byteplus.byteair.PredictRequest.parentItem:type_name -> bytedance.byteplus.byteair.PredictParentItem
	15, // 11: bytedance.byteplus.byteair.PredictRequest.filterItems:type_name -> bytedance.byteplus.byteair.PredictFilterItem
	6,  // 12: bytedance.byteplus.byteair.PredictUser.device:type_name -> bytedance.byteplus.byteair.PredictDevice
	23, // 13: bytedance.byteplus.byteair.PredictUser.extra:type_name -> bytedance.byteplus.byteair.PredictUser.ExtraEntry
	24, // 14: bytedance.byteplus.byteair.PredictContext.extra:type_name -> bytedance.byteplus.byteair.PredictContext.ExtraEntry
	25, // 15: bytedance.byteplus.byteair.PredictCandidateItem.extra:type_name -> bytedance.byteplus.byteair.PredictCandidateItem.ExtraEntry
	26, // 16: bytedance.byteplus.byteair.PredictExtra.extra:type_name -> bytedance.byteplus.byteair.PredictExtra.ExtraEntry
	27, // 17: bytedance.byteplus.byteair.PredictRelatedItem.extra:type_name -> bytedance.byteplus.byteair.PredictRelatedItem.ExtraEntry
	28, // 18: bytedance.byteplus.byteair.SearchInfo.filters:type_name -> bytedance.byteplus.byteair.SearchInfo.FiltersEntry
	29, // 19: bytedance.byteplus.byteair.SearchInfo.filterOut:type_name -> bytedance.byteplus.byteair.SearchInfo.FilterOutEntry
	13, // 20: bytedance.byteplus.byteair.SearchInfo.goodsList:type_name -> bytedance.byteplus.byteair.SearchGoods
	30, // 21: bytedance.byteplus.byteair.PredictParentItem.extra:type_name -> bytedance.byteplus.byteair.PredictParentItem.ExtraEntry
	31, // 22: bytedance.byteplus.byteair.PredictFilterItem.extra:type_name -> bytedance.byteplus.byteair.PredictFilterItem.ExtraEntry
	17, // 23: bytedance.byteplus.byteair.PredictResponse.value:type_name -> bytedance.byteplus.byteair.PredictResult
	18, // 24: bytedance.byteplus.byteair.PredictResult.items:type_name -> bytedance.byteplus.byteair.PredictItem
	32, // 25: bytedance.byteplus.byteair.PredictResult.extra:type_name -> bytedance.byteplus.byteair.PredictResult.ExtraEntry
	33, // 26: bytedance.byteplus.byteair.PredictItem.extra:type_name -> bytedance.byteplus.byteair.PredictItem.ExtraEntry
	20, // 27: bytedance.byteplus.byteair.CallbackRequest.items:type_name -> bytedance.byteplus.byteair.CallbackItem
	21, // 28: bytedance.byteplus.byteair.CallbackRequest.context:type_name -> bytedance.byteplus.byteair.CallbackContext
	34, // 29: bytedance.byteplus.byteair.CallbackRequest.extra:type_name -> bytedance.byteplus.byteair.CallbackRequest.ExtraEntry
	0,  // 30: bytedance.byteplus.byteair.CallbackContext.req_type:type_name -> bytedance.byteplus.byteair.CallbackReqType
	35, // 31: bytedance.byteplus.byteair.CallbackContext.extra:type_name -> bytedance.byteplus.byteair.CallbackContext.ExtraEntry
	12, // 32: bytedance.byteplus.byteair.SearchInfo.FiltersEntry.value:type_name -> bytedance.byteplus.byteair.StringArray
	12, // 33: bytedance.byteplus.byteair.SearchInfo.FilterOutEntry.value:type_name -> bytedance.byteplus.byteair.StringArray
	37, // 34: bytedance.byteplus.byteair.ByteplusGeneralService.WriteData:input_type -> google.protobuf.Any
	37, // 35: bytedance.byteplus.byteair.ByteplusGeneralService.ImportData:input_type -> google.protobuf.Any
	4,  // 36: bytedance.byteplus.byteair.ByteplusGeneralService.Predict:input_type -> bytedance.byteplus.byteair.PredictRequest
	19, // 37: bytedance.byteplus.byteair.ByteplusGeneralService.Callback:input_type -> bytedance.byteplus.byteair.CallbackRequest
	2,  // 38: bytedance.byteplus.byteair.ByteplusGeneralService.WriteData:output_type -> bytedance.byteplus.byteair.WriteResponse
	38, // 39: bytedance.byteplus.byteair.ByteplusGeneralService.ImportData:output_type -> bytedance.byteplus.common.OperationResponse
	16, // 40: bytedance.byteplus.byteair.ByteplusGeneralService.Predict:output_type -> bytedance.byteplus.byteair.PredictResponse
	22, // 41: bytedance.byteplus.byteair.ByteplusGeneralService.Callback:output_type -> bytedance.byteplus.byteair.CallbackResponse
	38, // [38:42] is the sub-list for method output_type
	34, // [34:38] is the sub-list for method input_type
	34, // [34:34] is the sub-list for extension type_name
	34, // [34:34] is the sub-list for extension extendee
	0,  // [0:34] is the sub-list for field type_name
}

func init() { file_byteplus_byteair_proto_init() }
func file_byteplus_byteair_proto_init() {
	if File_byteplus_byteair_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_byteplus_byteair_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataError); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_byteplus_byteair_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WriteResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_byteplus_byteair_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImportResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_byteplus_byteair_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PredictRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_byteplus_byteair_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PredictUser); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_byteplus_byteair_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PredictDevice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_byteplus_byteair_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PredictContext); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_byteplus_byteair_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PredictCandidateItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_byteplus_byteair_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PredictExtra); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_byteplus_byteair_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PredictRelatedItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_byteplus_byteair_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_byteplus_byteair_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StringArray); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_byteplus_byteair_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchGoods); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_byteplus_byteair_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PredictParentItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_byteplus_byteair_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PredictFilterItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_byteplus_byteair_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PredictResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_byteplus_byteair_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PredictResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_byteplus_byteair_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PredictItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_byteplus_byteair_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CallbackRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_byteplus_byteair_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CallbackItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_byteplus_byteair_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CallbackContext); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_byteplus_byteair_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CallbackResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_byteplus_byteair_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   35,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_byteplus_byteair_proto_goTypes,
		DependencyIndexes: file_byteplus_byteair_proto_depIdxs,
		EnumInfos:         file_byteplus_byteair_proto_enumTypes,
		MessageInfos:      file_byteplus_byteair_proto_msgTypes,
	}.Build()
	File_byteplus_byteair_proto = out.File
	file_byteplus_byteair_proto_rawDesc = nil
	file_byteplus_byteair_proto_goTypes = nil
	file_byteplus_byteair_proto_depIdxs = nil
}
