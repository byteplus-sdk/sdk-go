// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.17.3
// source: byteplus_media.proto

package protocol

import (
	protocol "github.com/byteplus-sdk/sdk-go/common/protocol"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// The user proto.
type User struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required.
	// The unique user identifier.
	// The consistency is required (for the same user) among different
	// UserEvents, PredictRequest, or any other places.
	// Device ID or member ID is often used as user_id here.
	//
	// Note: If you want to encrypt the id and used the hashed value here,
	// please do the consistent encryption for all its appearances,
	// including UserEvents and Predict Requests.
	//
	// Note: If your users often switch between login/logout status
	// (In web or mobile application), you might get inconsistent IDs
	// (member v.s. visitor) for the same user.
	// To avoid this, we suggested that you can use consistent ID like device ID.
	// Sample values are "1234567", "359938082141597",
	// "665DEA957EBFB34D41B1F1D80E4B5F89"
	// Please refer to
	// [this](../docs/effective-and-efficient-data-synchronization#stable-user-identifier) for more details.
	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// Optional.
	// The gender of the given user.
	// The accepted values are: "male", "female", and "other".
	Gender string `protobuf:"bytes,2,opt,name=gender,proto3" json:"gender,omitempty"`
	// Optional.
	// The age of the given user.
	// It can be the an (estimate) single value, or a range.
	// e.g. "23", "18-25", "0-15", "50-100", etc.
	Age string `protobuf:"bytes,3,opt,name=age,proto3" json:"age,omitempty"`
	// Optional.
	// The tags for the given user.
	// Please send as many tags as possible here, even it might be a bit
	// inaccurate or has low coverage.
	// Some sample values are ["new users", "high buying power"], etc.
	// Please refer to
	// [this](../docs/effective-and-efficient-data-synchronization#requirements-for-free-format-string-fields) for more details.
	Tags []string `protobuf:"bytes,4,rep,name=tags,proto3" json:"tags,omitempty"`
	// Optional.
	// The id of this user's most used device.
	// Some sample values are "abc123", "1", etc.
	DeviceId string `protobuf:"bytes,5,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
	// Optional.
	// Type of this user's most used device.
	// Acceptable values are "app", "desktop-web", "mobile-web", "other".
	DeviceType string `protobuf:"bytes,6,opt,name=device_type,json=deviceType,proto3" json:"device_type,omitempty"`
	// Optional.
	// Which subscription plan is this user on.
	// Accepted values are "free", "paid", "other"
	SubscriberType string `protobuf:"bytes,7,opt,name=subscriber_type,json=subscriberType,proto3" json:"subscriber_type,omitempty"`
	// Optional.
	// The primary language used by this user.
	Language string `protobuf:"bytes,8,opt,name=language,proto3" json:"language,omitempty"`
	// Optional.
	// List of content_ids consumed by this user.
	// Some sample values are ["123","124"], etc.
	ViewHistory []string `protobuf:"bytes,9,rep,name=view_history,json=viewHistory,proto3" json:"view_history,omitempty"`
	// Optional.
	// The channel where the given user is acquired.
	// Some sample values are "AppStore", "GoogleAds", "FacebookAds", etc.
	// Please refer to
	// [this](../docs/effective-and-efficient-data-synchronization#requirements-for-free-format-string-fields) for more details.
	ActivationChannel string `protobuf:"bytes,10,opt,name=activation_channel,json=activationChannel,proto3" json:"activation_channel,omitempty"`
	// Optional.
	// The level of the membership.
	// Some sample values are "silver", "elite", "4", "5", etc.
	// Please refer to
	// [this](../docs/effective-and-efficient-data-synchronization#requirements-for-free-format-string-fields) for more details.
	MembershipLevel string `protobuf:"bytes,11,opt,name=membership_level,json=membershipLevel,proto3" json:"membership_level,omitempty"`
	// Optional.
	// The timestamp when the given user activated or registered.
	RegistrationTimestamp int64 `protobuf:"varint,12,opt,name=registration_timestamp,json=registrationTimestamp,proto3" json:"registration_timestamp,omitempty"`
	// Optional.
	// Country name.
	// Some sample values are "USA", "UK", etc.
	// Please refer to
	// [this](../docs/effective-and-efficient-data-synchronization#requirements-for-free-format-string-fields) for more details.
	Country string `protobuf:"bytes,13,opt,name=country,proto3" json:"country,omitempty"`
	// Optional.
	// City name.
	// Some sample values are "San Jose", "Chicago", "NYC", etc.
	// Please refer to
	// [this](../docs/effective-and-efficient-data-synchronization#requirements-for-free-format-string-fields) for more details.
	City string `protobuf:"bytes,14,opt,name=city,proto3" json:"city,omitempty"`
	// Optional.
	// The more fine grained district or area.
	// Some sample values are "king county", "santa monica county", etc.
	// Please refer to
	// [this](../docs/effective-and-efficient-data-synchronization#requirements-for-free-format-string-fields) for more details.
	DistrictOrArea string `protobuf:"bytes,15,opt,name=district_or_area,json=districtOrArea,proto3" json:"district_or_area,omitempty"`
	// Optional.
	// Postal code of the address. Not all countries use or require postal codes
	// to be present.
	Postcode string `protobuf:"bytes,16,opt,name=postcode,proto3" json:"postcode,omitempty"`
	// Optional.
	// This is a catch-all field to pass all the additional information.
	// Please provide as much information as possible.
	Extra map[string]string `protobuf:"bytes,100,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *User) Reset() {
	*x = User{}
	if protoimpl.UnsafeEnabled {
		mi := &file_byteplus_media_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *User) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*User) ProtoMessage() {}

func (x *User) ProtoReflect() protoreflect.Message {
	mi := &file_byteplus_media_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use User.ProtoReflect.Descriptor instead.
func (*User) Descriptor() ([]byte, []int) {
	return file_byteplus_media_proto_rawDescGZIP(), []int{0}
}

func (x *User) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *User) GetGender() string {
	if x != nil {
		return x.Gender
	}
	return ""
}

func (x *User) GetAge() string {
	if x != nil {
		return x.Age
	}
	return ""
}

func (x *User) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *User) GetDeviceId() string {
	if x != nil {
		return x.DeviceId
	}
	return ""
}

func (x *User) GetDeviceType() string {
	if x != nil {
		return x.DeviceType
	}
	return ""
}

func (x *User) GetSubscriberType() string {
	if x != nil {
		return x.SubscriberType
	}
	return ""
}

func (x *User) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

func (x *User) GetViewHistory() []string {
	if x != nil {
		return x.ViewHistory
	}
	return nil
}

func (x *User) GetActivationChannel() string {
	if x != nil {
		return x.ActivationChannel
	}
	return ""
}

func (x *User) GetMembershipLevel() string {
	if x != nil {
		return x.MembershipLevel
	}
	return ""
}

func (x *User) GetRegistrationTimestamp() int64 {
	if x != nil {
		return x.RegistrationTimestamp
	}
	return 0
}

func (x *User) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

func (x *User) GetCity() string {
	if x != nil {
		return x.City
	}
	return ""
}

func (x *User) GetDistrictOrArea() string {
	if x != nil {
		return x.DistrictOrArea
	}
	return ""
}

func (x *User) GetPostcode() string {
	if x != nil {
		return x.Postcode
	}
	return ""
}

func (x *User) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

// Request proto for WriteUsers method.
type WriteUsersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required.
	// A list of users to write.
	// The max # of users allowed is 2000, otherwise a standard 400 error is
	// returned.
	Users []*User `protobuf:"bytes,1,rep,name=users,proto3" json:"users,omitempty"`
	// Optional.
	// This is a catch-all field to pass all the additional information.
	// Please provide as much information as possible.
	Extra map[string]string `protobuf:"bytes,100,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *WriteUsersRequest) Reset() {
	*x = WriteUsersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_byteplus_media_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WriteUsersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WriteUsersRequest) ProtoMessage() {}

func (x *WriteUsersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_byteplus_media_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WriteUsersRequest.ProtoReflect.Descriptor instead.
func (*WriteUsersRequest) Descriptor() ([]byte, []int) {
	return file_byteplus_media_proto_rawDescGZIP(), []int{1}
}

func (x *WriteUsersRequest) GetUsers() []*User {
	if x != nil {
		return x.Users
	}
	return nil
}

func (x *WriteUsersRequest) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

// The error proto for a single user.
type UserError struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Output only.
	// The detailed error message.
	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	// Output only.
	// This is the exact same user proto that was passed in the request.
	User *User `protobuf:"bytes,2,opt,name=user,proto3" json:"user,omitempty"`
}

func (x *UserError) Reset() {
	*x = UserError{}
	if protoimpl.UnsafeEnabled {
		mi := &file_byteplus_media_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserError) ProtoMessage() {}

func (x *UserError) ProtoReflect() protoreflect.Message {
	mi := &file_byteplus_media_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserError.ProtoReflect.Descriptor instead.
func (*UserError) Descriptor() ([]byte, []int) {
	return file_byteplus_media_proto_rawDescGZIP(), []int{2}
}

func (x *UserError) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *UserError) GetUser() *User {
	if x != nil {
		return x.User
	}
	return nil
}

// The response proto for WriteUsers call.
type WriteUsersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Output only.
	// When `status.code` is 0, all payload are successfully written.
	// If `status.code` is 1001, `errors` is populated.
	// Other non-zero values indicate all payload failed.
	Status *protocol.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	// Output only.
	// This field is populated when `status.code` is 1001.
	// When populated, this field contains the errors.
	Errors []*UserError `protobuf:"bytes,2,rep,name=errors,proto3" json:"errors,omitempty"`
}

func (x *WriteUsersResponse) Reset() {
	*x = WriteUsersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_byteplus_media_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WriteUsersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WriteUsersResponse) ProtoMessage() {}

func (x *WriteUsersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_byteplus_media_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WriteUsersResponse.ProtoReflect.Descriptor instead.
func (*WriteUsersResponse) Descriptor() ([]byte, []int) {
	return file_byteplus_media_proto_rawDescGZIP(), []int{3}
}

func (x *WriteUsersResponse) GetStatus() *protocol.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *WriteUsersResponse) GetErrors() []*UserError {
	if x != nil {
		return x.Errors
	}
	return nil
}

// The content proto.
type Content struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required.
	// The unique identifier for the content.
	// It can be series_id/entity_id/video_id/other unique identifier
	ContentId string `protobuf:"bytes,1,opt,name=content_id,json=contentId,proto3" json:"content_id,omitempty"`
	// Required.
	// 1 if the content is recommendable (result in `Predict` call).
	// 0 if the content isn't recommendable.
	// Note: Any change of this takes up to 1 hour to take effect.
	// Note: Even if a content isn't recommendable, please still send this to us.
	// This is because that users might interact with such contents historically,
	// therefore it provides reasonably strong signals.
	IsRecommendable int32 `protobuf:"varint,2,opt,name=is_recommendable,json=isRecommendable,proto3" json:"is_recommendable,omitempty"`
	// Required.
	// The categories this content belongs to.
	// The categories is a json serialized string.
	// For example in origin json object, if a content has "Movie -> Comedy"
	// This should be:
	// [
	//   {"category_depth":1,
	//    "category_nodes": [{"id_or_name":"Movie"}] },
	//   {"category_depth":2,
	//    "category_nodes": [{"id_or_name":"Comedy"}] }
	// ]
	// If a content belongs to 2 different categories,
	// "Movie -> Comedy" and "Movie -> Action"
	// then
	//
	// [
	//   {"category_depth":1,
	//    "category_nodes": [{"id_or_name":"Movie"}] },
	//   {"category_depth":2,
	//    "category_nodes": [{"id_or_name":"Comedy"},
	//                       {"id_or_name":"Action"}] }
	// ]
	// then you should serialize the json object to string, for example in python:
	// categories = json.dumps( [
	//     {"category_depth":1,
	//      "category_nodes": [{"id_or_name":"Movie"}] },
	//     {"category_depth":2,
	//      "category_nodes": [{"id_or_name":"Comedy"}] }
	//   ])
	Categories string `protobuf:"bytes,3,opt,name=categories,proto3" json:"categories,omitempty"`
	// Required.
	// The content title.
	ContentTitle string `protobuf:"bytes,4,opt,name=content_title,json=contentTitle,proto3" json:"content_title,omitempty"`
	// Required.
	// Type of the content.
	// The acceptable values are "picture", "gif", "video", "text", "other".
	// Note: if the content_type is video, video_duration must be non-zero.
	ContentType string `protobuf:"bytes,5,opt,name=content_type,json=contentType,proto3" json:"content_type,omitempty"`
	// Optional.
	// The content description.
	Description string `protobuf:"bytes,6,opt,name=description,proto3" json:"description,omitempty"`
	// Optional.
	// The account who created the content (i.e. the user_id) or the publisher of the video (e.g. HBO)
	ContentOwner string `protobuf:"bytes,7,opt,name=content_owner,json=contentOwner,proto3" json:"content_owner,omitempty"`
	// Optional.
	// The language associated with this content.
	Language string `protobuf:"bytes,8,opt,name=language,proto3" json:"language,omitempty"`
	// Optional.
	// Internal label of this content.
	// Some sample values are ["New", "Trending"], etc.
	Tags []string `protobuf:"bytes,9,rep,name=tags,proto3" json:"tags,omitempty"`
	// Optional.
	// The actual tags (e.g. hashtag) displayed to user on listing page (e.g. homepage, category landing page)
	// Sample values are: ["popular", "recommend"], etc.
	ListingPageDisplayTags []string `protobuf:"bytes,10,rep,name=listing_page_display_tags,json=listingPageDisplayTags,proto3" json:"listing_page_display_tags,omitempty"`
	// Optional.
	// The actual tags (e.g. hashtag) displayed to user on content detail page.
	// Sample values are: ["popular", "recommend"], etc.
	DetailPageDisplayTags []string `protobuf:"bytes,11,rep,name=detail_page_display_tags,json=detailPageDisplayTags,proto3" json:"detail_page_display_tags,omitempty"`
	// Optional.
	// If there's an image/video/other multi-media displayed on listing page for a content.
	// The only acceptable values are ["image", "video", "other"].
	ListingPageDisplayType string `protobuf:"bytes,12,opt,name=listing_page_display_type,json=listingPageDisplayType,proto3" json:"listing_page_display_type,omitempty"`
	// Optional.
	// When `listing_page_display_type` is one of the multi-media types, put the url to the media file here.
	CoverMultimediaUrl string `protobuf:"bytes,13,opt,name=cover_multimedia_url,json=coverMultimediaUrl,proto3" json:"cover_multimedia_url,omitempty"`
	// Optional.
	// The rating given by the users. The value is normalized to [0.0, 5.0].
	UserRating float64 `protobuf:"fixed64,14,opt,name=user_rating,json=userRating,proto3" json:"user_rating,omitempty"`
	// Optional.
	// The number of views for this content.
	ViewsCount int32 `protobuf:"varint,15,opt,name=views_count,json=viewsCount,proto3" json:"views_count,omitempty"`
	// Optional.
	// The number of comments for this content.
	CommentsCount int32 `protobuf:"varint,16,opt,name=comments_count,json=commentsCount,proto3" json:"comments_count,omitempty"`
	// Optional.
	// The number of likes for this content.
	LikesCount int32 `protobuf:"varint,17,opt,name=likes_count,json=likesCount,proto3" json:"likes_count,omitempty"`
	// Optional.
	// The number of shares for this content.
	SharesCount int32 `protobuf:"varint,18,opt,name=shares_count,json=sharesCount,proto3" json:"shares_count,omitempty"`
	// Optional.
	// Whether users need to pay (e.g. subscribe to the platform) to view this content.
	// Note: 1 if this content need to pay
	//       0 no need to pay for this content.
	IsPaidContent int32 `protobuf:"varint,19,opt,name=is_paid_content,json=isPaidContent,proto3" json:"is_paid_content,omitempty"`
	// Optional.
	// If this is paid_content, send the original price in cents.
	// e.g. $100.12 should be 10012 here.
	OriginPrice int64 `protobuf:"varint,20,opt,name=origin_price,json=originPrice,proto3" json:"origin_price,omitempty"`
	// Optional.
	// If this is paid_content, send the current price (after discount) in cents.
	// e.g. $100.12 should be 10012 here.
	CurrentPrice int64 `protobuf:"varint,21,opt,name=current_price,json=currentPrice,proto3" json:"current_price,omitempty"`
	// Optional.
	// The region where this content is published.
	PublishRegion string `protobuf:"bytes,22,opt,name=publish_region,json=publishRegion,proto3" json:"publish_region,omitempty"`
	// Optional.
	// The regions where this content can be viewed.
	// Sample values are: ["Singapore", "India"], etc.
	AvailableRegion []string `protobuf:"bytes,23,rep,name=available_region,json=availableRegion,proto3" json:"available_region,omitempty"`
	// Optional.
	// (For OTT platform) If this is a TV show with multiple seasons, id of the TV show.
	// Note: if this content record is about a entity, no need to send its series and video information
	EntityId string `protobuf:"bytes,24,opt,name=entity_id,json=entityId,proto3" json:"entity_id,omitempty"`
	// Optional.
	// (For OTT platform) If this is a TV show with multiple seasons, name of the TV show.
	EntityName string `protobuf:"bytes,25,opt,name=entity_name,json=entityName,proto3" json:"entity_name,omitempty"`
	// Optional.
	// (For OTT platform) If this is a TV show with multiple seasons, id of the season.
	// Note: if this content record is about a series,
	// send the series data and corresponding entity data ( entity_id and entity_name),
	// no need to send video related info.
	SeriesId string `protobuf:"bytes,26,opt,name=series_id,json=seriesId,proto3" json:"series_id,omitempty"`
	// Optional.
	// (For OTT platform) If this is a TV show with multiple seasons, which season is this.
	SeriesIndex int32 `protobuf:"varint,27,opt,name=series_index,json=seriesIndex,proto3" json:"series_index,omitempty"`
	// Optional.
	// (For OTT platform) If this is a TV show with multiple seasons, name of this season.
	SeriesName string `protobuf:"bytes,28,opt,name=series_name,json=seriesName,proto3" json:"series_name,omitempty"`
	// Optional.
	// (For OTT platform) Total number of seasons for this TV show.
	SeriesCount int32 `protobuf:"varint,29,opt,name=series_count,json=seriesCount,proto3" json:"series_count,omitempty"`
	// Optional.
	// (For OTT platform) Id of the video in a series.
	VideoId string `protobuf:"bytes,30,opt,name=video_id,json=videoId,proto3" json:"video_id,omitempty"`
	// Optional.
	// (For OTT platform) Which episode is this video in this season.
	VideoIndex int32 `protobuf:"varint,31,opt,name=video_index,json=videoIndex,proto3" json:"video_index,omitempty"`
	// Optional.
	// (For OTT platform) Name of this episode.
	VideoName string `protobuf:"bytes,32,opt,name=video_name,json=videoName,proto3" json:"video_name,omitempty"`
	// Optional.
	// (For OTT platform) Total number of episodes in this season.
	VideoCount int32 `protobuf:"varint,33,opt,name=video_count,json=videoCount,proto3" json:"video_count,omitempty"`
	// Optional.
	// (For OTT platform) The type of video e.g. movie, series, reality show etc.
	VideoType string `protobuf:"bytes,34,opt,name=video_type,json=videoType,proto3" json:"video_type,omitempty"`
	// Base.
	// if content_type is video, this field is required, provide the length this video, in milliseconds.
	VideoDuration int64 `protobuf:"varint,35,opt,name=video_duration,json=videoDuration,proto3" json:"video_duration,omitempty"`
	// Optional.
	// The timestamp that the content is published.
	PublishTimestamp int64 `protobuf:"varint,36,opt,name=publish_timestamp,json=publishTimestamp,proto3" json:"publish_timestamp,omitempty"`
	// Optional.
	// (For OTT platform) The timestamp when this content can be shown to users.
	CopyrightStartTimestamp int64 `protobuf:"varint,37,opt,name=copyright_start_timestamp,json=copyrightStartTimestamp,proto3" json:"copyright_start_timestamp,omitempty"`
	// Optional.
	// (For OTT platform) The timestamp when this content stop being available to users.
	CopyrightEndTimestamp int64 `protobuf:"varint,38,opt,name=copyright_end_timestamp,json=copyrightEndTimestamp,proto3" json:"copyright_end_timestamp,omitempty"`
	// Optional.
	// (For OTT platform) The actors starring a movie/TV show.
	// Sample values are: ["Rachel Green", "Ross Geller"], etc.
	Actors []string `protobuf:"bytes,39,rep,name=actors,proto3" json:"actors,omitempty"`
	// Optional.
	// (For OTT platform) The source of the content.
	// The accepted values are ["self", "thirdparty", "other"].
	Source string `protobuf:"bytes,40,opt,name=source,proto3" json:"source,omitempty"`
	// Optional.
	// This is a catch-all field to pass all the additional information.
	// Please provide as much information as possible.
	Extra map[string]string `protobuf:"bytes,100,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Content) Reset() {
	*x = Content{}
	if protoimpl.UnsafeEnabled {
		mi := &file_byteplus_media_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Content) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Content) ProtoMessage() {}

func (x *Content) ProtoReflect() protoreflect.Message {
	mi := &file_byteplus_media_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Content.ProtoReflect.Descriptor instead.
func (*Content) Descriptor() ([]byte, []int) {
	return file_byteplus_media_proto_rawDescGZIP(), []int{4}
}

func (x *Content) GetContentId() string {
	if x != nil {
		return x.ContentId
	}
	return ""
}

func (x *Content) GetIsRecommendable() int32 {
	if x != nil {
		return x.IsRecommendable
	}
	return 0
}

func (x *Content) GetCategories() string {
	if x != nil {
		return x.Categories
	}
	return ""
}

func (x *Content) GetContentTitle() string {
	if x != nil {
		return x.ContentTitle
	}
	return ""
}

func (x *Content) GetContentType() string {
	if x != nil {
		return x.ContentType
	}
	return ""
}

func (x *Content) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Content) GetContentOwner() string {
	if x != nil {
		return x.ContentOwner
	}
	return ""
}

func (x *Content) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

func (x *Content) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *Content) GetListingPageDisplayTags() []string {
	if x != nil {
		return x.ListingPageDisplayTags
	}
	return nil
}

func (x *Content) GetDetailPageDisplayTags() []string {
	if x != nil {
		return x.DetailPageDisplayTags
	}
	return nil
}

func (x *Content) GetListingPageDisplayType() string {
	if x != nil {
		return x.ListingPageDisplayType
	}
	return ""
}

func (x *Content) GetCoverMultimediaUrl() string {
	if x != nil {
		return x.CoverMultimediaUrl
	}
	return ""
}

func (x *Content) GetUserRating() float64 {
	if x != nil {
		return x.UserRating
	}
	return 0
}

func (x *Content) GetViewsCount() int32 {
	if x != nil {
		return x.ViewsCount
	}
	return 0
}

func (x *Content) GetCommentsCount() int32 {
	if x != nil {
		return x.CommentsCount
	}
	return 0
}

func (x *Content) GetLikesCount() int32 {
	if x != nil {
		return x.LikesCount
	}
	return 0
}

func (x *Content) GetSharesCount() int32 {
	if x != nil {
		return x.SharesCount
	}
	return 0
}

func (x *Content) GetIsPaidContent() int32 {
	if x != nil {
		return x.IsPaidContent
	}
	return 0
}

func (x *Content) GetOriginPrice() int64 {
	if x != nil {
		return x.OriginPrice
	}
	return 0
}

func (x *Content) GetCurrentPrice() int64 {
	if x != nil {
		return x.CurrentPrice
	}
	return 0
}

func (x *Content) GetPublishRegion() string {
	if x != nil {
		return x.PublishRegion
	}
	return ""
}

func (x *Content) GetAvailableRegion() []string {
	if x != nil {
		return x.AvailableRegion
	}
	return nil
}

func (x *Content) GetEntityId() string {
	if x != nil {
		return x.EntityId
	}
	return ""
}

func (x *Content) GetEntityName() string {
	if x != nil {
		return x.EntityName
	}
	return ""
}

func (x *Content) GetSeriesId() string {
	if x != nil {
		return x.SeriesId
	}
	return ""
}

func (x *Content) GetSeriesIndex() int32 {
	if x != nil {
		return x.SeriesIndex
	}
	return 0
}

func (x *Content) GetSeriesName() string {
	if x != nil {
		return x.SeriesName
	}
	return ""
}

func (x *Content) GetSeriesCount() int32 {
	if x != nil {
		return x.SeriesCount
	}
	return 0
}

func (x *Content) GetVideoId() string {
	if x != nil {
		return x.VideoId
	}
	return ""
}

func (x *Content) GetVideoIndex() int32 {
	if x != nil {
		return x.VideoIndex
	}
	return 0
}

func (x *Content) GetVideoName() string {
	if x != nil {
		return x.VideoName
	}
	return ""
}

func (x *Content) GetVideoCount() int32 {
	if x != nil {
		return x.VideoCount
	}
	return 0
}

func (x *Content) GetVideoType() string {
	if x != nil {
		return x.VideoType
	}
	return ""
}

func (x *Content) GetVideoDuration() int64 {
	if x != nil {
		return x.VideoDuration
	}
	return 0
}

func (x *Content) GetPublishTimestamp() int64 {
	if x != nil {
		return x.PublishTimestamp
	}
	return 0
}

func (x *Content) GetCopyrightStartTimestamp() int64 {
	if x != nil {
		return x.CopyrightStartTimestamp
	}
	return 0
}

func (x *Content) GetCopyrightEndTimestamp() int64 {
	if x != nil {
		return x.CopyrightEndTimestamp
	}
	return 0
}

func (x *Content) GetActors() []string {
	if x != nil {
		return x.Actors
	}
	return nil
}

func (x *Content) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *Content) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

// Request proto for WriteContents method.
type WriteContentsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required.
	// A list of content to write. The max is 2000 items.
	Contents []*Content `protobuf:"bytes,1,rep,name=contents,proto3" json:"contents,omitempty"`
	// Optional.
	// This is a catch-all field to pass all the additional information.
	// Please provide as much information as possible.
	Extra map[string]string `protobuf:"bytes,100,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *WriteContentsRequest) Reset() {
	*x = WriteContentsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_byteplus_media_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WriteContentsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WriteContentsRequest) ProtoMessage() {}

func (x *WriteContentsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_byteplus_media_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WriteContentsRequest.ProtoReflect.Descriptor instead.
func (*WriteContentsRequest) Descriptor() ([]byte, []int) {
	return file_byteplus_media_proto_rawDescGZIP(), []int{5}
}

func (x *WriteContentsRequest) GetContents() []*Content {
	if x != nil {
		return x.Contents
	}
	return nil
}

func (x *WriteContentsRequest) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

// The content error.
type ContentError struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Output only.
	// The detailed error message.
	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	// Output only.
	// The content that failed.
	Content *Content `protobuf:"bytes,2,opt,name=content,proto3" json:"content,omitempty"`
}

func (x *ContentError) Reset() {
	*x = ContentError{}
	if protoimpl.UnsafeEnabled {
		mi := &file_byteplus_media_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContentError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContentError) ProtoMessage() {}

func (x *ContentError) ProtoReflect() protoreflect.Message {
	mi := &file_byteplus_media_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContentError.ProtoReflect.Descriptor instead.
func (*ContentError) Descriptor() ([]byte, []int) {
	return file_byteplus_media_proto_rawDescGZIP(), []int{6}
}

func (x *ContentError) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ContentError) GetContent() *Content {
	if x != nil {
		return x.Content
	}
	return nil
}

// The response for the WriteContents call.
type WriteContentsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Output only.
	// When `status.code` is 0, all payload are successfully written.
	// If `status.code` is 1001, `errors` is populated.
	// Other non-zero values indicate all payload failed.
	Status *protocol.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	// Output only.
	// This field is populated when `status.code` is 1001.
	// When populated, this field contains the errors.
	Errors []*ContentError `protobuf:"bytes,2,rep,name=errors,proto3" json:"errors,omitempty"`
}

func (x *WriteContentsResponse) Reset() {
	*x = WriteContentsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_byteplus_media_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WriteContentsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WriteContentsResponse) ProtoMessage() {}

func (x *WriteContentsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_byteplus_media_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WriteContentsResponse.ProtoReflect.Descriptor instead.
func (*WriteContentsResponse) Descriptor() ([]byte, []int) {
	return file_byteplus_media_proto_rawDescGZIP(), []int{7}
}

func (x *WriteContentsResponse) GetStatus() *protocol.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *WriteContentsResponse) GetErrors() []*ContentError {
	if x != nil {
		return x.Errors
	}
	return nil
}

// The proto that represents an user event.
type UserEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required.
	// The unique user identifier.
	// Please refer to `User.user_id` for the details.
	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// Required.
	// The user event type.
	// The acceptable values are:
	// "impression", "click", "play", "playover", "like", "comment",
	// "purchase", "add-to-cart", "remove-from-cart", "add-to-favorites",
	// "remove-from-favorites", "search", "stay-detail-page".
	//
	// Some of these event_types are required.
	// Here are the definitions:
	//
	// impression: Required. When a content is seen by a user.
	//             It can be client side (preferred) or server side.
	//             Note:
	//                * content_id must be non-empty.
	//                * scene_name must be non-empty.
	//                * if multiple contents are seen by a user together, send them in separate user events.
	//
	// click:      Required. When a content is clicked by a user.
	//             Note:
	//                * content_id must be non-empty.
	//                * scene_name must be non-empty.
	//
	// play:       Optional. If content_type is video, when a user plays a video.
	//             Note:
	//                * content_id must be non-empty.
	//
	// playover:   Optional. If content_type is video, when a user completes playing this video.
	//             Note:
	//                * content_id must be non-empty.
	//
	// like:       Optional. When a content is liked by a user.
	//             Note:
	//                * content_id must be non-empty.
	//
	// comment:    Optional. When a user leaves a comment on a content.
	//             Note:
	//                * content_id must be non-empty.
	//
	// purchase:   Required. When a user completed a purchase.
	//             Note:
	//                * content_id must be non-empty.
	//                * If one order contains multiple contents, send them in separate user events.
	//
	// add-to-cart:  Optional. When user adds a content to the shopping cart.
	//             Note:
	//                * content_id must be non-empty.
	//
	// remove-from-cart: Optional. When user removes a content to the shopping cart.
	//             Note:
	//                * content_id must be non-empty.
	//
	// add-to-favorites: Optional. When user adds a content to favorite list.
	//             Note:
	//                * content_id must be non-empty.
	//                *  if "favorite list" is not a feature for your platform you can report the "like" event directly,
	//                   no need to report the "add-to-favorites" event.
	//
	// remove-from-favorites: Optional. When user removes a content from favorite list.
	//             Note:
	//                * content_id must be non-empty.
	//
	// search:     Optional. The user search event.
	//             Note:
	//                * content_id must be non-empty.
	//                * query must be non-empty.
	//
	// stay-detail-page: Optional. When a user stays on a content detail page, report the user stay
	//             time on content details page.
	//             Note:
	//                * content_id must be non-empty.
	//                * detail_stay_time must be not-zero.
	//
	// Note: This field is only for the event type, the actual scene is kept
	// separately.
	EventType string `protobuf:"bytes,2,opt,name=event_type,json=eventType,proto3" json:"event_type,omitempty"`
	// Required.
	// The timestamp when the event happened.
	EventTimestamp int64 `protobuf:"varint,3,opt,name=event_timestamp,json=eventTimestamp,proto3" json:"event_timestamp,omitempty"`
	// Depends on event_type.
	// When event_type is search, this field should be empty. Otherwise it is required.
	ContentId string `protobuf:"bytes,4,opt,name=content_id,json=contentId,proto3" json:"content_id,omitempty"`
	// Optional.
	// The source strategy for this user event.
	// Acceptable values are "self", "byteplus", "other".
	// self   :  came from caller's own engine.
	// byteplus:  came from byteplus's engine.
	// other  :  came from the third-party engine.
	TrafficSource string `protobuf:"bytes,5,opt,name=traffic_source,json=trafficSource,proto3" json:"traffic_source,omitempty"`
	// Optional.
	// This will be provided by BytePlus,
	// to match this user event with the request_id when calling BytePlus' Predict API.
	RequestId string `protobuf:"bytes,6,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	// Optional.
	// This will be provided by BytePlus, it contains the detailed algo information from BytePlus.
	RecInfo string `protobuf:"bytes,7,opt,name=rec_info,json=recInfo,proto3" json:"rec_info,omitempty"`
	// Optional.
	// The identifier used to hook all the relevant events in a user session.
	AttributionToken string `protobuf:"bytes,8,opt,name=attribution_token,json=attributionToken,proto3" json:"attribution_token,omitempty"`
	// Depends on event_type.
	// The unique identifier for the scene.
	// It can be Home page, Search page, Details page, etc.
	// It is strongly recommended that you split the scene if possible.
	// Note:
	//  * If `event_type` is impression or click, this is required.
	//  * If `event type` is cart/favorite/purchase/search, this is optional.
	SceneName string `protobuf:"bytes,9,opt,name=scene_name,json=sceneName,proto3" json:"scene_name,omitempty"`
	// Optional.
	// The page number.
	// It can be:
	// 1. Users swipe the screen for X times then see the content.
	// 2. Users go to page X and see the content.
	// In this case, X is the page number.
	//
	// This should default to be 0. That means everything fits into 1 page.
	PageNumber int32 `protobuf:"varint,10,opt,name=page_number,json=pageNumber,proto3" json:"page_number,omitempty"`
	// Optional.
	// The offset starting from 1 within the page above.
	Offset int32 `protobuf:"varint,11,opt,name=offset,proto3" json:"offset,omitempty"`
	// Optional.
	// Accepted values are "0", "1", "2"
	//  "0": play from start.
	//  "1": continue play.
	//  "2": trial play.
	PlayType string `protobuf:"bytes,12,opt,name=play_type,json=playType,proto3" json:"play_type,omitempty"`
	// Optional.
	// For video content, the length of user watch time, in second.
	PlayDuration int64 `protobuf:"varint,13,opt,name=play_duration,json=playDuration,proto3" json:"play_duration,omitempty"`
	// Optional.
	// For video content, the starting point of user's watch,
	// e.g. if user starts watching from beginning,
	// this should be 0; if user starts watching from 2 min 30 seconds, this should be 150.
	StartTime int32 `protobuf:"varint,14,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	// Optional.
	// For video content, the end point of user's watch,
	// e.g. if user starts stops watching 5 min into the video this should be 300.
	EndTime int32 `protobuf:"varint,15,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	// Optional.
	// (For OTT platform) If this is a TV show with multiple seasons, id of the TV show
	// Note: if this content record is about a entity, no need to send its series and video information.
	EntityId string `protobuf:"bytes,16,opt,name=entity_id,json=entityId,proto3" json:"entity_id,omitempty"`
	// Optional.
	// (For OTT platform) If this is a TV show with multiple seasons, id of the season.
	// Note: if this content record is about a series,
	// send the series data and corresponding entity data ( entity_id and entity_name),
	// no need to send video related info.
	SeriesId string `protobuf:"bytes,17,opt,name=series_id,json=seriesId,proto3" json:"series_id,omitempty"`
	// Optional.
	// (For OTT platform) Id of the video in a series.
	VideoId string `protobuf:"bytes,18,opt,name=video_id,json=videoId,proto3" json:"video_id,omitempty"`
	// Optional.
	// On a content detail page,
	// if user impress/click on a recommended content, send the id of the main content.
	ParentContentId string `protobuf:"bytes,19,opt,name=parent_content_id,json=parentContentId,proto3" json:"parent_content_id,omitempty"`
	// Depends on event_type.
	// The stay time(in seconds) on detail page.
	// When event_type is stay-detail-page, this field must be non-zero.
	DetailStayTime int32 `protobuf:"varint,20,opt,name=detail_stay_time,json=detailStayTime,proto3" json:"detail_stay_time,omitempty"`
	// Depends on event_type.
	// This is required for the search event.
	// Please also provide this when the purchase/impression event follows the search event.
	Query string `protobuf:"bytes,21,opt,name=query,proto3" json:"query,omitempty"`
	// Required.
	// The platform used by the user.
	// The acceptable values are "app", "desktop-web", "mobile-web", "other".
	//  app: user use APP.
	//  desktop-web: user use desktop web.
	//  mobile-web: user use mobile web.
	Device string `protobuf:"bytes,22,opt,name=device,proto3" json:"device,omitempty"`
	// Optional.
	// The platform used by the user.
	// The acceptable values are "android", "ios", "windows", "other".
	OsType string `protobuf:"bytes,23,opt,name=os_type,json=osType,proto3" json:"os_type,omitempty"`
	// Optional.
	// Your application version.
	// e.g. V9.0.8.
	AppVersion string `protobuf:"bytes,24,opt,name=app_version,json=appVersion,proto3" json:"app_version,omitempty"`
	// Optional.
	// The device model.
	// e.g. "iPhone10", "Pixel 4".
	DeviceModel string `protobuf:"bytes,25,opt,name=device_model,json=deviceModel,proto3" json:"device_model,omitempty"`
	// Optional.
	// The brand of the device.
	// e.g. "Samsung".
	DeviceBrand string `protobuf:"bytes,26,opt,name=device_brand,json=deviceBrand,proto3" json:"device_brand,omitempty"`
	// Optional.
	// The operating system version.
	// e.g. "14.4.2".
	OsVersion string `protobuf:"bytes,27,opt,name=os_version,json=osVersion,proto3" json:"os_version,omitempty"`
	// Optional.
	// The type of the browser.
	// e.g. "chrome", "firefox", etc.
	BrowserType string `protobuf:"bytes,28,opt,name=browser_type,json=browserType,proto3" json:"browser_type,omitempty"`
	// Optional.
	// The UserAgent for the browser.
	UserAgent string `protobuf:"bytes,29,opt,name=user_agent,json=userAgent,proto3" json:"user_agent,omitempty"`
	// Optional.
	// The network used.
	// The acceptable values are "2g", "3g", "4g", "5g", "wifi", "other".
	Network string `protobuf:"bytes,30,opt,name=network,proto3" json:"network,omitempty"`
	// Optional.
	// This is a catch-all field to pass all the additional information.
	// Please provide as much information as possible.
	Extra map[string]string `protobuf:"bytes,100,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *UserEvent) Reset() {
	*x = UserEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_byteplus_media_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserEvent) ProtoMessage() {}

func (x *UserEvent) ProtoReflect() protoreflect.Message {
	mi := &file_byteplus_media_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserEvent.ProtoReflect.Descriptor instead.
func (*UserEvent) Descriptor() ([]byte, []int) {
	return file_byteplus_media_proto_rawDescGZIP(), []int{8}
}

func (x *UserEvent) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *UserEvent) GetEventType() string {
	if x != nil {
		return x.EventType
	}
	return ""
}

func (x *UserEvent) GetEventTimestamp() int64 {
	if x != nil {
		return x.EventTimestamp
	}
	return 0
}

func (x *UserEvent) GetContentId() string {
	if x != nil {
		return x.ContentId
	}
	return ""
}

func (x *UserEvent) GetTrafficSource() string {
	if x != nil {
		return x.TrafficSource
	}
	return ""
}

func (x *UserEvent) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *UserEvent) GetRecInfo() string {
	if x != nil {
		return x.RecInfo
	}
	return ""
}

func (x *UserEvent) GetAttributionToken() string {
	if x != nil {
		return x.AttributionToken
	}
	return ""
}

func (x *UserEvent) GetSceneName() string {
	if x != nil {
		return x.SceneName
	}
	return ""
}

func (x *UserEvent) GetPageNumber() int32 {
	if x != nil {
		return x.PageNumber
	}
	return 0
}

func (x *UserEvent) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *UserEvent) GetPlayType() string {
	if x != nil {
		return x.PlayType
	}
	return ""
}

func (x *UserEvent) GetPlayDuration() int64 {
	if x != nil {
		return x.PlayDuration
	}
	return 0
}

func (x *UserEvent) GetStartTime() int32 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *UserEvent) GetEndTime() int32 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *UserEvent) GetEntityId() string {
	if x != nil {
		return x.EntityId
	}
	return ""
}

func (x *UserEvent) GetSeriesId() string {
	if x != nil {
		return x.SeriesId
	}
	return ""
}

func (x *UserEvent) GetVideoId() string {
	if x != nil {
		return x.VideoId
	}
	return ""
}

func (x *UserEvent) GetParentContentId() string {
	if x != nil {
		return x.ParentContentId
	}
	return ""
}

func (x *UserEvent) GetDetailStayTime() int32 {
	if x != nil {
		return x.DetailStayTime
	}
	return 0
}

func (x *UserEvent) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

func (x *UserEvent) GetDevice() string {
	if x != nil {
		return x.Device
	}
	return ""
}

func (x *UserEvent) GetOsType() string {
	if x != nil {
		return x.OsType
	}
	return ""
}

func (x *UserEvent) GetAppVersion() string {
	if x != nil {
		return x.AppVersion
	}
	return ""
}

func (x *UserEvent) GetDeviceModel() string {
	if x != nil {
		return x.DeviceModel
	}
	return ""
}

func (x *UserEvent) GetDeviceBrand() string {
	if x != nil {
		return x.DeviceBrand
	}
	return ""
}

func (x *UserEvent) GetOsVersion() string {
	if x != nil {
		return x.OsVersion
	}
	return ""
}

func (x *UserEvent) GetBrowserType() string {
	if x != nil {
		return x.BrowserType
	}
	return ""
}

func (x *UserEvent) GetUserAgent() string {
	if x != nil {
		return x.UserAgent
	}
	return ""
}

func (x *UserEvent) GetNetwork() string {
	if x != nil {
		return x.Network
	}
	return ""
}

func (x *UserEvent) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

// Request proto for WriteUserEvents method.
type WriteUserEventsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. A list of user events to write.
	// The max # of events allowed is 2000.
	UserEvents []*UserEvent `protobuf:"bytes,1,rep,name=user_events,json=userEvents,proto3" json:"user_events,omitempty"`
	// Optional.
	// This is a catch-all field to pass all the additional information.
	// Please provide as much information as possible.
	Extra map[string]string `protobuf:"bytes,100,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *WriteUserEventsRequest) Reset() {
	*x = WriteUserEventsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_byteplus_media_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WriteUserEventsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WriteUserEventsRequest) ProtoMessage() {}

func (x *WriteUserEventsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_byteplus_media_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WriteUserEventsRequest.ProtoReflect.Descriptor instead.
func (*WriteUserEventsRequest) Descriptor() ([]byte, []int) {
	return file_byteplus_media_proto_rawDescGZIP(), []int{9}
}

func (x *WriteUserEventsRequest) GetUserEvents() []*UserEvent {
	if x != nil {
		return x.UserEvents
	}
	return nil
}

func (x *WriteUserEventsRequest) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

// The error detail for a single user event.
type UserEventError struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Output only.
	// The detailed error message.
	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	// Output only.
	// This is the exact same user proto that was passed in the request.
	UserEvent *UserEvent `protobuf:"bytes,2,opt,name=user_event,json=userEvent,proto3" json:"user_event,omitempty"`
}

func (x *UserEventError) Reset() {
	*x = UserEventError{}
	if protoimpl.UnsafeEnabled {
		mi := &file_byteplus_media_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserEventError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserEventError) ProtoMessage() {}

func (x *UserEventError) ProtoReflect() protoreflect.Message {
	mi := &file_byteplus_media_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserEventError.ProtoReflect.Descriptor instead.
func (*UserEventError) Descriptor() ([]byte, []int) {
	return file_byteplus_media_proto_rawDescGZIP(), []int{10}
}

func (x *UserEventError) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *UserEventError) GetUserEvent() *UserEvent {
	if x != nil {
		return x.UserEvent
	}
	return nil
}

// The response proto for WriteUserEvents call.
type WriteUserEventsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Output only.
	// When `status.code` is 0, all payload are successfully written.
	// If `status.code` is 1001, `errors` is populated.
	// Other non-zero values indicate all payload failed.
	Status *protocol.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	// Output only.
	// This field is populated when `status.code` is 1001.
	// When populated, this field contains the errors.
	Errors []*UserEventError `protobuf:"bytes,2,rep,name=errors,proto3" json:"errors,omitempty"`
}

func (x *WriteUserEventsResponse) Reset() {
	*x = WriteUserEventsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_byteplus_media_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WriteUserEventsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WriteUserEventsResponse) ProtoMessage() {}

func (x *WriteUserEventsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_byteplus_media_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WriteUserEventsResponse.ProtoReflect.Descriptor instead.
func (*WriteUserEventsResponse) Descriptor() ([]byte, []int) {
	return file_byteplus_media_proto_rawDescGZIP(), []int{11}
}

func (x *WriteUserEventsResponse) GetStatus() *protocol.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *WriteUserEventsResponse) GetErrors() []*UserEventError {
	if x != nil {
		return x.Errors
	}
	return nil
}

// The request proto for `Predict` call.
type PredictRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required.
	// This is same as `User.user_id`.
	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// Required.
	// The maximum number of contents returned.
	// The actual # of contents returned is the min of:
	// `size`
	// length(`context.candidates_content_ids`)
	// total # of contents with `is_recommendable=True`
	Size  int32                 `protobuf:"varint,2,opt,name=size,proto3" json:"size,omitempty"`
	Scene *PredictRequest_Scene `protobuf:"bytes,3,opt,name=scene,proto3" json:"scene,omitempty"`
	// Optional.
	// The context of this request.
	Context *PredictRequest_Context `protobuf:"bytes,4,opt,name=context,proto3" json:"context,omitempty"`
	// Optional.
	// This is a catch-all field to pass all the additional information.
	// Please provide as much information as possible.
	Extra map[string]string `protobuf:"bytes,100,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *PredictRequest) Reset() {
	*x = PredictRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_byteplus_media_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PredictRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PredictRequest) ProtoMessage() {}

func (x *PredictRequest) ProtoReflect() protoreflect.Message {
	mi := &file_byteplus_media_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PredictRequest.ProtoReflect.Descriptor instead.
func (*PredictRequest) Descriptor() ([]byte, []int) {
	return file_byteplus_media_proto_rawDescGZIP(), []int{12}
}

func (x *PredictRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *PredictRequest) GetSize() int32 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *PredictRequest) GetScene() *PredictRequest_Scene {
	if x != nil {
		return x.Scene
	}
	return nil
}

func (x *PredictRequest) GetContext() *PredictRequest_Context {
	if x != nil {
		return x.Context
	}
	return nil
}

func (x *PredictRequest) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

// A single predict call result.
type PredictResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Output only.
	// The list of predicted contents.
	ResponseContents []*PredictResult_ResponseContent `protobuf:"bytes,1,rep,name=response_contents,json=responseContents,proto3" json:"response_contents,omitempty"`
	// Output only.
	// Extra debug info.
	Extra map[string]string `protobuf:"bytes,100,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *PredictResult) Reset() {
	*x = PredictResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_byteplus_media_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PredictResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PredictResult) ProtoMessage() {}

func (x *PredictResult) ProtoReflect() protoreflect.Message {
	mi := &file_byteplus_media_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PredictResult.ProtoReflect.Descriptor instead.
func (*PredictResult) Descriptor() ([]byte, []int) {
	return file_byteplus_media_proto_rawDescGZIP(), []int{13}
}

func (x *PredictResult) GetResponseContents() []*PredictResult_ResponseContent {
	if x != nil {
		return x.ResponseContents
	}
	return nil
}

func (x *PredictResult) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

// The response proto the predict call.
type PredictResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Output only.
	// The status of the call.
	Status *protocol.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	// Output only.
	// This is same as `PredictRequest.request_id`.
	RequestId string `protobuf:"bytes,2,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	// Output only.
	// This is only populated when `PredictResponse.status.code` is not 0.
	Value *PredictResult `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *PredictResponse) Reset() {
	*x = PredictResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_byteplus_media_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PredictResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PredictResponse) ProtoMessage() {}

func (x *PredictResponse) ProtoReflect() protoreflect.Message {
	mi := &file_byteplus_media_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PredictResponse.ProtoReflect.Descriptor instead.
func (*PredictResponse) Descriptor() ([]byte, []int) {
	return file_byteplus_media_proto_rawDescGZIP(), []int{14}
}

func (x *PredictResponse) GetStatus() *protocol.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *PredictResponse) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *PredictResponse) GetValue() *PredictResult {
	if x != nil {
		return x.Value
	}
	return nil
}

// The request proto for AckServerImpressions call.
type AckServerImpressionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required.
	// This should be same as `PredictRequest.request_id`.
	PredictRequestId string `protobuf:"bytes,1,opt,name=predict_request_id,json=predictRequestId,proto3" json:"predict_request_id,omitempty"`
	// Required.
	// This should be same as `PredictRequest.user_id`.
	UserId string `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// Required.
	// This should be the traffic source.
	// Please refer to
	// [this](../docs/ways-to-improve-recommendation-performance#use-usereventrec_info-and-usereventtraffic_source) for more details.
	TrafficSource string `protobuf:"bytes,3,opt,name=traffic_source,json=trafficSource,proto3" json:"traffic_source,omitempty"`
	// Required.
	// The scene info.
	// Please make sure this is as close to PredictRequest.scene as possible.
	Scene *PredictRequest_Scene `protobuf:"bytes,4,opt,name=scene,proto3" json:"scene,omitempty"`
	// Required.
	// The list of altered contents.
	AlteredContents []*AckServerImpressionsRequest_AlteredContent `protobuf:"bytes,5,rep,name=altered_contents,json=alteredContents,proto3" json:"altered_contents,omitempty"`
	// Optional.
	// This is a catch-all field to pass all the additional information.
	// Please provide as much information as possible.
	Extra map[string]string `protobuf:"bytes,100,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *AckServerImpressionsRequest) Reset() {
	*x = AckServerImpressionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_byteplus_media_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AckServerImpressionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AckServerImpressionsRequest) ProtoMessage() {}

func (x *AckServerImpressionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_byteplus_media_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AckServerImpressionsRequest.ProtoReflect.Descriptor instead.
func (*AckServerImpressionsRequest) Descriptor() ([]byte, []int) {
	return file_byteplus_media_proto_rawDescGZIP(), []int{15}
}

func (x *AckServerImpressionsRequest) GetPredictRequestId() string {
	if x != nil {
		return x.PredictRequestId
	}
	return ""
}

func (x *AckServerImpressionsRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *AckServerImpressionsRequest) GetTrafficSource() string {
	if x != nil {
		return x.TrafficSource
	}
	return ""
}

func (x *AckServerImpressionsRequest) GetScene() *PredictRequest_Scene {
	if x != nil {
		return x.Scene
	}
	return nil
}

func (x *AckServerImpressionsRequest) GetAlteredContents() []*AckServerImpressionsRequest_AlteredContent {
	if x != nil {
		return x.AlteredContents
	}
	return nil
}

func (x *AckServerImpressionsRequest) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

// The response message for AckServerImpressions.
type AckServerImpressionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Output only.
	// The status of this response.
	Status *protocol.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *AckServerImpressionsResponse) Reset() {
	*x = AckServerImpressionsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_byteplus_media_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AckServerImpressionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AckServerImpressionsResponse) ProtoMessage() {}

func (x *AckServerImpressionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_byteplus_media_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AckServerImpressionsResponse.ProtoReflect.Descriptor instead.
func (*AckServerImpressionsResponse) Descriptor() ([]byte, []int) {
	return file_byteplus_media_proto_rawDescGZIP(), []int{16}
}

func (x *AckServerImpressionsResponse) GetStatus() *protocol.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

// Required.
// The scene for the recommendation.
type PredictRequest_Scene struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required.
	// This is same as `UserEvent.scene_name`.
	SceneName string `protobuf:"bytes,1,opt,name=scene_name,json=sceneName,proto3" json:"scene_name,omitempty"`
	// Optional.
	// The page number.
	// It can be:
	// 1. Users swipe the screen for X times then see the content.
	// 2. Users go to page X and see the content.
	// In this case, X is the page number.
	//
	// This should default to be 0. That means everything fits into 1 page.
	PageNumber int32 `protobuf:"varint,2,opt,name=page_number,json=pageNumber,proto3" json:"page_number,omitempty"`
	// Optional.
	// The offset starting from 1 within the page above.
	Offset int32 `protobuf:"varint,3,opt,name=offset,proto3" json:"offset,omitempty"`
}

func (x *PredictRequest_Scene) Reset() {
	*x = PredictRequest_Scene{}
	if protoimpl.UnsafeEnabled {
		mi := &file_byteplus_media_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PredictRequest_Scene) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PredictRequest_Scene) ProtoMessage() {}

func (x *PredictRequest_Scene) ProtoReflect() protoreflect.Message {
	mi := &file_byteplus_media_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PredictRequest_Scene.ProtoReflect.Descriptor instead.
func (*PredictRequest_Scene) Descriptor() ([]byte, []int) {
	return file_byteplus_media_proto_rawDescGZIP(), []int{12, 0}
}

func (x *PredictRequest_Scene) GetSceneName() string {
	if x != nil {
		return x.SceneName
	}
	return ""
}

func (x *PredictRequest_Scene) GetPageNumber() int32 {
	if x != nil {
		return x.PageNumber
	}
	return 0
}

func (x *PredictRequest_Scene) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

// The context of this request.
type PredictRequest_Context struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional.
	// This is only required for content details page.
	RootContent *Content `protobuf:"bytes,1,opt,name=root_content,json=rootContent,proto3" json:"root_content,omitempty"`
	// Optional.
	// The list of candidates for the recommendation.
	// If this is empty, all contents are the candidates.
	CandidateContentIds []string `protobuf:"bytes,3,rep,name=candidate_content_ids,json=candidateContentIds,proto3" json:"candidate_content_ids,omitempty"`
	// Required.
	// The platform used by the user.
	// The acceptable values are "app", "desktop-web", "mobile-web", "other".
	//  app: user use APP.
	//  desktop-web: user use desktop web.
	//  mobile-web: user use mobile web.
	Device string `protobuf:"bytes,22,opt,name=device,proto3" json:"device,omitempty"`
	// Optional.
	// The platform used by the user.
	// The acceptable values are "android", "ios", "windows", "other".
	OsType string `protobuf:"bytes,23,opt,name=os_type,json=osType,proto3" json:"os_type,omitempty"`
	// Optional.
	// Your application version.
	// e.g. V9.0.8.
	AppVersion string `protobuf:"bytes,24,opt,name=app_version,json=appVersion,proto3" json:"app_version,omitempty"`
	// Optional.
	// The device model.
	// e.g. "iPhone10", "Pixel 4".
	DeviceModel string `protobuf:"bytes,25,opt,name=device_model,json=deviceModel,proto3" json:"device_model,omitempty"`
	// Optional.
	// The brand of the device.
	// e.g. "Samsung".
	DeviceBrand string `protobuf:"bytes,26,opt,name=device_brand,json=deviceBrand,proto3" json:"device_brand,omitempty"`
	// Optional.
	// The operating system version.
	// e.g. "14.4.2".
	OsVersion string `protobuf:"bytes,27,opt,name=os_version,json=osVersion,proto3" json:"os_version,omitempty"`
	// Optional.
	// The type of the browser.
	// e.g. "chrome", "firefox", etc.
	BrowserType string `protobuf:"bytes,28,opt,name=browser_type,json=browserType,proto3" json:"browser_type,omitempty"`
	// Optional.
	// The UserAgent for the browser.
	UserAgent string `protobuf:"bytes,29,opt,name=user_agent,json=userAgent,proto3" json:"user_agent,omitempty"`
	// Optional.
	// The network used.
	// The acceptable values are "2g", "3g", "4g", "5g", "wifi", "other".
	Network string `protobuf:"bytes,30,opt,name=network,proto3" json:"network,omitempty"`
}

func (x *PredictRequest_Context) Reset() {
	*x = PredictRequest_Context{}
	if protoimpl.UnsafeEnabled {
		mi := &file_byteplus_media_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PredictRequest_Context) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PredictRequest_Context) ProtoMessage() {}

func (x *PredictRequest_Context) ProtoReflect() protoreflect.Message {
	mi := &file_byteplus_media_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PredictRequest_Context.ProtoReflect.Descriptor instead.
func (*PredictRequest_Context) Descriptor() ([]byte, []int) {
	return file_byteplus_media_proto_rawDescGZIP(), []int{12, 1}
}

func (x *PredictRequest_Context) GetRootContent() *Content {
	if x != nil {
		return x.RootContent
	}
	return nil
}

func (x *PredictRequest_Context) GetCandidateContentIds() []string {
	if x != nil {
		return x.CandidateContentIds
	}
	return nil
}

func (x *PredictRequest_Context) GetDevice() string {
	if x != nil {
		return x.Device
	}
	return ""
}

func (x *PredictRequest_Context) GetOsType() string {
	if x != nil {
		return x.OsType
	}
	return ""
}

func (x *PredictRequest_Context) GetAppVersion() string {
	if x != nil {
		return x.AppVersion
	}
	return ""
}

func (x *PredictRequest_Context) GetDeviceModel() string {
	if x != nil {
		return x.DeviceModel
	}
	return ""
}

func (x *PredictRequest_Context) GetDeviceBrand() string {
	if x != nil {
		return x.DeviceBrand
	}
	return ""
}

func (x *PredictRequest_Context) GetOsVersion() string {
	if x != nil {
		return x.OsVersion
	}
	return ""
}

func (x *PredictRequest_Context) GetBrowserType() string {
	if x != nil {
		return x.BrowserType
	}
	return ""
}

func (x *PredictRequest_Context) GetUserAgent() string {
	if x != nil {
		return x.UserAgent
	}
	return ""
}

func (x *PredictRequest_Context) GetNetwork() string {
	if x != nil {
		return x.Network
	}
	return ""
}

// The response of a content.
type PredictResult_ResponseContent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Output only.
	// The content id.
	// This is consistent with `Content.content_id`.
	ContentId string `protobuf:"bytes,1,opt,name=content_id,json=contentId,proto3" json:"content_id,omitempty"`
	// Output only.
	// This is the 1-based ranking of the content.
	Rank int32 `protobuf:"varint,2,opt,name=rank,proto3" json:"rank,omitempty"`
	// Output only.
	// The is the predicted CTR.
	Pctr float64 `protobuf:"fixed64,3,opt,name=pctr,proto3" json:"pctr,omitempty"`
	// Output only.
	// This is the predicted CVR.
	Pcvr float64 `protobuf:"fixed64,4,opt,name=pcvr,proto3" json:"pcvr,omitempty"`
	// Output only.
	// The strategy used for this particular recommendation result.
	// Please refer to [this](../docs/ways-to-improve-recommendation-performance#use-usereventrec_info-and-usereventtraffic_source) for more details.
	/// 只用作返回值。base64编码的字符串，记录了该次推荐的一些模型和策略信息，建议将此字段携带到行为数据中，用来辅助提升推荐效果。如base64编码不能满足要求，可联系对接同学调整编码方式。
	RecInfo string `protobuf:"bytes,5,opt,name=rec_info,json=recInfo,proto3" json:"rec_info,omitempty"`
	// Output only.
	// All the extra debug info here.
	Extra map[string]string `protobuf:"bytes,100,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *PredictResult_ResponseContent) Reset() {
	*x = PredictResult_ResponseContent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_byteplus_media_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PredictResult_ResponseContent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PredictResult_ResponseContent) ProtoMessage() {}

func (x *PredictResult_ResponseContent) ProtoReflect() protoreflect.Message {
	mi := &file_byteplus_media_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PredictResult_ResponseContent.ProtoReflect.Descriptor instead.
func (*PredictResult_ResponseContent) Descriptor() ([]byte, []int) {
	return file_byteplus_media_proto_rawDescGZIP(), []int{13, 0}
}

func (x *PredictResult_ResponseContent) GetContentId() string {
	if x != nil {
		return x.ContentId
	}
	return ""
}

func (x *PredictResult_ResponseContent) GetRank() int32 {
	if x != nil {
		return x.Rank
	}
	return 0
}

func (x *PredictResult_ResponseContent) GetPctr() float64 {
	if x != nil {
		return x.Pctr
	}
	return 0
}

func (x *PredictResult_ResponseContent) GetPcvr() float64 {
	if x != nil {
		return x.Pcvr
	}
	return 0
}

func (x *PredictResult_ResponseContent) GetRecInfo() string {
	if x != nil {
		return x.RecInfo
	}
	return ""
}

func (x *PredictResult_ResponseContent) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

// The content that was altered.
type AckServerImpressionsRequest_AlteredContent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required.
	// This is same as `Content.content_id`.
	ContentId string `protobuf:"bytes,1,opt,name=content_id,json=contentId,proto3" json:"content_id,omitempty"`
	// Required.
	// The final state of the content.
	// The acceptable values are "kept", "filtered", "inserted".
	// kept     : The content was kept as is.
	// filtered : The content is filtered by the caller's own logic.
	// inserted : The content is inserted by the caller's own logic.
	// filled   : The content is filled by the caller's own logic.
	AlteredReason string `protobuf:"bytes,2,opt,name=altered_reason,json=alteredReason,proto3" json:"altered_reason,omitempty"`
	// Required.
	// The final rank.
	// If this is unset (or 0), we assume it is filtered in actual impression.
	Rank int32 `protobuf:"varint,3,opt,name=rank,proto3" json:"rank,omitempty"`
	// Internal.
	// If `content_id` is a number, `content_id_hash` equals to `content_id`
	// If `content_id` is not a number, `content_id_hash` equals to `fnv(content_id)`
	ContentIdHash int64 `protobuf:"varint,100,opt,name=content_id_hash,json=contentIdHash,proto3" json:"content_id_hash,omitempty"`
}

func (x *AckServerImpressionsRequest_AlteredContent) Reset() {
	*x = AckServerImpressionsRequest_AlteredContent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_byteplus_media_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AckServerImpressionsRequest_AlteredContent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AckServerImpressionsRequest_AlteredContent) ProtoMessage() {}

func (x *AckServerImpressionsRequest_AlteredContent) ProtoReflect() protoreflect.Message {
	mi := &file_byteplus_media_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AckServerImpressionsRequest_AlteredContent.ProtoReflect.Descriptor instead.
func (*AckServerImpressionsRequest_AlteredContent) Descriptor() ([]byte, []int) {
	return file_byteplus_media_proto_rawDescGZIP(), []int{15, 0}
}

func (x *AckServerImpressionsRequest_AlteredContent) GetContentId() string {
	if x != nil {
		return x.ContentId
	}
	return ""
}

func (x *AckServerImpressionsRequest_AlteredContent) GetAlteredReason() string {
	if x != nil {
		return x.AlteredReason
	}
	return ""
}

func (x *AckServerImpressionsRequest_AlteredContent) GetRank() int32 {
	if x != nil {
		return x.Rank
	}
	return 0
}

func (x *AckServerImpressionsRequest_AlteredContent) GetContentIdHash() int64 {
	if x != nil {
		return x.ContentIdHash
	}
	return 0
}

var File_byteplus_media_proto protoreflect.FileDescriptor

var file_byteplus_media_proto_rawDesc = []byte{
	0x0a, 0x14, 0x62, 0x79, 0x74, 0x65, 0x70, 0x6c, 0x75, 0x73, 0x5f, 0x6d, 0x65, 0x64, 0x69, 0x61,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x18, 0x62, 0x79, 0x74, 0x65, 0x64, 0x61, 0x6e, 0x63,
	0x65, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x70, 0x6c, 0x75, 0x73, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61,
	0x1a, 0x15, 0x62, 0x79, 0x74, 0x65, 0x70, 0x6c, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x83, 0x05, 0x0a, 0x04, 0x55, 0x73, 0x65, 0x72,
	0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x67, 0x65, 0x6e,
	0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65,
	0x72, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x62, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x76, 0x69,
	0x65, 0x77, 0x5f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x09, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0b, 0x76, 0x69, 0x65, 0x77, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x2d, 0x0a,
	0x12, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x29, 0x0a, 0x10,
	0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68,
	0x69, 0x70, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x35, 0x0a, 0x16, 0x72, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x15, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x18,
	0x0a, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x69, 0x74, 0x79,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x69, 0x74, 0x79, 0x12, 0x28, 0x0a, 0x10,
	0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x5f, 0x6f, 0x72, 0x5f, 0x61, 0x72, 0x65, 0x61,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74,
	0x4f, 0x72, 0x41, 0x72, 0x65, 0x61, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x74, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x74, 0x63, 0x6f,
	0x64, 0x65, 0x12, 0x3f, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x64, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x29, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x62, 0x79,
	0x74, 0x65, 0x70, 0x6c, 0x75, 0x73, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78,
	0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xd1, 0x01,
	0x0a, 0x11, 0x57, 0x72, 0x69, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x34, 0x0a, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x62,
	0x79, 0x74, 0x65, 0x70, 0x6c, 0x75, 0x73, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x52, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x12, 0x4c, 0x0a, 0x05, 0x65, 0x78, 0x74,
	0x72, 0x61, 0x18, 0x64, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x64,
	0x61, 0x6e, 0x63, 0x65, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x70, 0x6c, 0x75, 0x73, 0x2e, 0x6d, 0x65,
	0x64, 0x69, 0x61, 0x2e, 0x57, 0x72, 0x69, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0x59, 0x0a, 0x09, 0x55, 0x73, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x18,
	0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x32, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x64, 0x61, 0x6e,
	0x63, 0x65, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x70, 0x6c, 0x75, 0x73, 0x2e, 0x6d, 0x65, 0x64, 0x69,
	0x61, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x22, 0x8c, 0x01, 0x0a,
	0x12, 0x57, 0x72, 0x69, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x39, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x2e,
	0x62, 0x79, 0x74, 0x65, 0x70, 0x6c, 0x75, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3b,
	0x0a, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x62, 0x79, 0x74, 0x65, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x70,
	0x6c, 0x75, 0x73, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x52, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x22, 0xd5, 0x0c, 0x0a, 0x07,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x69, 0x73, 0x5f, 0x72, 0x65, 0x63,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0f, 0x69, 0x73, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x62, 0x6c,
	0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65,
	0x73, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x4f, 0x77, 0x6e, 0x65, 0x72,
	0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x61, 0x67, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73,
	0x12, 0x39, 0x0a, 0x19, 0x6c, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x61, 0x67, 0x65,
	0x5f, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x74, 0x61, 0x67, 0x73, 0x18, 0x0a, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x16, 0x6c, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x67, 0x65,
	0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x54, 0x61, 0x67, 0x73, 0x12, 0x37, 0x0a, 0x18, 0x64,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x64, 0x69, 0x73, 0x70, 0x6c,
	0x61, 0x79, 0x5f, 0x74, 0x61, 0x67, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x09, 0x52, 0x15, 0x64,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x50, 0x61, 0x67, 0x65, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79,
	0x54, 0x61, 0x67, 0x73, 0x12, 0x39, 0x0a, 0x19, 0x6c, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x5f,
	0x70, 0x61, 0x67, 0x65, 0x5f, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x6c, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67,
	0x50, 0x61, 0x67, 0x65, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x30, 0x0a, 0x14, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x65,
	0x64, 0x69, 0x61, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x63,
	0x6f, 0x76, 0x65, 0x72, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x55, 0x72,
	0x6c, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x52, 0x61, 0x74, 0x69,
	0x6e, 0x67, 0x12, 0x1f, 0x0a, 0x0b, 0x76, 0x69, 0x65, 0x77, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x76, 0x69, 0x65, 0x77, 0x73, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x63, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x69,
	0x6b, 0x65, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0a, 0x6c, 0x69, 0x6b, 0x65, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x73,
	0x68, 0x61, 0x72, 0x65, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0b, 0x73, 0x68, 0x61, 0x72, 0x65, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x26,
	0x0a, 0x0f, 0x69, 0x73, 0x5f, 0x70, 0x61, 0x69, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x69, 0x73, 0x50, 0x61, 0x69, 0x64, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e,
	0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x6f, 0x72,
	0x69, 0x67, 0x69, 0x6e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x25,
	0x0a, 0x0e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e,
	0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x52,
	0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x10, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62,
	0x6c, 0x65, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x17, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e,
	0x12, 0x1b, 0x0a, 0x09, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x18, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x1f, 0x0a,
	0x0b, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x19, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b,
	0x0a, 0x09, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x1a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x73,
	0x65, 0x72, 0x69, 0x65, 0x73, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x1b, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1f,
	0x0a, 0x0b, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x1c, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x21, 0x0a, 0x0c, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x1d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x69, 0x64, 0x18, 0x1e,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x49, 0x64, 0x12, 0x1f, 0x0a,
	0x0b, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x1f, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0a, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1d,
	0x0a, 0x0a, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x20, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a,
	0x0b, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x21, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0a, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1d,
	0x0a, 0x0a, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x22, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x54, 0x79, 0x70, 0x65, 0x12, 0x25, 0x0a,
	0x0e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x23, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x44, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x11, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x24, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x10, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x12, 0x3a, 0x0a, 0x19, 0x63, 0x6f, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x25,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x17, 0x63, 0x6f, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68, 0x74, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x36, 0x0a,
	0x17, 0x63, 0x6f, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x26, 0x20, 0x01, 0x28, 0x03, 0x52, 0x15,
	0x63, 0x6f, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68, 0x74, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x18,
	0x27, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x28, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x42, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x64,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x64, 0x61, 0x6e, 0x63, 0x65,
	0x2e, 0x62, 0x79, 0x74, 0x65, 0x70, 0x6c, 0x75, 0x73, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74,
	0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0xe0, 0x01, 0x0a, 0x14, 0x57, 0x72, 0x69, 0x74, 0x65, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3d, 0x0a, 0x08,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x62, 0x79, 0x74, 0x65, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x70,
	0x6c, 0x75, 0x73, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x4f, 0x0a, 0x05, 0x65,
	0x78, 0x74, 0x72, 0x61, 0x18, 0x64, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x62, 0x79, 0x74,
	0x65, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x70, 0x6c, 0x75, 0x73, 0x2e,
	0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x57, 0x72, 0x69, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a,
	0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x65, 0x0a, 0x0c, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x3b, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x62, 0x79,
	0x74, 0x65, 0x70, 0x6c, 0x75, 0x73, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0x92, 0x01,
	0x0a, 0x15, 0x57, 0x72, 0x69, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x39, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x64, 0x61,
	0x6e, 0x63, 0x65, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x70, 0x6c, 0x75, 0x73, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x3e, 0x0a, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x26, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x62,
	0x79, 0x74, 0x65, 0x70, 0x6c, 0x75, 0x73, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x06, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x73, 0x22, 0xc1, 0x08, 0x0a, 0x09, 0x55, 0x73, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x25, 0x0a, 0x0e, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x5f, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69,
	0x63, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x65, 0x63, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x65, 0x63, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x2b, 0x0a, 0x11, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x61, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1d,
	0x0a, 0x0a, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a,
	0x0b, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x16,
	0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x64, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x70, 0x6c, 0x61, 0x79,
	0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12,
	0x1b, 0x0a, 0x09, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08,
	0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x69, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x76, 0x69, 0x64, 0x65, 0x6f, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x70, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x13, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0f, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x5f, 0x73, 0x74,
	0x61, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x64,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x53, 0x74, 0x61, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x16, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x6f,
	0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x73,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x70, 0x70, 0x5f, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x70, 0x70, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x5f, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6f,
	0x73, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x6f, 0x73, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x72,
	0x6f, 0x77, 0x73, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x62, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a,
	0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x18, 0x1d, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x44, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18,
	0x64, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x64, 0x61, 0x6e, 0x63,
	0x65, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x70, 0x6c, 0x75, 0x73, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a,
	0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xeb, 0x01, 0x0a, 0x16, 0x57, 0x72, 0x69, 0x74, 0x65,
	0x55, 0x73, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x44, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x64, 0x61, 0x6e,
	0x63, 0x65, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x70, 0x6c, 0x75, 0x73, 0x2e, 0x6d, 0x65, 0x64, 0x69,
	0x61, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x0a, 0x75, 0x73, 0x65,
	0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x51, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61,
	0x18, 0x64, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x64, 0x61, 0x6e,
	0x63, 0x65, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x70, 0x6c, 0x75, 0x73, 0x2e, 0x6d, 0x65, 0x64, 0x69,
	0x61, 0x2e, 0x57, 0x72, 0x69, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78,
	0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0x6e, 0x0a, 0x0e, 0x55, 0x73, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x42, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x64, 0x61, 0x6e, 0x63, 0x65,
	0x2e, 0x62, 0x79, 0x74, 0x65, 0x70, 0x6c, 0x75, 0x73, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x22, 0x96, 0x01, 0x0a, 0x17, 0x57, 0x72, 0x69, 0x74, 0x65, 0x55, 0x73,
	0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x39, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x62, 0x79, 0x74,
	0x65, 0x70, 0x6c, 0x75, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x40, 0x0a, 0x06, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x62, 0x79,
	0x74, 0x65, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x70, 0x6c, 0x75, 0x73,
	0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x22, 0xce, 0x06,
	0x0a, 0x0e, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x44, 0x0a,
	0x05, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x62,
	0x79, 0x74, 0x65, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x70, 0x6c, 0x75,
	0x73, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x52, 0x05, 0x73, 0x63,
	0x65, 0x6e, 0x65, 0x12, 0x4a, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x64, 0x61, 0x6e, 0x63, 0x65,
	0x2e, 0x62, 0x79, 0x74, 0x65, 0x70, 0x6c, 0x75, 0x73, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e,
	0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12,
	0x49, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x64, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33,
	0x2e, 0x62, 0x79, 0x74, 0x65, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x70,
	0x6c, 0x75, 0x73, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0x5f, 0x0a, 0x05, 0x53, 0x63,
	0x65, 0x6e, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x1a, 0x96, 0x03, 0x0a, 0x07,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x44, 0x0a, 0x0c, 0x72, 0x6f, 0x6f, 0x74, 0x5f,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x62, 0x79, 0x74, 0x65, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x70, 0x6c,
	0x75, 0x73, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x52, 0x0b, 0x72, 0x6f, 0x6f, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x32, 0x0a,
	0x15, 0x63, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x13, 0x63, 0x61,
	0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x49, 0x64,
	0x73, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x6f, 0x73, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x73, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x70, 0x70, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x70, 0x70, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x5f, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6f, 0x73, 0x5f,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6f,
	0x73, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x72, 0x6f, 0x77,
	0x73, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x62, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x97,
	0x04, 0x0a, 0x0d, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x12, 0x64, 0x0a, 0x11, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x62, 0x79,
	0x74, 0x65, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x70, 0x6c, 0x75, 0x73,
	0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x52, 0x10, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x48, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18,
	0x64, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x64, 0x61, 0x6e, 0x63,
	0x65, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x70, 0x6c, 0x75, 0x73, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61,
	0x2e, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e, 0x45,
	0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61,
	0x1a, 0x9b, 0x02, 0x0a, 0x0f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x63, 0x74, 0x72, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x70, 0x63, 0x74, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x70,
	0x63, 0x76, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x70, 0x63, 0x76, 0x72, 0x12,
	0x19, 0x0a, 0x08, 0x72, 0x65, 0x63, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x72, 0x65, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x58, 0x0a, 0x05, 0x65, 0x78,
	0x74, 0x72, 0x61, 0x18, 0x64, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x42, 0x2e, 0x62, 0x79, 0x74, 0x65,
	0x64, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x70, 0x6c, 0x75, 0x73, 0x2e, 0x6d,
	0x65, 0x64, 0x69, 0x61, 0x2e, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65,
	0x78, 0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x38,
	0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xaa, 0x01, 0x0a, 0x0f, 0x50, 0x72, 0x65,
	0x64, 0x69, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x39, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x62,
	0x79, 0x74, 0x65, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x70, 0x6c, 0x75,
	0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x3d, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x64, 0x61, 0x6e, 0x63,
	0x65, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x70, 0x6c, 0x75, 0x73, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61,
	0x2e, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xe9, 0x04, 0x0a, 0x1b, 0x41, 0x63, 0x6b, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x49, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74,
	0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x10, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e,
	0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x12, 0x44, 0x0a, 0x05, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x62,
	0x79, 0x74, 0x65, 0x70, 0x6c, 0x75, 0x73, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x50, 0x72,
	0x65, 0x64, 0x69, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x53, 0x63, 0x65,
	0x6e, 0x65, 0x52, 0x05, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x12, 0x6f, 0x0a, 0x10, 0x61, 0x6c, 0x74,
	0x65, 0x72, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x44, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x2e,
	0x62, 0x79, 0x74, 0x65, 0x70, 0x6c, 0x75, 0x73, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x41,
	0x63, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x41, 0x6c, 0x74, 0x65, 0x72,
	0x65, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x0f, 0x61, 0x6c, 0x74, 0x65, 0x72,
	0x65, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x56, 0x0a, 0x05, 0x65, 0x78,
	0x74, 0x72, 0x61, 0x18, 0x64, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x62, 0x79, 0x74, 0x65,
	0x64, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x70, 0x6c, 0x75, 0x73, 0x2e, 0x6d,
	0x65, 0x64, 0x69, 0x61, 0x2e, 0x41, 0x63, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x6d,
	0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74,
	0x72, 0x61, 0x1a, 0x92, 0x01, 0x0a, 0x0e, 0x41, 0x6c, 0x74, 0x65, 0x72, 0x65, 0x64, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x6c, 0x74, 0x65, 0x72, 0x65, 0x64, 0x5f,
	0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x6c,
	0x74, 0x65, 0x72, 0x65, 0x64, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x72,
	0x61, 0x6e, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x12,
	0x26, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x5f, 0x68, 0x61,
	0x73, 0x68, 0x18, 0x64, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x49, 0x64, 0x48, 0x61, 0x73, 0x68, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0x59, 0x0a, 0x1c, 0x41, 0x63, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x6d,
	0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x39, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x62, 0x79,
	0x74, 0x65, 0x70, 0x6c, 0x75, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x32, 0xd1, 0x04, 0x0a,
	0x14, 0x42, 0x79, 0x74, 0x65, 0x50, 0x6c, 0x75, 0x73, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x67, 0x0a, 0x0a, 0x57, 0x72, 0x69, 0x74, 0x65, 0x55, 0x73,
	0x65, 0x72, 0x73, 0x12, 0x2b, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x2e,
	0x62, 0x79, 0x74, 0x65, 0x70, 0x6c, 0x75, 0x73, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x57,
	0x72, 0x69, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x2c, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x62, 0x79, 0x74,
	0x65, 0x70, 0x6c, 0x75, 0x73, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x57, 0x72, 0x69, 0x74,
	0x65, 0x55, 0x73, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x70,
	0x0a, 0x0d, 0x57, 0x72, 0x69, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x12,
	0x2e, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x62, 0x79, 0x74, 0x65,
	0x70, 0x6c, 0x75, 0x73, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x57, 0x72, 0x69, 0x74, 0x65,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x2f, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x62, 0x79, 0x74, 0x65,
	0x70, 0x6c, 0x75, 0x73, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x57, 0x72, 0x69, 0x74, 0x65,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x76, 0x0a, 0x0f, 0x57, 0x72, 0x69, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x73, 0x12, 0x30, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x2e,
	0x62, 0x79, 0x74, 0x65, 0x70, 0x6c, 0x75, 0x73, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x57,
	0x72, 0x69, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x64, 0x61, 0x6e, 0x63,
	0x65, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x70, 0x6c, 0x75, 0x73, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61,
	0x2e, 0x57, 0x72, 0x69, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5e, 0x0a, 0x07, 0x50, 0x72, 0x65, 0x64,
	0x69, 0x63, 0x74, 0x12, 0x28, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x2e,
	0x62, 0x79, 0x74, 0x65, 0x70, 0x6c, 0x75, 0x73, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x50,
	0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e,
	0x62, 0x79, 0x74, 0x65, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x70, 0x6c,
	0x75, 0x73, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x85, 0x01, 0x0a, 0x14, 0x41, 0x63, 0x6b,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x35, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x62, 0x79,
	0x74, 0x65, 0x70, 0x6c, 0x75, 0x73, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x41, 0x63, 0x6b,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x36, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x64,
	0x61, 0x6e, 0x63, 0x65, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x70, 0x6c, 0x75, 0x73, 0x2e, 0x6d, 0x65,
	0x64, 0x69, 0x61, 0x2e, 0x41, 0x63, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x6d, 0x70,
	0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x42, 0x4c, 0x0a, 0x1b, 0x62, 0x79, 0x74, 0x65, 0x70, 0x6c, 0x75, 0x73, 0x2e, 0x73, 0x64, 0x6b,
	0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5a,
	0x2d, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x62, 0x79, 0x74, 0x65,
	0x70, 0x6c, 0x75, 0x73, 0x2d, 0x73, 0x64, 0x6b, 0x2f, 0x73, 0x64, 0x6b, 0x2d, 0x67, 0x6f, 0x2f,
	0x6d, 0x65, 0x64, 0x69, 0x61, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_byteplus_media_proto_rawDescOnce sync.Once
	file_byteplus_media_proto_rawDescData = file_byteplus_media_proto_rawDesc
)

func file_byteplus_media_proto_rawDescGZIP() []byte {
	file_byteplus_media_proto_rawDescOnce.Do(func() {
		file_byteplus_media_proto_rawDescData = protoimpl.X.CompressGZIP(file_byteplus_media_proto_rawDescData)
	})
	return file_byteplus_media_proto_rawDescData
}

var file_byteplus_media_proto_msgTypes = make([]protoimpl.MessageInfo, 31)
var file_byteplus_media_proto_goTypes = []interface{}{
	(*User)(nil),                          // 0: bytedance.byteplus.media.User
	(*WriteUsersRequest)(nil),             // 1: bytedance.byteplus.media.WriteUsersRequest
	(*UserError)(nil),                     // 2: bytedance.byteplus.media.UserError
	(*WriteUsersResponse)(nil),            // 3: bytedance.byteplus.media.WriteUsersResponse
	(*Content)(nil),                       // 4: bytedance.byteplus.media.Content
	(*WriteContentsRequest)(nil),          // 5: bytedance.byteplus.media.WriteContentsRequest
	(*ContentError)(nil),                  // 6: bytedance.byteplus.media.ContentError
	(*WriteContentsResponse)(nil),         // 7: bytedance.byteplus.media.WriteContentsResponse
	(*UserEvent)(nil),                     // 8: bytedance.byteplus.media.UserEvent
	(*WriteUserEventsRequest)(nil),        // 9: bytedance.byteplus.media.WriteUserEventsRequest
	(*UserEventError)(nil),                // 10: bytedance.byteplus.media.UserEventError
	(*WriteUserEventsResponse)(nil),       // 11: bytedance.byteplus.media.WriteUserEventsResponse
	(*PredictRequest)(nil),                // 12: bytedance.byteplus.media.PredictRequest
	(*PredictResult)(nil),                 // 13: bytedance.byteplus.media.PredictResult
	(*PredictResponse)(nil),               // 14: bytedance.byteplus.media.PredictResponse
	(*AckServerImpressionsRequest)(nil),   // 15: bytedance.byteplus.media.AckServerImpressionsRequest
	(*AckServerImpressionsResponse)(nil),  // 16: bytedance.byteplus.media.AckServerImpressionsResponse
	nil,                                   // 17: bytedance.byteplus.media.User.ExtraEntry
	nil,                                   // 18: bytedance.byteplus.media.WriteUsersRequest.ExtraEntry
	nil,                                   // 19: bytedance.byteplus.media.Content.ExtraEntry
	nil,                                   // 20: bytedance.byteplus.media.WriteContentsRequest.ExtraEntry
	nil,                                   // 21: bytedance.byteplus.media.UserEvent.ExtraEntry
	nil,                                   // 22: bytedance.byteplus.media.WriteUserEventsRequest.ExtraEntry
	(*PredictRequest_Scene)(nil),          // 23: bytedance.byteplus.media.PredictRequest.Scene
	(*PredictRequest_Context)(nil),        // 24: bytedance.byteplus.media.PredictRequest.Context
	nil,                                   // 25: bytedance.byteplus.media.PredictRequest.ExtraEntry
	(*PredictResult_ResponseContent)(nil), // 26: bytedance.byteplus.media.PredictResult.ResponseContent
	nil,                                   // 27: bytedance.byteplus.media.PredictResult.ExtraEntry
	nil,                                   // 28: bytedance.byteplus.media.PredictResult.ResponseContent.ExtraEntry
	(*AckServerImpressionsRequest_AlteredContent)(nil), // 29: bytedance.byteplus.media.AckServerImpressionsRequest.AlteredContent
	nil,                     // 30: bytedance.byteplus.media.AckServerImpressionsRequest.ExtraEntry
	(*protocol.Status)(nil), // 31: bytedance.byteplus.common.Status
}
var file_byteplus_media_proto_depIdxs = []int32{
	17, // 0: bytedance.byteplus.media.User.extra:type_name -> bytedance.byteplus.media.User.ExtraEntry
	0,  // 1: bytedance.byteplus.media.WriteUsersRequest.users:type_name -> bytedance.byteplus.media.User
	18, // 2: bytedance.byteplus.media.WriteUsersRequest.extra:type_name -> bytedance.byteplus.media.WriteUsersRequest.ExtraEntry
	0,  // 3: bytedance.byteplus.media.UserError.user:type_name -> bytedance.byteplus.media.User
	31, // 4: bytedance.byteplus.media.WriteUsersResponse.status:type_name -> bytedance.byteplus.common.Status
	2,  // 5: bytedance.byteplus.media.WriteUsersResponse.errors:type_name -> bytedance.byteplus.media.UserError
	19, // 6: bytedance.byteplus.media.Content.extra:type_name -> bytedance.byteplus.media.Content.ExtraEntry
	4,  // 7: bytedance.byteplus.media.WriteContentsRequest.contents:type_name -> bytedance.byteplus.media.Content
	20, // 8: bytedance.byteplus.media.WriteContentsRequest.extra:type_name -> bytedance.byteplus.media.WriteContentsRequest.ExtraEntry
	4,  // 9: bytedance.byteplus.media.ContentError.content:type_name -> bytedance.byteplus.media.Content
	31, // 10: bytedance.byteplus.media.WriteContentsResponse.status:type_name -> bytedance.byteplus.common.Status
	6,  // 11: bytedance.byteplus.media.WriteContentsResponse.errors:type_name -> bytedance.byteplus.media.ContentError
	21, // 12: bytedance.byteplus.media.UserEvent.extra:type_name -> bytedance.byteplus.media.UserEvent.ExtraEntry
	8,  // 13: bytedance.byteplus.media.WriteUserEventsRequest.user_events:type_name -> bytedance.byteplus.media.UserEvent
	22, // 14: bytedance.byteplus.media.WriteUserEventsRequest.extra:type_name -> bytedance.byteplus.media.WriteUserEventsRequest.ExtraEntry
	8,  // 15: bytedance.byteplus.media.UserEventError.user_event:type_name -> bytedance.byteplus.media.UserEvent
	31, // 16: bytedance.byteplus.media.WriteUserEventsResponse.status:type_name -> bytedance.byteplus.common.Status
	10, // 17: bytedance.byteplus.media.WriteUserEventsResponse.errors:type_name -> bytedance.byteplus.media.UserEventError
	23, // 18: bytedance.byteplus.media.PredictRequest.scene:type_name -> bytedance.byteplus.media.PredictRequest.Scene
	24, // 19: bytedance.byteplus.media.PredictRequest.context:type_name -> bytedance.byteplus.media.PredictRequest.Context
	25, // 20: bytedance.byteplus.media.PredictRequest.extra:type_name -> bytedance.byteplus.media.PredictRequest.ExtraEntry
	26, // 21: bytedance.byteplus.media.PredictResult.response_contents:type_name -> bytedance.byteplus.media.PredictResult.ResponseContent
	27, // 22: bytedance.byteplus.media.PredictResult.extra:type_name -> bytedance.byteplus.media.PredictResult.ExtraEntry
	31, // 23: bytedance.byteplus.media.PredictResponse.status:type_name -> bytedance.byteplus.common.Status
	13, // 24: bytedance.byteplus.media.PredictResponse.value:type_name -> bytedance.byteplus.media.PredictResult
	23, // 25: bytedance.byteplus.media.AckServerImpressionsRequest.scene:type_name -> bytedance.byteplus.media.PredictRequest.Scene
	29, // 26: bytedance.byteplus.media.AckServerImpressionsRequest.altered_contents:type_name -> bytedance.byteplus.media.AckServerImpressionsRequest.AlteredContent
	30, // 27: bytedance.byteplus.media.AckServerImpressionsRequest.extra:type_name -> bytedance.byteplus.media.AckServerImpressionsRequest.ExtraEntry
	31, // 28: bytedance.byteplus.media.AckServerImpressionsResponse.status:type_name -> bytedance.byteplus.common.Status
	4,  // 29: bytedance.byteplus.media.PredictRequest.Context.root_content:type_name -> bytedance.byteplus.media.Content
	28, // 30: bytedance.byteplus.media.PredictResult.ResponseContent.extra:type_name -> bytedance.byteplus.media.PredictResult.ResponseContent.ExtraEntry
	1,  // 31: bytedance.byteplus.media.BytePlusMediaService.WriteUsers:input_type -> bytedance.byteplus.media.WriteUsersRequest
	5,  // 32: bytedance.byteplus.media.BytePlusMediaService.WriteContents:input_type -> bytedance.byteplus.media.WriteContentsRequest
	9,  // 33: bytedance.byteplus.media.BytePlusMediaService.WriteUserEvents:input_type -> bytedance.byteplus.media.WriteUserEventsRequest
	12, // 34: bytedance.byteplus.media.BytePlusMediaService.Predict:input_type -> bytedance.byteplus.media.PredictRequest
	15, // 35: bytedance.byteplus.media.BytePlusMediaService.AckServerImpressions:input_type -> bytedance.byteplus.media.AckServerImpressionsRequest
	3,  // 36: bytedance.byteplus.media.BytePlusMediaService.WriteUsers:output_type -> bytedance.byteplus.media.WriteUsersResponse
	7,  // 37: bytedance.byteplus.media.BytePlusMediaService.WriteContents:output_type -> bytedance.byteplus.media.WriteContentsResponse
	11, // 38: bytedance.byteplus.media.BytePlusMediaService.WriteUserEvents:output_type -> bytedance.byteplus.media.WriteUserEventsResponse
	14, // 39: bytedance.byteplus.media.BytePlusMediaService.Predict:output_type -> bytedance.byteplus.media.PredictResponse
	16, // 40: bytedance.byteplus.media.BytePlusMediaService.AckServerImpressions:output_type -> bytedance.byteplus.media.AckServerImpressionsResponse
	36, // [36:41] is the sub-list for method output_type
	31, // [31:36] is the sub-list for method input_type
	31, // [31:31] is the sub-list for extension type_name
	31, // [31:31] is the sub-list for extension extendee
	0,  // [0:31] is the sub-list for field type_name
}

func init() { file_byteplus_media_proto_init() }
func file_byteplus_media_proto_init() {
	if File_byteplus_media_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_byteplus_media_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*User); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_byteplus_media_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WriteUsersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_byteplus_media_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserError); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_byteplus_media_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WriteUsersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_byteplus_media_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Content); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_byteplus_media_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WriteContentsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_byteplus_media_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContentError); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_byteplus_media_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WriteContentsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_byteplus_media_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_byteplus_media_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WriteUserEventsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_byteplus_media_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserEventError); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_byteplus_media_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WriteUserEventsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_byteplus_media_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PredictRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_byteplus_media_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PredictResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_byteplus_media_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PredictResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_byteplus_media_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AckServerImpressionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_byteplus_media_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AckServerImpressionsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_byteplus_media_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PredictRequest_Scene); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_byteplus_media_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PredictRequest_Context); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_byteplus_media_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PredictResult_ResponseContent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_byteplus_media_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AckServerImpressionsRequest_AlteredContent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_byteplus_media_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   31,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_byteplus_media_proto_goTypes,
		DependencyIndexes: file_byteplus_media_proto_depIdxs,
		MessageInfos:      file_byteplus_media_proto_msgTypes,
	}.Build()
	File_byteplus_media_proto = out.File
	file_byteplus_media_proto_rawDesc = nil
	file_byteplus_media_proto_goTypes = nil
	file_byteplus_media_proto_depIdxs = nil
}
