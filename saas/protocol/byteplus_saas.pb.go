// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.18.1
// source: byteplus_saas.proto

package protocol

import (
	protocol "github.com/byteplus-sdk/sdk-go/common/protocol"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// The product proto.
type Product struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required.
	// The unique identifier for the product.
	// [link to best practices on deciding product ids](./ways-to-improve-recommendation-performance)
	ProductId string `protobuf:"bytes,1,opt,name=product_id,json=productId,proto3" json:"product_id,omitempty"`
	// Required.
	// The categorical information of the product.
	// Missing this will significantly hurt the performance.
	// For example, if a product has "Shoes -> Men's Shoes -> Basketball Shoes"
	// This should be:
	// [
	//   {"category_depth":1,
	//    "category_nodes": [{"id_or_name":"Shoes"}] },
	//   {"category_depth":2,
	//    "category_nodes": [{"id_or_name":"Men's Shoes"}] },
	//   {"category_depth":3,
	//    "category_nodes": [{"id_or_name":"Basketball Shoes"}] },
	// ]
	// If a product belongs to 2 different categories,
	// "Shoes -> Men's shoes" and "Sports -> Basketball"
	// then
	//
	// [
	//   {"category_depth":1,
	//    "category_nodes": [{"id_or_name":"Shoes"},
	//                       {"id_or_name":"Sports"}] },
	//   {"category_depth":2,
	//    "category_nodes": [{"id_or_name":"Men's shoes"},
	//                       {"id_or_name":"Basketball"}] },
	// ]
	Categories []*Product_Category `protobuf:"bytes,2,rep,name=categories,proto3" json:"categories,omitempty"`
	// Required.
	// Missing this will significantly hurt the performance.
	// The order should be asending on depth.
	// For example, if a product belongs to "Adidas -> Yeezy",
	// this field should be:
	// [
	//   {"brand_depth": 1, "id_or_name":"Adidas"},
	//   {"brand_depth": 2, "id_or_name":"Yeezy"},
	// ]
	Brands []*Product_Brand `protobuf:"bytes,3,rep,name=brands,proto3" json:"brands,omitempty"`
	// Required.
	// The product price info.
	// Please make sure the accuracy and recency.
	Price *Product_Price `protobuf:"bytes,4,opt,name=price,proto3" json:"price,omitempty"`
	// Required.
	// True if the product is recommendable (result in `Predict` call).
	// Note: Any change of this takes up to 1 hour to take effect.
	// Note: Even if a product isn't recommendable, please still send this to us.
	// This is because that users might interact with such products historically,
	// therefore it provides reasonably strong signals.
	IsRecommendable bool `protobuf:"varint,5,opt,name=is_recommendable,json=isRecommendable,proto3" json:"is_recommendable,omitempty"`
	// Required.
	// The product title.
	Title string `protobuf:"bytes,6,opt,name=title,proto3" json:"title,omitempty"`
	// Optional.
	// The product quality score.
	// Note: this is different than user ratings.
	// It is normally computed as a composite score considering many factors,
	// including sales, customer feedback, information completeness, etc.
	// This score should be normalized to [1.0, 5.0]
	QualityScore float64 `protobuf:"fixed64,7,opt,name=quality_score,json=qualityScore,proto3" json:"quality_score,omitempty"`
	// Optional.
	// The tags given by the seller for this product.
	// This is used to lift the performance.
	// Sample values are: "New", "Summer", "Clearance", etc.
	Tags []string `protobuf:"bytes,8,rep,name=tags,proto3" json:"tags,omitempty"`
	// Optional.
	// The display information of the product.
	Display *Product_Display `protobuf:"bytes,9,opt,name=display,proto3" json:"display,omitempty"`
	// Optional.
	// The product specs.
	ProductSpec *Product_ProductSpec `protobuf:"bytes,10,opt,name=product_spec,json=productSpec,proto3" json:"product_spec,omitempty"`
	// Optional.
	// The seller proto.
	Seller *Product_Seller `protobuf:"bytes,11,opt,name=seller,proto3" json:"seller,omitempty"`
	// Optional.
	// This is a catch-all field to pass all the additional information.
	// Please provide as much information as possible.
	Extra map[string]string `protobuf:"bytes,100,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Product) Reset() {
	*x = Product{}
	if protoimpl.UnsafeEnabled {
		mi := &file_byteplus_saas_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Product) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Product) ProtoMessage() {}

func (x *Product) ProtoReflect() protoreflect.Message {
	mi := &file_byteplus_saas_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Product.ProtoReflect.Descriptor instead.
func (*Product) Descriptor() ([]byte, []int) {
	return file_byteplus_saas_proto_rawDescGZIP(), []int{0}
}

func (x *Product) GetProductId() string {
	if x != nil {
		return x.ProductId
	}
	return ""
}

func (x *Product) GetCategories() []*Product_Category {
	if x != nil {
		return x.Categories
	}
	return nil
}

func (x *Product) GetBrands() []*Product_Brand {
	if x != nil {
		return x.Brands
	}
	return nil
}

func (x *Product) GetPrice() *Product_Price {
	if x != nil {
		return x.Price
	}
	return nil
}

func (x *Product) GetIsRecommendable() bool {
	if x != nil {
		return x.IsRecommendable
	}
	return false
}

func (x *Product) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Product) GetQualityScore() float64 {
	if x != nil {
		return x.QualityScore
	}
	return 0
}

func (x *Product) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *Product) GetDisplay() *Product_Display {
	if x != nil {
		return x.Display
	}
	return nil
}

func (x *Product) GetProductSpec() *Product_ProductSpec {
	if x != nil {
		return x.ProductSpec
	}
	return nil
}

func (x *Product) GetSeller() *Product_Seller {
	if x != nil {
		return x.Seller
	}
	return nil
}

func (x *Product) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

// The scene where the event happened.
type Scene struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required.
	// The unique identifier for the scene.
	// It can be Home page, Search page, Details page, etc.
	// It is strongly recommended that you split the scene if possible.
	SceneName string `protobuf:"bytes,1,opt,name=scene_name,json=sceneName,proto3" json:"scene_name,omitempty"`
	// Optional.
	// The page number.
	// It can be:
	// 1. Users swipe the screen for X times then see the product.
	// 2. Users go to page X and see the product.
	// In this case, X is the page number.
	//
	// This should default to be 0. That means everything fits into 1 page.
	PageNumber int32 `protobuf:"varint,2,opt,name=page_number,json=pageNumber,proto3" json:"page_number,omitempty"`
	// Optional.
	// The offset (1-based) within the page above.
	Offset int32 `protobuf:"varint,3,opt,name=offset,proto3" json:"offset,omitempty"`
}

func (x *Scene) Reset() {
	*x = Scene{}
	if protoimpl.UnsafeEnabled {
		mi := &file_byteplus_saas_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Scene) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Scene) ProtoMessage() {}

func (x *Scene) ProtoReflect() protoreflect.Message {
	mi := &file_byteplus_saas_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Scene.ProtoReflect.Descriptor instead.
func (*Scene) Descriptor() ([]byte, []int) {
	return file_byteplus_saas_proto_rawDescGZIP(), []int{1}
}

func (x *Scene) GetSceneName() string {
	if x != nil {
		return x.SceneName
	}
	return ""
}

func (x *Scene) GetPageNumber() int32 {
	if x != nil {
		return x.PageNumber
	}
	return 0
}

func (x *Scene) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

// The device proto.
type Device struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required.
	// The platform used by the user.
	// The acceptable values are "app", "desktop-web", "mobile-web", "other".
	// app: user use APP
	// desktop-web: user use desktop web
	// mobile-web: user use mobile web
	Platform string `protobuf:"bytes,1,opt,name=platform,proto3" json:"platform,omitempty"`
	// Optional.
	// The platform used by the user.
	// The acceptable values are "android", "ios", "windows", "other"
	// and "other".
	OsType string `protobuf:"bytes,2,opt,name=os_type,json=osType,proto3" json:"os_type,omitempty"`
	// Optional.
	// Your application version.
	// e.g. V9.0.8.
	AppVersion string `protobuf:"bytes,3,opt,name=app_version,json=appVersion,proto3" json:"app_version,omitempty"`
	// Optional.
	// The device model.
	// e.g. "iPhone10", "Pixel 4".
	DeviceModel string `protobuf:"bytes,4,opt,name=device_model,json=deviceModel,proto3" json:"device_model,omitempty"`
	// Optional.
	// The brand of the device.
	// e.g. "Samsung"
	DeviceBrand string `protobuf:"bytes,5,opt,name=device_brand,json=deviceBrand,proto3" json:"device_brand,omitempty"`
	// Optional.
	// The operating system version.
	// e.g. "14.4.2"
	OsVersion string `protobuf:"bytes,6,opt,name=os_version,json=osVersion,proto3" json:"os_version,omitempty"`
	// Optional.
	// The type of the browser.
	// e.g. "chrome", "firefox", etc.
	BrowserType string `protobuf:"bytes,7,opt,name=browser_type,json=browserType,proto3" json:"browser_type,omitempty"`
	// Optional.
	// The UserAgent for the browser.
	UserAgent string `protobuf:"bytes,8,opt,name=user_agent,json=userAgent,proto3" json:"user_agent,omitempty"`
	// Optional.
	// The network used.
	// The acceptable values are "2g", "3g", "4g", "5g", "wifi", "other".
	Network string `protobuf:"bytes,9,opt,name=network,proto3" json:"network,omitempty"`
}

func (x *Device) Reset() {
	*x = Device{}
	if protoimpl.UnsafeEnabled {
		mi := &file_byteplus_saas_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Device) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Device) ProtoMessage() {}

func (x *Device) ProtoReflect() protoreflect.Message {
	mi := &file_byteplus_saas_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Device.ProtoReflect.Descriptor instead.
func (*Device) Descriptor() ([]byte, []int) {
	return file_byteplus_saas_proto_rawDescGZIP(), []int{2}
}

func (x *Device) GetPlatform() string {
	if x != nil {
		return x.Platform
	}
	return ""
}

func (x *Device) GetOsType() string {
	if x != nil {
		return x.OsType
	}
	return ""
}

func (x *Device) GetAppVersion() string {
	if x != nil {
		return x.AppVersion
	}
	return ""
}

func (x *Device) GetDeviceModel() string {
	if x != nil {
		return x.DeviceModel
	}
	return ""
}

func (x *Device) GetDeviceBrand() string {
	if x != nil {
		return x.DeviceBrand
	}
	return ""
}

func (x *Device) GetOsVersion() string {
	if x != nil {
		return x.OsVersion
	}
	return ""
}

func (x *Device) GetBrowserType() string {
	if x != nil {
		return x.BrowserType
	}
	return ""
}

func (x *Device) GetUserAgent() string {
	if x != nil {
		return x.UserAgent
	}
	return ""
}

func (x *Device) GetNetwork() string {
	if x != nil {
		return x.Network
	}
	return ""
}

// Summary of error messages in imported data processing
type DataError struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Detail error message, which should be in English.
	// Example, "An unexpected value XXX is included in the XXX field, only ["xx", "yy", "zz"] can be accepted"
	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	// Specific abnormal data
	Data string `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *DataError) Reset() {
	*x = DataError{}
	if protoimpl.UnsafeEnabled {
		mi := &file_byteplus_saas_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataError) ProtoMessage() {}

func (x *DataError) ProtoReflect() protoreflect.Message {
	mi := &file_byteplus_saas_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataError.ProtoReflect.Descriptor instead.
func (*DataError) Descriptor() ([]byte, []int) {
	return file_byteplus_saas_proto_rawDescGZIP(), []int{3}
}

func (x *DataError) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *DataError) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

type WriteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Task execution result.
	// when status.code is 0, no exception occurred during execution, and all writing was successful
	Status *protocol.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	// When status.code is 1206, errors has a value.
	// Some data may fail to be processed during the writing process, and all failure information will be returned through errors.
	// If status.code is not 0, but errors has no value, it means that all data is Write failed
	Errors []*DataError `protobuf:"bytes,2,rep,name=errors,proto3" json:"errors,omitempty"`
}

func (x *WriteResponse) Reset() {
	*x = WriteResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_byteplus_saas_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WriteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WriteResponse) ProtoMessage() {}

func (x *WriteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_byteplus_saas_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WriteResponse.ProtoReflect.Descriptor instead.
func (*WriteResponse) Descriptor() ([]byte, []int) {
	return file_byteplus_saas_proto_rawDescGZIP(), []int{4}
}

func (x *WriteResponse) GetStatus() *protocol.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *WriteResponse) GetErrors() []*DataError {
	if x != nil {
		return x.Errors
	}
	return nil
}

// general write request,supported import realtime data
type WriteDataRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required
	// Id of the recommendation project.
	ProjectId string `protobuf:"bytes,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	// Required
	// The stage of importing data，Corresponding to the three synchronization stages of the recommendation platform
	// Possible type values:
	// "trial":Test data/pre-synchronization stage
	// "historical":Historical data synchronization stage
	// "incremental":Incremental real-time data synchronization stage
	Stage string `protobuf:"bytes,2,opt,name=stage,proto3" json:"stage,omitempty"`
	// Required
	// Array of json strings.
	// Each element of the array is a json serialized string of customer data.
	Data []string `protobuf:"bytes,10,rep,name=data,proto3" json:"data,omitempty"`
	// Optional.
	// This is a catch-all field to pass all the additional information.
	// Please provide as much information as possible.
	Extra map[string]string `protobuf:"bytes,100,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *WriteDataRequest) Reset() {
	*x = WriteDataRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_byteplus_saas_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WriteDataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WriteDataRequest) ProtoMessage() {}

func (x *WriteDataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_byteplus_saas_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WriteDataRequest.ProtoReflect.Descriptor instead.
func (*WriteDataRequest) Descriptor() ([]byte, []int) {
	return file_byteplus_saas_proto_rawDescGZIP(), []int{5}
}

func (x *WriteDataRequest) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *WriteDataRequest) GetStage() string {
	if x != nil {
		return x.Stage
	}
	return ""
}

func (x *WriteDataRequest) GetData() []string {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *WriteDataRequest) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

// The request proto for `Predict` call.
type PredictRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required
	// Id of the recommendation project.
	ProjectId string `protobuf:"bytes,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	// Required
	// Recommended model unique identification.
	ModelId string `protobuf:"bytes,2,opt,name=model_id,json=modelId,proto3" json:"model_id,omitempty"`
	// Required.
	// This is same as `User.user_id`.
	UserId string `protobuf:"bytes,10,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// Required.
	// The maximum number of products returned.
	// The actual # of products returned is the min of:
	// `size`
	// length(`context.candidates_product_ids`)
	// total # of products with `is_recommendable=True`
	Size int32 `protobuf:"varint,11,opt,name=size,proto3" json:"size,omitempty"`
	// Required.
	// The scene for the recommendation.
	Scene *Scene `protobuf:"bytes,12,opt,name=scene,proto3" json:"scene,omitempty"`
	// Optional.
	// The context of this request.
	Context *PredictRequest_Context `protobuf:"bytes,13,opt,name=context,proto3" json:"context,omitempty"`
	// Optional.
	// This is a catch-all field to pass all the additional information.
	// Please provide as much information as possible.
	Extra map[string]string `protobuf:"bytes,100,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *PredictRequest) Reset() {
	*x = PredictRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_byteplus_saas_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PredictRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PredictRequest) ProtoMessage() {}

func (x *PredictRequest) ProtoReflect() protoreflect.Message {
	mi := &file_byteplus_saas_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PredictRequest.ProtoReflect.Descriptor instead.
func (*PredictRequest) Descriptor() ([]byte, []int) {
	return file_byteplus_saas_proto_rawDescGZIP(), []int{6}
}

func (x *PredictRequest) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *PredictRequest) GetModelId() string {
	if x != nil {
		return x.ModelId
	}
	return ""
}

func (x *PredictRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *PredictRequest) GetSize() int32 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *PredictRequest) GetScene() *Scene {
	if x != nil {
		return x.Scene
	}
	return nil
}

func (x *PredictRequest) GetContext() *PredictRequest_Context {
	if x != nil {
		return x.Context
	}
	return nil
}

func (x *PredictRequest) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

// A single predict call result.
type PredictResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Output only.
	// The list of predicted products.
	ResponseProducts []*PredictResult_ResponseProduct `protobuf:"bytes,1,rep,name=response_products,json=responseProducts,proto3" json:"response_products,omitempty"`
	// Output only.
	// Extra debug info.
	Extra map[string]string `protobuf:"bytes,100,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *PredictResult) Reset() {
	*x = PredictResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_byteplus_saas_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PredictResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PredictResult) ProtoMessage() {}

func (x *PredictResult) ProtoReflect() protoreflect.Message {
	mi := &file_byteplus_saas_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PredictResult.ProtoReflect.Descriptor instead.
func (*PredictResult) Descriptor() ([]byte, []int) {
	return file_byteplus_saas_proto_rawDescGZIP(), []int{7}
}

func (x *PredictResult) GetResponseProducts() []*PredictResult_ResponseProduct {
	if x != nil {
		return x.ResponseProducts
	}
	return nil
}

func (x *PredictResult) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

// The response proto the predict call.
type PredictResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Output only.
	// The status of the call.
	Status *protocol.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	// Output only.
	// This is same as `PredictRequest.request_id`.
	RequestId string `protobuf:"bytes,2,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	// Output only.
	// This is only populated when `PredictResponse.status.code` is not 0.
	Value *PredictResult `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *PredictResponse) Reset() {
	*x = PredictResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_byteplus_saas_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PredictResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PredictResponse) ProtoMessage() {}

func (x *PredictResponse) ProtoReflect() protoreflect.Message {
	mi := &file_byteplus_saas_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PredictResponse.ProtoReflect.Descriptor instead.
func (*PredictResponse) Descriptor() ([]byte, []int) {
	return file_byteplus_saas_proto_rawDescGZIP(), []int{8}
}

func (x *PredictResponse) GetStatus() *protocol.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *PredictResponse) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *PredictResponse) GetValue() *PredictResult {
	if x != nil {
		return x.Value
	}
	return nil
}

// The request proto for AckServerImpressions call.
type AckServerImpressionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required
	// Id of the recommendation project.
	ProjectId string `protobuf:"bytes,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	// Required
	// Recommended model unique identification.
	ModelId string `protobuf:"bytes,2,opt,name=model_id,json=modelId,proto3" json:"model_id,omitempty"`
	// Required.
	// This should be same as `PredictRequest.request_id`.
	PredictRequestId string `protobuf:"bytes,10,opt,name=predict_request_id,json=predictRequestId,proto3" json:"predict_request_id,omitempty"`
	// Required.
	// This should be same as `PredictRequest.user_id`.
	UserId string `protobuf:"bytes,11,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// Required.
	// This should be the traffic source.
	TrafficSource string `protobuf:"bytes,12,opt,name=traffic_source,json=trafficSource,proto3" json:"traffic_source,omitempty"`
	// Required.
	// The scene info.
	// Please make sure this is as close to UserEvent.scene as possible.
	Scene *Scene `protobuf:"bytes,13,opt,name=scene,proto3" json:"scene,omitempty"`
	// Required.
	// The list of altered products.
	AlteredProducts []*AckServerImpressionsRequest_AlteredProduct `protobuf:"bytes,14,rep,name=altered_products,json=alteredProducts,proto3" json:"altered_products,omitempty"`
}

func (x *AckServerImpressionsRequest) Reset() {
	*x = AckServerImpressionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_byteplus_saas_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AckServerImpressionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AckServerImpressionsRequest) ProtoMessage() {}

func (x *AckServerImpressionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_byteplus_saas_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AckServerImpressionsRequest.ProtoReflect.Descriptor instead.
func (*AckServerImpressionsRequest) Descriptor() ([]byte, []int) {
	return file_byteplus_saas_proto_rawDescGZIP(), []int{9}
}

func (x *AckServerImpressionsRequest) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *AckServerImpressionsRequest) GetModelId() string {
	if x != nil {
		return x.ModelId
	}
	return ""
}

func (x *AckServerImpressionsRequest) GetPredictRequestId() string {
	if x != nil {
		return x.PredictRequestId
	}
	return ""
}

func (x *AckServerImpressionsRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *AckServerImpressionsRequest) GetTrafficSource() string {
	if x != nil {
		return x.TrafficSource
	}
	return ""
}

func (x *AckServerImpressionsRequest) GetScene() *Scene {
	if x != nil {
		return x.Scene
	}
	return nil
}

func (x *AckServerImpressionsRequest) GetAlteredProducts() []*AckServerImpressionsRequest_AlteredProduct {
	if x != nil {
		return x.AlteredProducts
	}
	return nil
}

// The response message for AckServerImpressions.
type AckServerImpressionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Output only.
	// The status of this response.
	Status *protocol.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *AckServerImpressionsResponse) Reset() {
	*x = AckServerImpressionsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_byteplus_saas_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AckServerImpressionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AckServerImpressionsResponse) ProtoMessage() {}

func (x *AckServerImpressionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_byteplus_saas_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AckServerImpressionsResponse.ProtoReflect.Descriptor instead.
func (*AckServerImpressionsResponse) Descriptor() ([]byte, []int) {
	return file_byteplus_saas_proto_rawDescGZIP(), []int{10}
}

func (x *AckServerImpressionsResponse) GetStatus() *protocol.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

// The category proto.
type Product_Category struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required.
	// The depth of the category.
	// This is consecutive (1-based) and ascending.
	CategoryDepth int32 `protobuf:"varint,1,opt,name=category_depth,json=categoryDepth,proto3" json:"category_depth,omitempty"`
	// Required.
	// The category nodes belong to the same depth.
	CategoryNodes []*Product_Category_CategoryNode `protobuf:"bytes,2,rep,name=category_nodes,json=categoryNodes,proto3" json:"category_nodes,omitempty"`
}

func (x *Product_Category) Reset() {
	*x = Product_Category{}
	if protoimpl.UnsafeEnabled {
		mi := &file_byteplus_saas_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Product_Category) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Product_Category) ProtoMessage() {}

func (x *Product_Category) ProtoReflect() protoreflect.Message {
	mi := &file_byteplus_saas_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Product_Category.ProtoReflect.Descriptor instead.
func (*Product_Category) Descriptor() ([]byte, []int) {
	return file_byteplus_saas_proto_rawDescGZIP(), []int{0, 0}
}

func (x *Product_Category) GetCategoryDepth() int32 {
	if x != nil {
		return x.CategoryDepth
	}
	return 0
}

func (x *Product_Category) GetCategoryNodes() []*Product_Category_CategoryNode {
	if x != nil {
		return x.CategoryNodes
	}
	return nil
}

// The brand proto.
type Product_Brand struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required.
	// The brand depth. This is consecutive (1-based) and ascending.
	BrandDepth int32 `protobuf:"varint,1,opt,name=brand_depth,json=brandDepth,proto3" json:"brand_depth,omitempty"`
	// Required.
	// The id or name of the brand at this depth.
	IdOrName string `protobuf:"bytes,2,opt,name=id_or_name,json=idOrName,proto3" json:"id_or_name,omitempty"`
}

func (x *Product_Brand) Reset() {
	*x = Product_Brand{}
	if protoimpl.UnsafeEnabled {
		mi := &file_byteplus_saas_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Product_Brand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Product_Brand) ProtoMessage() {}

func (x *Product_Brand) ProtoReflect() protoreflect.Message {
	mi := &file_byteplus_saas_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Product_Brand.ProtoReflect.Descriptor instead.
func (*Product_Brand) Descriptor() ([]byte, []int) {
	return file_byteplus_saas_proto_rawDescGZIP(), []int{0, 1}
}

func (x *Product_Brand) GetBrandDepth() int32 {
	if x != nil {
		return x.BrandDepth
	}
	return 0
}

func (x *Product_Brand) GetIdOrName() string {
	if x != nil {
		return x.IdOrName
	}
	return ""
}

// The price proto.
// Please make sure the products that need to be ranked together
// have the same currency.
type Product_Price struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required.
	// The current price in cents.
	// e.g. $100.12 should be 10012 here.
	CurrentPrice int64 `protobuf:"varint,1,opt,name=current_price,json=currentPrice,proto3" json:"current_price,omitempty"`
	// Required.
	// The original price in cents.
	// e.g. $100.12 should be 10012 here.
	OriginPrice int64 `protobuf:"varint,2,opt,name=origin_price,json=originPrice,proto3" json:"origin_price,omitempty"`
}

func (x *Product_Price) Reset() {
	*x = Product_Price{}
	if protoimpl.UnsafeEnabled {
		mi := &file_byteplus_saas_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Product_Price) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Product_Price) ProtoMessage() {}

func (x *Product_Price) ProtoReflect() protoreflect.Message {
	mi := &file_byteplus_saas_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Product_Price.ProtoReflect.Descriptor instead.
func (*Product_Price) Descriptor() ([]byte, []int) {
	return file_byteplus_saas_proto_rawDescGZIP(), []int{0, 2}
}

func (x *Product_Price) GetCurrentPrice() int64 {
	if x != nil {
		return x.CurrentPrice
	}
	return 0
}

func (x *Product_Price) GetOriginPrice() int64 {
	if x != nil {
		return x.OriginPrice
	}
	return 0
}

// The product display information.
type Product_Display struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional.
	// The tags visible to the users on the listing page.
	// Please fill as much as possible.
	// Sample values are: "best seller", "hot sales", etc.
	ListingPageDisplayTags []string `protobuf:"bytes,1,rep,name=listing_page_display_tags,json=listingPageDisplayTags,proto3" json:"listing_page_display_tags,omitempty"`
	// Optional.
	// The tags visible in the details page.
	// Please fill as much as possible.
	// Sample values are: "free shipping", "1 year guarantee", etc
	DetailPageDisplayTags []string `protobuf:"bytes,2,rep,name=detail_page_display_tags,json=detailPageDisplayTags,proto3" json:"detail_page_display_tags,omitempty"`
	// Optional.
	// The product display media type in ths listing page.
	// The only acceptable values are ["image", "video", "other"].
	ListingPageDisplayType string `protobuf:"bytes,3,opt,name=listing_page_display_type,json=listingPageDisplayType,proto3" json:"listing_page_display_type,omitempty"`
	// Optional.
	// When `listing_page_display_type` is one of the multi-media types,
	// put the url here.
	CoverMultimediaUrl string `protobuf:"bytes,4,opt,name=cover_multimedia_url,json=coverMultimediaUrl,proto3" json:"cover_multimedia_url,omitempty"`
}

func (x *Product_Display) Reset() {
	*x = Product_Display{}
	if protoimpl.UnsafeEnabled {
		mi := &file_byteplus_saas_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Product_Display) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Product_Display) ProtoMessage() {}

func (x *Product_Display) ProtoReflect() protoreflect.Message {
	mi := &file_byteplus_saas_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Product_Display.ProtoReflect.Descriptor instead.
func (*Product_Display) Descriptor() ([]byte, []int) {
	return file_byteplus_saas_proto_rawDescGZIP(), []int{0, 3}
}

func (x *Product_Display) GetListingPageDisplayTags() []string {
	if x != nil {
		return x.ListingPageDisplayTags
	}
	return nil
}

func (x *Product_Display) GetDetailPageDisplayTags() []string {
	if x != nil {
		return x.DetailPageDisplayTags
	}
	return nil
}

func (x *Product_Display) GetListingPageDisplayType() string {
	if x != nil {
		return x.ListingPageDisplayType
	}
	return ""
}

func (x *Product_Display) GetCoverMultimediaUrl() string {
	if x != nil {
		return x.CoverMultimediaUrl
	}
	return ""
}

// The detailed product specs.
type Product_ProductSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required.
	// The product group id.
	// For example, the beer (same brand) might have 6-pack, 12-pack, etc,
	// each has a different `product_id`, then they should have the
	// `same product_group_id`
	ProductGroupId string `protobuf:"bytes,1,opt,name=product_group_id,json=productGroupId,proto3" json:"product_group_id,omitempty"`
	// Optional.
	// The rating given by the users.
	// The value is normalized to [0.0, 5.0].
	UserRating float64 `protobuf:"fixed64,2,opt,name=user_rating,json=userRating,proto3" json:"user_rating,omitempty"`
	// Optional.
	// The # of comments for this product.
	CommentCount int32 `protobuf:"varint,3,opt,name=comment_count,json=commentCount,proto3" json:"comment_count,omitempty"`
	// Optional.
	// The source of the product.
	// The accepted values are ["self", "thirdparty", "other"].
	Source string `protobuf:"bytes,4,opt,name=source,proto3" json:"source,omitempty"`
	// Optional.
	// The time that the product is on sales.
	PublishTimestamp int64 `protobuf:"varint,5,opt,name=publish_timestamp,json=publishTimestamp,proto3" json:"publish_timestamp,omitempty"`
}

func (x *Product_ProductSpec) Reset() {
	*x = Product_ProductSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_byteplus_saas_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Product_ProductSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Product_ProductSpec) ProtoMessage() {}

func (x *Product_ProductSpec) ProtoReflect() protoreflect.Message {
	mi := &file_byteplus_saas_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Product_ProductSpec.ProtoReflect.Descriptor instead.
func (*Product_ProductSpec) Descriptor() ([]byte, []int) {
	return file_byteplus_saas_proto_rawDescGZIP(), []int{0, 4}
}

func (x *Product_ProductSpec) GetProductGroupId() string {
	if x != nil {
		return x.ProductGroupId
	}
	return ""
}

func (x *Product_ProductSpec) GetUserRating() float64 {
	if x != nil {
		return x.UserRating
	}
	return 0
}

func (x *Product_ProductSpec) GetCommentCount() int32 {
	if x != nil {
		return x.CommentCount
	}
	return 0
}

func (x *Product_ProductSpec) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *Product_ProductSpec) GetPublishTimestamp() int64 {
	if x != nil {
		return x.PublishTimestamp
	}
	return 0
}

// Seller info.
type Product_Seller struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required.
	// The id for the seller.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Optional.
	// The seller's level.
	// The sample values are "gold", "silver", etc.
	SellerLevel string `protobuf:"bytes,2,opt,name=seller_level,json=sellerLevel,proto3" json:"seller_level,omitempty"`
	// Optional.
	// The seller's rating.
	// Normalized to [0.0, 5.0].
	SellerRating float64 `protobuf:"fixed64,3,opt,name=seller_rating,json=sellerRating,proto3" json:"seller_rating,omitempty"`
}

func (x *Product_Seller) Reset() {
	*x = Product_Seller{}
	if protoimpl.UnsafeEnabled {
		mi := &file_byteplus_saas_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Product_Seller) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Product_Seller) ProtoMessage() {}

func (x *Product_Seller) ProtoReflect() protoreflect.Message {
	mi := &file_byteplus_saas_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Product_Seller.ProtoReflect.Descriptor instead.
func (*Product_Seller) Descriptor() ([]byte, []int) {
	return file_byteplus_saas_proto_rawDescGZIP(), []int{0, 5}
}

func (x *Product_Seller) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Product_Seller) GetSellerLevel() string {
	if x != nil {
		return x.SellerLevel
	}
	return ""
}

func (x *Product_Seller) GetSellerRating() float64 {
	if x != nil {
		return x.SellerRating
	}
	return 0
}

// The single node of the category.
type Product_Category_CategoryNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required.
	// The unique identifier of the category.
	IdOrName string `protobuf:"bytes,1,opt,name=id_or_name,json=idOrName,proto3" json:"id_or_name,omitempty"`
}

func (x *Product_Category_CategoryNode) Reset() {
	*x = Product_Category_CategoryNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_byteplus_saas_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Product_Category_CategoryNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Product_Category_CategoryNode) ProtoMessage() {}

func (x *Product_Category_CategoryNode) ProtoReflect() protoreflect.Message {
	mi := &file_byteplus_saas_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Product_Category_CategoryNode.ProtoReflect.Descriptor instead.
func (*Product_Category_CategoryNode) Descriptor() ([]byte, []int) {
	return file_byteplus_saas_proto_rawDescGZIP(), []int{0, 0, 0}
}

func (x *Product_Category_CategoryNode) GetIdOrName() string {
	if x != nil {
		return x.IdOrName
	}
	return ""
}

// The context of this request.
type PredictRequest_Context struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional.
	// This is only required for product details page.
	RootProduct *Product `protobuf:"bytes,1,opt,name=root_product,json=rootProduct,proto3" json:"root_product,omitempty"`
	// Optional.
	// Make sure this is as close to `UserEvent.device` as possible.
	Device *Device `protobuf:"bytes,2,opt,name=device,proto3" json:"device,omitempty"`
	// Optional.
	// The list of candidates for the recommendation.
	// If this is empty, all products are the candidates.
	CandidateProductIds []string `protobuf:"bytes,3,rep,name=candidate_product_ids,json=candidateProductIds,proto3" json:"candidate_product_ids,omitempty"`
}

func (x *PredictRequest_Context) Reset() {
	*x = PredictRequest_Context{}
	if protoimpl.UnsafeEnabled {
		mi := &file_byteplus_saas_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PredictRequest_Context) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PredictRequest_Context) ProtoMessage() {}

func (x *PredictRequest_Context) ProtoReflect() protoreflect.Message {
	mi := &file_byteplus_saas_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PredictRequest_Context.ProtoReflect.Descriptor instead.
func (*PredictRequest_Context) Descriptor() ([]byte, []int) {
	return file_byteplus_saas_proto_rawDescGZIP(), []int{6, 0}
}

func (x *PredictRequest_Context) GetRootProduct() *Product {
	if x != nil {
		return x.RootProduct
	}
	return nil
}

func (x *PredictRequest_Context) GetDevice() *Device {
	if x != nil {
		return x.Device
	}
	return nil
}

func (x *PredictRequest_Context) GetCandidateProductIds() []string {
	if x != nil {
		return x.CandidateProductIds
	}
	return nil
}

// The response of a product.
type PredictResult_ResponseProduct struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Output only.
	// The product id.
	// This is consistent with `Product.product_id`.
	ProductId string `protobuf:"bytes,1,opt,name=product_id,json=productId,proto3" json:"product_id,omitempty"`
	// Output only.
	// This is the 1-based ranking of the product.
	Rank int32 `protobuf:"varint,2,opt,name=rank,proto3" json:"rank,omitempty"`
	// Output only.
	// The is the predicted CTR.
	Pctr float64 `protobuf:"fixed64,3,opt,name=pctr,proto3" json:"pctr,omitempty"`
	// Output only.
	// This is the predicted CVR.
	Pcvr float64 `protobuf:"fixed64,4,opt,name=pcvr,proto3" json:"pcvr,omitempty"`
	// Output only.
	// The strategy used for this particular recommendation result.
	RecInfo string `protobuf:"bytes,5,opt,name=rec_info,json=recInfo,proto3" json:"rec_info,omitempty"`
	// Output only.
	// All the extra debug info here.
	Extra map[string]string `protobuf:"bytes,100,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *PredictResult_ResponseProduct) Reset() {
	*x = PredictResult_ResponseProduct{}
	if protoimpl.UnsafeEnabled {
		mi := &file_byteplus_saas_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PredictResult_ResponseProduct) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PredictResult_ResponseProduct) ProtoMessage() {}

func (x *PredictResult_ResponseProduct) ProtoReflect() protoreflect.Message {
	mi := &file_byteplus_saas_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PredictResult_ResponseProduct.ProtoReflect.Descriptor instead.
func (*PredictResult_ResponseProduct) Descriptor() ([]byte, []int) {
	return file_byteplus_saas_proto_rawDescGZIP(), []int{7, 0}
}

func (x *PredictResult_ResponseProduct) GetProductId() string {
	if x != nil {
		return x.ProductId
	}
	return ""
}

func (x *PredictResult_ResponseProduct) GetRank() int32 {
	if x != nil {
		return x.Rank
	}
	return 0
}

func (x *PredictResult_ResponseProduct) GetPctr() float64 {
	if x != nil {
		return x.Pctr
	}
	return 0
}

func (x *PredictResult_ResponseProduct) GetPcvr() float64 {
	if x != nil {
		return x.Pcvr
	}
	return 0
}

func (x *PredictResult_ResponseProduct) GetRecInfo() string {
	if x != nil {
		return x.RecInfo
	}
	return ""
}

func (x *PredictResult_ResponseProduct) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

// The product that was altered.
type AckServerImpressionsRequest_AlteredProduct struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required.
	// This is same as `Product.product_id`.
	ProductId string `protobuf:"bytes,1,opt,name=product_id,json=productId,proto3" json:"product_id,omitempty"`
	// Required.
	// The final state of the product.
	// The acceptable values are "kept", "filtered", "inserted".
	// kept     : The product was kept as is.
	// filtered : The product is filtered by the caller's own logic.
	// inserted : The product is inserted by the caller's own logic.
	AlteredReason string `protobuf:"bytes,2,opt,name=altered_reason,json=alteredReason,proto3" json:"altered_reason,omitempty"`
	// Required.
	// The final rank.
	// If this is unset (or 0), we assume it is filtered in actual impression.
	Rank int32 `protobuf:"varint,3,opt,name=rank,proto3" json:"rank,omitempty"`
	// Internal
	// If `product_id` is a number, `product_id_hash` equals to `product_id`
	// If `product_id` is not a number, `product_id_hash` equals to `fnv(product_id)`
	ProductIdHash int64 `protobuf:"varint,100,opt,name=product_id_hash,json=productIdHash,proto3" json:"product_id_hash,omitempty"`
}

func (x *AckServerImpressionsRequest_AlteredProduct) Reset() {
	*x = AckServerImpressionsRequest_AlteredProduct{}
	if protoimpl.UnsafeEnabled {
		mi := &file_byteplus_saas_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AckServerImpressionsRequest_AlteredProduct) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AckServerImpressionsRequest_AlteredProduct) ProtoMessage() {}

func (x *AckServerImpressionsRequest_AlteredProduct) ProtoReflect() protoreflect.Message {
	mi := &file_byteplus_saas_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AckServerImpressionsRequest_AlteredProduct.ProtoReflect.Descriptor instead.
func (*AckServerImpressionsRequest_AlteredProduct) Descriptor() ([]byte, []int) {
	return file_byteplus_saas_proto_rawDescGZIP(), []int{9, 0}
}

func (x *AckServerImpressionsRequest_AlteredProduct) GetProductId() string {
	if x != nil {
		return x.ProductId
	}
	return ""
}

func (x *AckServerImpressionsRequest_AlteredProduct) GetAlteredReason() string {
	if x != nil {
		return x.AlteredReason
	}
	return ""
}

func (x *AckServerImpressionsRequest_AlteredProduct) GetRank() int32 {
	if x != nil {
		return x.Rank
	}
	return 0
}

func (x *AckServerImpressionsRequest_AlteredProduct) GetProductIdHash() int64 {
	if x != nil {
		return x.ProductIdHash
	}
	return 0
}

var File_byteplus_saas_proto protoreflect.FileDescriptor

var file_byteplus_saas_proto_rawDesc = []byte{
	0x0a, 0x13, 0x62, 0x79, 0x74, 0x65, 0x70, 0x6c, 0x75, 0x73, 0x5f, 0x73, 0x61, 0x61, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1b, 0x62, 0x79, 0x74, 0x65, 0x64, 0x61, 0x6e, 0x63, 0x65,
	0x2e, 0x62, 0x79, 0x74, 0x65, 0x70, 0x6c, 0x75, 0x73, 0x2e, 0x72, 0x65, 0x63, 0x2e, 0x73, 0x61,
	0x61, 0x73, 0x1a, 0x15, 0x62, 0x79, 0x74, 0x65, 0x70, 0x6c, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xcc, 0x0c, 0x0a, 0x07, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x49, 0x64, 0x12, 0x4d, 0x0a, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69,
	0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x64,
	0x61, 0x6e, 0x63, 0x65, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x70, 0x6c, 0x75, 0x73, 0x2e, 0x72, 0x65,
	0x63, 0x2e, 0x73, 0x61, 0x61, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x43,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x69, 0x65, 0x73, 0x12, 0x42, 0x0a, 0x06, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x2e,
	0x62, 0x79, 0x74, 0x65, 0x70, 0x6c, 0x75, 0x73, 0x2e, 0x72, 0x65, 0x63, 0x2e, 0x73, 0x61, 0x61,
	0x73, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x52,
	0x06, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x73, 0x12, 0x40, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x64, 0x61, 0x6e,
	0x63, 0x65, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x70, 0x6c, 0x75, 0x73, 0x2e, 0x72, 0x65, 0x63, 0x2e,
	0x73, 0x61, 0x61, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x69, 0x73, 0x5f,
	0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0f, 0x69, 0x73, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64,
	0x61, 0x62, 0x6c, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x71, 0x75,
	0x61, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0c, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x74,
	0x61, 0x67, 0x73, 0x12, 0x46, 0x0a, 0x07, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x64, 0x61, 0x6e, 0x63, 0x65,
	0x2e, 0x62, 0x79, 0x74, 0x65, 0x70, 0x6c, 0x75, 0x73, 0x2e, 0x72, 0x65, 0x63, 0x2e, 0x73, 0x61,
	0x61, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x44, 0x69, 0x73, 0x70, 0x6c,
	0x61, 0x79, 0x52, 0x07, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x12, 0x53, 0x0a, 0x0c, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x30, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x62, 0x79,
	0x74, 0x65, 0x70, 0x6c, 0x75, 0x73, 0x2e, 0x72, 0x65, 0x63, 0x2e, 0x73, 0x61, 0x61, 0x73, 0x2e,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x53,
	0x70, 0x65, 0x63, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x53, 0x70, 0x65, 0x63,
	0x12, 0x43, 0x0a, 0x06, 0x73, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2b, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x62, 0x79, 0x74,
	0x65, 0x70, 0x6c, 0x75, 0x73, 0x2e, 0x72, 0x65, 0x63, 0x2e, 0x73, 0x61, 0x61, 0x73, 0x2e, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x53, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x52, 0x06, 0x73,
	0x65, 0x6c, 0x6c, 0x65, 0x72, 0x12, 0x45, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x64,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x64, 0x61, 0x6e, 0x63, 0x65,
	0x2e, 0x62, 0x79, 0x74, 0x65, 0x70, 0x6c, 0x75, 0x73, 0x2e, 0x72, 0x65, 0x63, 0x2e, 0x73, 0x61,
	0x61, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0xc2, 0x01, 0x0a,
	0x08, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0d, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x44, 0x65, 0x70, 0x74, 0x68,
	0x12, 0x61, 0x0a, 0x0e, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x6e, 0x6f, 0x64,
	0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x64,
	0x61, 0x6e, 0x63, 0x65, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x70, 0x6c, 0x75, 0x73, 0x2e, 0x72, 0x65,
	0x63, 0x2e, 0x73, 0x61, 0x61, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x43,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x2e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x4e, 0x6f, 0x64, 0x65, 0x52, 0x0d, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x4e, 0x6f,
	0x64, 0x65, 0x73, 0x1a, 0x2c, 0x0a, 0x0c, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x4e,
	0x6f, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x0a, 0x69, 0x64, 0x5f, 0x6f, 0x72, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x64, 0x4f, 0x72, 0x4e, 0x61, 0x6d,
	0x65, 0x1a, 0x46, 0x0a, 0x05, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x72,
	0x61, 0x6e, 0x64, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0a, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x44, 0x65, 0x70, 0x74, 0x68, 0x12, 0x1c, 0x0a, 0x0a, 0x69,
	0x64, 0x5f, 0x6f, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x69, 0x64, 0x4f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x1a, 0x4f, 0x0a, 0x05, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x6f, 0x72, 0x69, 0x67, 0x69,
	0x6e, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x6f,
	0x72, 0x69, 0x67, 0x69, 0x6e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x1a, 0xea, 0x01, 0x0a, 0x07, 0x44,
	0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x12, 0x39, 0x0a, 0x19, 0x6c, 0x69, 0x73, 0x74, 0x69, 0x6e,
	0x67, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x74,
	0x61, 0x67, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x16, 0x6c, 0x69, 0x73, 0x74, 0x69,
	0x6e, 0x67, 0x50, 0x61, 0x67, 0x65, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x54, 0x61, 0x67,
	0x73, 0x12, 0x37, 0x0a, 0x18, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x5f, 0x70, 0x61, 0x67, 0x65,
	0x5f, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x74, 0x61, 0x67, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x15, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x50, 0x61, 0x67, 0x65, 0x44,
	0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x54, 0x61, 0x67, 0x73, 0x12, 0x39, 0x0a, 0x19, 0x6c, 0x69,
	0x73, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x64, 0x69, 0x73, 0x70, 0x6c,
	0x61, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x6c,
	0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x67, 0x65, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61,
	0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x6d,
	0x75, 0x6c, 0x74, 0x69, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x12, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d,
	0x65, 0x64, 0x69, 0x61, 0x55, 0x72, 0x6c, 0x1a, 0xc2, 0x01, 0x0a, 0x0b, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x53, 0x70, 0x65, 0x63, 0x12, 0x28, 0x0a, 0x10, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49,
	0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x52, 0x61, 0x74, 0x69,
	0x6e, 0x67, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12,
	0x2b, 0x0a, 0x11, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x70, 0x75, 0x62, 0x6c,
	0x69, 0x73, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x1a, 0x60, 0x0a, 0x06,
	0x53, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x65, 0x6c, 0x6c, 0x65, 0x72,
	0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x65,
	0x6c, 0x6c, 0x65, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x65, 0x6c,
	0x6c, 0x65, 0x72, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x0c, 0x73, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x1a, 0x38,
	0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x5f, 0x0a, 0x05, 0x53, 0x63, 0x65, 0x6e,
	0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x22, 0x9f, 0x02, 0x0a, 0x06, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d,
	0x12, 0x17, 0x0a, 0x07, 0x6f, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x6f, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x70, 0x70,
	0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x61, 0x70, 0x70, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x21, 0x0a,
	0x0c, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x42, 0x72, 0x61, 0x6e, 0x64,
	0x12, 0x1d, 0x0a, 0x0a, 0x6f, 0x73, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6f, 0x73, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x21, 0x0a, 0x0c, 0x62, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x62, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x72, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x67, 0x65, 0x6e,
	0x74, 0x12, 0x18, 0x0a, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x22, 0x39, 0x0a, 0x09, 0x44,
	0x61, 0x74, 0x61, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x8a, 0x01, 0x0a, 0x0d, 0x57, 0x72, 0x69, 0x74, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x39, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x64,
	0x61, 0x6e, 0x63, 0x65, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x70, 0x6c, 0x75, 0x73, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x3e, 0x0a, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x2e,
	0x62, 0x79, 0x74, 0x65, 0x70, 0x6c, 0x75, 0x73, 0x2e, 0x72, 0x65, 0x63, 0x2e, 0x73, 0x61, 0x61,
	0x73, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x06, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x73, 0x22, 0xe5, 0x01, 0x0a, 0x10, 0x57, 0x72, 0x69, 0x74, 0x65, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x67, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x12, 0x4e, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x64, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x38, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x62, 0x79, 0x74,
	0x65, 0x70, 0x6c, 0x75, 0x73, 0x2e, 0x72, 0x65, 0x63, 0x2e, 0x73, 0x61, 0x61, 0x73, 0x2e, 0x57,
	0x72, 0x69, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e,
	0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72,
	0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xce, 0x04, 0x0a, 0x0e,
	0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d,
	0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x19, 0x0a,
	0x08, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x38, 0x0a, 0x05, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x64, 0x61, 0x6e, 0x63, 0x65,
	0x2e, 0x62, 0x79, 0x74, 0x65, 0x70, 0x6c, 0x75, 0x73, 0x2e, 0x72, 0x65, 0x63, 0x2e, 0x73, 0x61,
	0x61, 0x73, 0x2e, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x52, 0x05, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x12,
	0x4d, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x33, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x62, 0x79, 0x74,
	0x65, 0x70, 0x6c, 0x75, 0x73, 0x2e, 0x72, 0x65, 0x63, 0x2e, 0x73, 0x61, 0x61, 0x73, 0x2e, 0x50,
	0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x4c,
	0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x64, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x36, 0x2e,
	0x62, 0x79, 0x74, 0x65, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x70, 0x6c,
	0x75, 0x73, 0x2e, 0x72, 0x65, 0x63, 0x2e, 0x73, 0x61, 0x61, 0x73, 0x2e, 0x50, 0x72, 0x65, 0x64,
	0x69, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0xc3, 0x01, 0x0a,
	0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x47, 0x0a, 0x0c, 0x72, 0x6f, 0x6f, 0x74,
	0x5f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x62, 0x79, 0x74, 0x65, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x70,
	0x6c, 0x75, 0x73, 0x2e, 0x72, 0x65, 0x63, 0x2e, 0x73, 0x61, 0x61, 0x73, 0x2e, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x52, 0x0b, 0x72, 0x6f, 0x6f, 0x74, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x12, 0x3b, 0x0a, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x23, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x62, 0x79,
	0x74, 0x65, 0x70, 0x6c, 0x75, 0x73, 0x2e, 0x72, 0x65, 0x63, 0x2e, 0x73, 0x61, 0x61, 0x73, 0x2e,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x32,
	0x0a, 0x15, 0x63, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x13, 0x63,
	0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49,
	0x64, 0x73, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xa0, 0x04, 0x0a,
	0x0d, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x67,
	0x0a, 0x11, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x62, 0x79, 0x74, 0x65,
	0x64, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x70, 0x6c, 0x75, 0x73, 0x2e, 0x72,
	0x65, 0x63, 0x2e, 0x73, 0x61, 0x61, 0x73, 0x2e, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x10, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x12, 0x4b, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61,
	0x18, 0x64, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x64, 0x61, 0x6e,
	0x63, 0x65, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x70, 0x6c, 0x75, 0x73, 0x2e, 0x72, 0x65, 0x63, 0x2e,
	0x73, 0x61, 0x61, 0x73, 0x2e, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65,
	0x78, 0x74, 0x72, 0x61, 0x1a, 0x9e, 0x02, 0x0a, 0x0f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x12, 0x12, 0x0a, 0x04, 0x70,
	0x63, 0x74, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x70, 0x63, 0x74, 0x72, 0x12,
	0x12, 0x0a, 0x04, 0x70, 0x63, 0x76, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x70,
	0x63, 0x76, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x65, 0x63, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x65, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x5b,
	0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x64, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x45, 0x2e,
	0x62, 0x79, 0x74, 0x65, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x70, 0x6c,
	0x75, 0x73, 0x2e, 0x72, 0x65, 0x63, 0x2e, 0x73, 0x61, 0x61, 0x73, 0x2e, 0x50, 0x72, 0x65, 0x64,
	0x69, 0x63, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45,
	0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0xad, 0x01, 0x0a, 0x0f, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x39, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x2e,
	0x62, 0x79, 0x74, 0x65, 0x70, 0x6c, 0x75, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1d,
	0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x40, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x62,
	0x79, 0x74, 0x65, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x70, 0x6c, 0x75,
	0x73, 0x2e, 0x72, 0x65, 0x63, 0x2e, 0x73, 0x61, 0x61, 0x73, 0x2e, 0x50, 0x72, 0x65, 0x64, 0x69,
	0x63, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22,
	0x88, 0x04, 0x0a, 0x1b, 0x41, 0x63, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x6d, 0x70,
	0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x19,
	0x0a, 0x08, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x70, 0x72, 0x65,
	0x64, 0x69, 0x63, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x25, 0x0a, 0x0e, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x5f, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69,
	0x63, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x38, 0x0a, 0x05, 0x73, 0x63, 0x65, 0x6e, 0x65,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x64, 0x61, 0x6e,
	0x63, 0x65, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x70, 0x6c, 0x75, 0x73, 0x2e, 0x72, 0x65, 0x63, 0x2e,
	0x73, 0x61, 0x61, 0x73, 0x2e, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x52, 0x05, 0x73, 0x63, 0x65, 0x6e,
	0x65, 0x12, 0x72, 0x0a, 0x10, 0x61, 0x6c, 0x74, 0x65, 0x72, 0x65, 0x64, 0x5f, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x47, 0x2e, 0x62, 0x79,
	0x74, 0x65, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x70, 0x6c, 0x75, 0x73,
	0x2e, 0x72, 0x65, 0x63, 0x2e, 0x73, 0x61, 0x61, 0x73, 0x2e, 0x41, 0x63, 0x6b, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x49, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x41, 0x6c, 0x74, 0x65, 0x72, 0x65, 0x64, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x52, 0x0f, 0x61, 0x6c, 0x74, 0x65, 0x72, 0x65, 0x64, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x73, 0x1a, 0x92, 0x01, 0x0a, 0x0e, 0x41, 0x6c, 0x74, 0x65, 0x72, 0x65,
	0x64, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x6c, 0x74, 0x65, 0x72,
	0x65, 0x64, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x61, 0x6c, 0x74, 0x65, 0x72, 0x65, 0x64, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x12,
	0x0a, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x72, 0x61,
	0x6e, 0x6b, 0x12, 0x26, 0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x69, 0x64,
	0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x64, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x48, 0x61, 0x73, 0x68, 0x22, 0x59, 0x0a, 0x1c, 0x41, 0x63,
	0x6b, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x39, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x62, 0x79, 0x74,
	0x65, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x70, 0x6c, 0x75, 0x73, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x32, 0xc9, 0x04, 0x0a, 0x13, 0x42, 0x79, 0x74, 0x65, 0x50, 0x6c,
	0x75, 0x73, 0x53, 0x61, 0x61, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x66, 0x0a,
	0x09, 0x57, 0x72, 0x69, 0x74, 0x55, 0x73, 0x65, 0x72, 0x73, 0x12, 0x2d, 0x2e, 0x62, 0x79, 0x74,
	0x65, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x70, 0x6c, 0x75, 0x73, 0x2e,
	0x72, 0x65, 0x63, 0x2e, 0x73, 0x61, 0x61, 0x73, 0x2e, 0x57, 0x72, 0x69, 0x74, 0x65, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x62, 0x79, 0x74, 0x65,
	0x64, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x70, 0x6c, 0x75, 0x73, 0x2e, 0x72,
	0x65, 0x63, 0x2e, 0x73, 0x61, 0x61, 0x73, 0x2e, 0x57, 0x72, 0x69, 0x74, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x69, 0x0a, 0x0c, 0x57, 0x72, 0x69, 0x74, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x73, 0x12, 0x2d, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x64, 0x61, 0x6e, 0x63,
	0x65, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x70, 0x6c, 0x75, 0x73, 0x2e, 0x72, 0x65, 0x63, 0x2e, 0x73,
	0x61, 0x61, 0x73, 0x2e, 0x57, 0x72, 0x69, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x64, 0x61, 0x6e, 0x63, 0x65,
	0x2e, 0x62, 0x79, 0x74, 0x65, 0x70, 0x6c, 0x75, 0x73, 0x2e, 0x72, 0x65, 0x63, 0x2e, 0x73, 0x61,
	0x61, 0x73, 0x2e, 0x57, 0x72, 0x69, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x6b, 0x0a, 0x0e, 0x57, 0x72, 0x69, 0x74, 0x55, 0x73, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x73, 0x12, 0x2d, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x62,
	0x79, 0x74, 0x65, 0x70, 0x6c, 0x75, 0x73, 0x2e, 0x72, 0x65, 0x63, 0x2e, 0x73, 0x61, 0x61, 0x73,
	0x2e, 0x57, 0x72, 0x69, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x2a, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x62, 0x79,
	0x74, 0x65, 0x70, 0x6c, 0x75, 0x73, 0x2e, 0x72, 0x65, 0x63, 0x2e, 0x73, 0x61, 0x61, 0x73, 0x2e,
	0x57, 0x72, 0x69, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x64, 0x0a,
	0x07, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x12, 0x2b, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x64,
	0x61, 0x6e, 0x63, 0x65, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x70, 0x6c, 0x75, 0x73, 0x2e, 0x72, 0x65,
	0x63, 0x2e, 0x73, 0x61, 0x61, 0x73, 0x2e, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x64, 0x61, 0x6e, 0x63,
	0x65, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x70, 0x6c, 0x75, 0x73, 0x2e, 0x72, 0x65, 0x63, 0x2e, 0x73,
	0x61, 0x61, 0x73, 0x2e, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x8b, 0x01, 0x0a, 0x14, 0x41, 0x63, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x49, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x38, 0x2e, 0x62,
	0x79, 0x74, 0x65, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x70, 0x6c, 0x75,
	0x73, 0x2e, 0x72, 0x65, 0x63, 0x2e, 0x73, 0x61, 0x61, 0x73, 0x2e, 0x41, 0x63, 0x6b, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x49, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x39, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x64, 0x61, 0x6e,
	0x63, 0x65, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x70, 0x6c, 0x75, 0x73, 0x2e, 0x72, 0x65, 0x63, 0x2e,
	0x73, 0x61, 0x61, 0x73, 0x2e, 0x41, 0x63, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x6d,
	0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x42, 0x4a, 0x0a, 0x1a, 0x62, 0x79, 0x74, 0x65, 0x70, 0x6c, 0x75, 0x73, 0x2e, 0x73, 0x64,
	0x6b, 0x2e, 0x73, 0x61, 0x61, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5a,
	0x2c, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x62, 0x79, 0x74, 0x65,
	0x70, 0x6c, 0x75, 0x73, 0x2d, 0x73, 0x64, 0x6b, 0x2f, 0x73, 0x64, 0x6b, 0x2d, 0x67, 0x6f, 0x2f,
	0x73, 0x61, 0x61, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_byteplus_saas_proto_rawDescOnce sync.Once
	file_byteplus_saas_proto_rawDescData = file_byteplus_saas_proto_rawDesc
)

func file_byteplus_saas_proto_rawDescGZIP() []byte {
	file_byteplus_saas_proto_rawDescOnce.Do(func() {
		file_byteplus_saas_proto_rawDescData = protoimpl.X.CompressGZIP(file_byteplus_saas_proto_rawDescData)
	})
	return file_byteplus_saas_proto_rawDescData
}

var file_byteplus_saas_proto_msgTypes = make([]protoimpl.MessageInfo, 26)
var file_byteplus_saas_proto_goTypes = []interface{}{
	(*Product)(nil),                       // 0: bytedance.byteplus.rec.saas.Product
	(*Scene)(nil),                         // 1: bytedance.byteplus.rec.saas.Scene
	(*Device)(nil),                        // 2: bytedance.byteplus.rec.saas.Device
	(*DataError)(nil),                     // 3: bytedance.byteplus.rec.saas.DataError
	(*WriteResponse)(nil),                 // 4: bytedance.byteplus.rec.saas.WriteResponse
	(*WriteDataRequest)(nil),              // 5: bytedance.byteplus.rec.saas.WriteDataRequest
	(*PredictRequest)(nil),                // 6: bytedance.byteplus.rec.saas.PredictRequest
	(*PredictResult)(nil),                 // 7: bytedance.byteplus.rec.saas.PredictResult
	(*PredictResponse)(nil),               // 8: bytedance.byteplus.rec.saas.PredictResponse
	(*AckServerImpressionsRequest)(nil),   // 9: bytedance.byteplus.rec.saas.AckServerImpressionsRequest
	(*AckServerImpressionsResponse)(nil),  // 10: bytedance.byteplus.rec.saas.AckServerImpressionsResponse
	(*Product_Category)(nil),              // 11: bytedance.byteplus.rec.saas.Product.Category
	(*Product_Brand)(nil),                 // 12: bytedance.byteplus.rec.saas.Product.Brand
	(*Product_Price)(nil),                 // 13: bytedance.byteplus.rec.saas.Product.Price
	(*Product_Display)(nil),               // 14: bytedance.byteplus.rec.saas.Product.Display
	(*Product_ProductSpec)(nil),           // 15: bytedance.byteplus.rec.saas.Product.ProductSpec
	(*Product_Seller)(nil),                // 16: bytedance.byteplus.rec.saas.Product.Seller
	nil,                                   // 17: bytedance.byteplus.rec.saas.Product.ExtraEntry
	(*Product_Category_CategoryNode)(nil), // 18: bytedance.byteplus.rec.saas.Product.Category.CategoryNode
	nil,                                   // 19: bytedance.byteplus.rec.saas.WriteDataRequest.ExtraEntry
	(*PredictRequest_Context)(nil),        // 20: bytedance.byteplus.rec.saas.PredictRequest.Context
	nil,                                   // 21: bytedance.byteplus.rec.saas.PredictRequest.ExtraEntry
	(*PredictResult_ResponseProduct)(nil), // 22: bytedance.byteplus.rec.saas.PredictResult.ResponseProduct
	nil,                                   // 23: bytedance.byteplus.rec.saas.PredictResult.ExtraEntry
	nil,                                   // 24: bytedance.byteplus.rec.saas.PredictResult.ResponseProduct.ExtraEntry
	(*AckServerImpressionsRequest_AlteredProduct)(nil), // 25: bytedance.byteplus.rec.saas.AckServerImpressionsRequest.AlteredProduct
	(*protocol.Status)(nil),                            // 26: bytedance.byteplus.common.Status
}
var file_byteplus_saas_proto_depIdxs = []int32{
	11, // 0: bytedance.byteplus.rec.saas.Product.categories:type_name -> bytedance.byteplus.rec.saas.Product.Category
	12, // 1: bytedance.byteplus.rec.saas.Product.brands:type_name -> bytedance.byteplus.rec.saas.Product.Brand
	13, // 2: bytedance.byteplus.rec.saas.Product.price:type_name -> bytedance.byteplus.rec.saas.Product.Price
	14, // 3: bytedance.byteplus.rec.saas.Product.display:type_name -> bytedance.byteplus.rec.saas.Product.Display
	15, // 4: bytedance.byteplus.rec.saas.Product.product_spec:type_name -> bytedance.byteplus.rec.saas.Product.ProductSpec
	16, // 5: bytedance.byteplus.rec.saas.Product.seller:type_name -> bytedance.byteplus.rec.saas.Product.Seller
	17, // 6: bytedance.byteplus.rec.saas.Product.extra:type_name -> bytedance.byteplus.rec.saas.Product.ExtraEntry
	26, // 7: bytedance.byteplus.rec.saas.WriteResponse.status:type_name -> bytedance.byteplus.common.Status
	3,  // 8: bytedance.byteplus.rec.saas.WriteResponse.errors:type_name -> bytedance.byteplus.rec.saas.DataError
	19, // 9: bytedance.byteplus.rec.saas.WriteDataRequest.extra:type_name -> bytedance.byteplus.rec.saas.WriteDataRequest.ExtraEntry
	1,  // 10: bytedance.byteplus.rec.saas.PredictRequest.scene:type_name -> bytedance.byteplus.rec.saas.Scene
	20, // 11: bytedance.byteplus.rec.saas.PredictRequest.context:type_name -> bytedance.byteplus.rec.saas.PredictRequest.Context
	21, // 12: bytedance.byteplus.rec.saas.PredictRequest.extra:type_name -> bytedance.byteplus.rec.saas.PredictRequest.ExtraEntry
	22, // 13: bytedance.byteplus.rec.saas.PredictResult.response_products:type_name -> bytedance.byteplus.rec.saas.PredictResult.ResponseProduct
	23, // 14: bytedance.byteplus.rec.saas.PredictResult.extra:type_name -> bytedance.byteplus.rec.saas.PredictResult.ExtraEntry
	26, // 15: bytedance.byteplus.rec.saas.PredictResponse.status:type_name -> bytedance.byteplus.common.Status
	7,  // 16: bytedance.byteplus.rec.saas.PredictResponse.value:type_name -> bytedance.byteplus.rec.saas.PredictResult
	1,  // 17: bytedance.byteplus.rec.saas.AckServerImpressionsRequest.scene:type_name -> bytedance.byteplus.rec.saas.Scene
	25, // 18: bytedance.byteplus.rec.saas.AckServerImpressionsRequest.altered_products:type_name -> bytedance.byteplus.rec.saas.AckServerImpressionsRequest.AlteredProduct
	26, // 19: bytedance.byteplus.rec.saas.AckServerImpressionsResponse.status:type_name -> bytedance.byteplus.common.Status
	18, // 20: bytedance.byteplus.rec.saas.Product.Category.category_nodes:type_name -> bytedance.byteplus.rec.saas.Product.Category.CategoryNode
	0,  // 21: bytedance.byteplus.rec.saas.PredictRequest.Context.root_product:type_name -> bytedance.byteplus.rec.saas.Product
	2,  // 22: bytedance.byteplus.rec.saas.PredictRequest.Context.device:type_name -> bytedance.byteplus.rec.saas.Device
	24, // 23: bytedance.byteplus.rec.saas.PredictResult.ResponseProduct.extra:type_name -> bytedance.byteplus.rec.saas.PredictResult.ResponseProduct.ExtraEntry
	5,  // 24: bytedance.byteplus.rec.saas.BytePlusSaasService.WritUsers:input_type -> bytedance.byteplus.rec.saas.WriteDataRequest
	5,  // 25: bytedance.byteplus.rec.saas.BytePlusSaasService.WritProducts:input_type -> bytedance.byteplus.rec.saas.WriteDataRequest
	5,  // 26: bytedance.byteplus.rec.saas.BytePlusSaasService.WritUserEvents:input_type -> bytedance.byteplus.rec.saas.WriteDataRequest
	6,  // 27: bytedance.byteplus.rec.saas.BytePlusSaasService.Predict:input_type -> bytedance.byteplus.rec.saas.PredictRequest
	9,  // 28: bytedance.byteplus.rec.saas.BytePlusSaasService.AckServerImpressions:input_type -> bytedance.byteplus.rec.saas.AckServerImpressionsRequest
	4,  // 29: bytedance.byteplus.rec.saas.BytePlusSaasService.WritUsers:output_type -> bytedance.byteplus.rec.saas.WriteResponse
	4,  // 30: bytedance.byteplus.rec.saas.BytePlusSaasService.WritProducts:output_type -> bytedance.byteplus.rec.saas.WriteResponse
	4,  // 31: bytedance.byteplus.rec.saas.BytePlusSaasService.WritUserEvents:output_type -> bytedance.byteplus.rec.saas.WriteResponse
	8,  // 32: bytedance.byteplus.rec.saas.BytePlusSaasService.Predict:output_type -> bytedance.byteplus.rec.saas.PredictResponse
	10, // 33: bytedance.byteplus.rec.saas.BytePlusSaasService.AckServerImpressions:output_type -> bytedance.byteplus.rec.saas.AckServerImpressionsResponse
	29, // [29:34] is the sub-list for method output_type
	24, // [24:29] is the sub-list for method input_type
	24, // [24:24] is the sub-list for extension type_name
	24, // [24:24] is the sub-list for extension extendee
	0,  // [0:24] is the sub-list for field type_name
}

func init() { file_byteplus_saas_proto_init() }
func file_byteplus_saas_proto_init() {
	if File_byteplus_saas_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_byteplus_saas_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Product); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_byteplus_saas_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Scene); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_byteplus_saas_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Device); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_byteplus_saas_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataError); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_byteplus_saas_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WriteResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_byteplus_saas_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WriteDataRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_byteplus_saas_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PredictRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_byteplus_saas_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PredictResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_byteplus_saas_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PredictResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_byteplus_saas_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AckServerImpressionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_byteplus_saas_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AckServerImpressionsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_byteplus_saas_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Product_Category); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_byteplus_saas_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Product_Brand); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_byteplus_saas_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Product_Price); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_byteplus_saas_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Product_Display); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_byteplus_saas_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Product_ProductSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_byteplus_saas_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Product_Seller); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_byteplus_saas_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Product_Category_CategoryNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_byteplus_saas_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PredictRequest_Context); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_byteplus_saas_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PredictResult_ResponseProduct); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_byteplus_saas_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AckServerImpressionsRequest_AlteredProduct); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_byteplus_saas_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   26,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_byteplus_saas_proto_goTypes,
		DependencyIndexes: file_byteplus_saas_proto_depIdxs,
		MessageInfos:      file_byteplus_saas_proto_msgTypes,
	}.Build()
	File_byteplus_saas_proto = out.File
	file_byteplus_saas_proto_rawDesc = nil
	file_byteplus_saas_proto_goTypes = nil
	file_byteplus_saas_proto_depIdxs = nil
}
